From 5c34a9761ed643a53c3c2a8a6d9eb52b55645db3 Mon Sep 17 00:00:00 2001
From: chromium-sdk <project_26591639_bot@noreply.gitlab.com>
Date: Thu, 30 May 2024 07:40:09 +0200
Subject: [PATCH] eyeo Browser Ad filtering Solution: Android API Module

Based on Chromium 126.0.6478.8

Pre-requisites: eyeo Browser Ad filtering Solution: Base Module
---
 chrome/android/BUILD.gn                       |  15 +
 chrome/android/chrome_java_sources.gni        |   4 +
 .../browser/adblock/TabIdTranslator.java      |  36 ++
 chrome/browser/BUILD.gn                       |   4 +
 .../android/adblock/tab_id_translator_jni.cc  |  41 ++
 chrome/browser/ui/BUILD.gn                    |   7 +
 components/adblock/android/BUILD.gn           | 105 ++++
 .../adblock/android/adblock_controller_jni.cc | 128 +++++
 .../filtering_configuration_android.cc        | 226 ++++++++
 .../android/filtering_configuration_android.h |  94 +++
 .../components/adblock/AdblockController.java | 259 +++++++++
 .../components/adblock/ContentType.java       |  61 ++
 .../adblock/FilteringConfiguration.java       | 409 +++++++++++++
 .../ResourceClassificationNotifier.java       | 233 ++++++++
 .../adblock/ResourceFilteringCounters.java    | 111 ++++
 .../adblock/AdblockControllerTestBase.java    |  64 +++
 .../adblock/DefaultSettingsTestBase.java      |  72 +++
 .../FilteringConfigurationTestBase.java       | 421 ++++++++++++++
 .../TestPagesCircumventionTestBase.java       |  65 +++
 .../adblock/TestPagesCspTestBase.java         |  86 +++
 .../TestPagesElemhideEmuInvTestBase.java      | 116 ++++
 .../adblock/TestPagesElemhideEmuTestBase.java | 161 ++++++
 .../adblock/TestPagesElemhideTestBase.java    | 159 ++++++
 .../adblock/TestPagesExceptionTestBase.java   | 190 +++++++
 .../adblock/TestPagesFilterTestBase.java      | 277 +++++++++
 .../TestPagesHeaderFilterTestBase.java        | 102 ++++
 .../adblock/TestPagesHelperBase.java          | 230 ++++++++
 .../adblock/TestPagesInlineCssTestBase.java   |  94 +++
 .../adblock/TestPagesRemoveTestBase.java      |  94 +++
 .../adblock/TestPagesRewriteTestBase.java     | 175 ++++++
 .../adblock/TestPagesSiteKeyTestBase.java     |  51 ++
 .../adblock/TestPagesSnippetsTestBase.java    | 538 ++++++++++++++++++
 .../adblock/TestPagesWebsocketTestBase.java   |  54 ++
 .../TestPagesWildcardDomainTestBase.java      | 116 ++++
 .../TestResourceFilteringObserver.java        | 181 ++++++
 .../adblock/TestVerificationUtils.java        | 229 ++++++++
 ...esource_classification_notifier_android.cc | 161 ++++++
 ...resource_classification_notifier_android.h |  72 +++
 38 files changed, 5441 insertions(+)
 create mode 100644 chrome/android/java/src/org/chromium/chrome/browser/adblock/TabIdTranslator.java
 create mode 100644 chrome/browser/android/adblock/tab_id_translator_jni.cc
 create mode 100644 components/adblock/android/BUILD.gn
 create mode 100644 components/adblock/android/adblock_controller_jni.cc
 create mode 100644 components/adblock/android/filtering_configuration_android.cc
 create mode 100644 components/adblock/android/filtering_configuration_android.h
 create mode 100644 components/adblock/android/java/src/org/chromium/components/adblock/AdblockController.java
 create mode 100644 components/adblock/android/java/src/org/chromium/components/adblock/ContentType.java
 create mode 100644 components/adblock/android/java/src/org/chromium/components/adblock/FilteringConfiguration.java
 create mode 100644 components/adblock/android/java/src/org/chromium/components/adblock/ResourceClassificationNotifier.java
 create mode 100644 components/adblock/android/java/src/org/chromium/components/adblock/ResourceFilteringCounters.java
 create mode 100644 components/adblock/android/javatests/src/org/chromium/components/adblock/AdblockControllerTestBase.java
 create mode 100644 components/adblock/android/javatests/src/org/chromium/components/adblock/DefaultSettingsTestBase.java
 create mode 100644 components/adblock/android/javatests/src/org/chromium/components/adblock/FilteringConfigurationTestBase.java
 create mode 100644 components/adblock/android/javatests/src/org/chromium/components/adblock/TestPagesCircumventionTestBase.java
 create mode 100644 components/adblock/android/javatests/src/org/chromium/components/adblock/TestPagesCspTestBase.java
 create mode 100644 components/adblock/android/javatests/src/org/chromium/components/adblock/TestPagesElemhideEmuInvTestBase.java
 create mode 100644 components/adblock/android/javatests/src/org/chromium/components/adblock/TestPagesElemhideEmuTestBase.java
 create mode 100644 components/adblock/android/javatests/src/org/chromium/components/adblock/TestPagesElemhideTestBase.java
 create mode 100644 components/adblock/android/javatests/src/org/chromium/components/adblock/TestPagesExceptionTestBase.java
 create mode 100644 components/adblock/android/javatests/src/org/chromium/components/adblock/TestPagesFilterTestBase.java
 create mode 100644 components/adblock/android/javatests/src/org/chromium/components/adblock/TestPagesHeaderFilterTestBase.java
 create mode 100644 components/adblock/android/javatests/src/org/chromium/components/adblock/TestPagesHelperBase.java
 create mode 100644 components/adblock/android/javatests/src/org/chromium/components/adblock/TestPagesInlineCssTestBase.java
 create mode 100644 components/adblock/android/javatests/src/org/chromium/components/adblock/TestPagesRemoveTestBase.java
 create mode 100644 components/adblock/android/javatests/src/org/chromium/components/adblock/TestPagesRewriteTestBase.java
 create mode 100644 components/adblock/android/javatests/src/org/chromium/components/adblock/TestPagesSiteKeyTestBase.java
 create mode 100644 components/adblock/android/javatests/src/org/chromium/components/adblock/TestPagesSnippetsTestBase.java
 create mode 100644 components/adblock/android/javatests/src/org/chromium/components/adblock/TestPagesWebsocketTestBase.java
 create mode 100644 components/adblock/android/javatests/src/org/chromium/components/adblock/TestPagesWildcardDomainTestBase.java
 create mode 100644 components/adblock/android/javatests/src/org/chromium/components/adblock/TestResourceFilteringObserver.java
 create mode 100644 components/adblock/android/javatests/src/org/chromium/components/adblock/TestVerificationUtils.java
 create mode 100644 components/adblock/android/resource_classification_notifier_android.cc
 create mode 100644 components/adblock/android/resource_classification_notifier_android.h

diff --git a/chrome/android/BUILD.gn b/chrome/android/BUILD.gn
index ef0682d1d5..14bcedccc3 100644
--- a/chrome/android/BUILD.gn
+++ b/chrome/android/BUILD.gn
@@ -1,6 +1,9 @@
 # Copyright 2014 The Chromium Authors
 # Use of this source code is governed by a BSD-style license that can be
 # found in the LICENSE file.
+#
+# This source code is a part of eyeo Chromium SDK.
+# Use of this source code is governed by the GPLv3 that can be found in the components/adblock/LICENSE file.
 
 import("//build/android/resource_sizes.gni")
 import("//build/config/android/config.gni")
@@ -275,6 +278,7 @@ if (current_toolchain == default_toolchain) {
     } else {
       deps += [ "//components/plus_addresses/android:java_resources" ]
     }
+
   }
 
   android_library("app_hooks_java") {
@@ -515,6 +519,7 @@ if (current_toolchain == default_toolchain) {
       "//chrome/browser/xsurface:java",
       "//chrome/browser/xsurface_provider:dependency_provider_impl_java",
       "//chrome/browser/xsurface_provider:java",
+      "//components/adblock/android:adblock_controller_java",
       "//components/android_autofill/browser:java",
       "//components/autofill/android:autofill_features_java",
       "//components/autofill/android:autofill_java",
@@ -732,6 +737,7 @@ if (current_toolchain == default_toolchain) {
       "//url/mojom:url_mojom_gurl_java",
     ]
 
+
     deps += feed_deps
 
     srcjar_deps = [
@@ -1664,6 +1670,7 @@ if (current_toolchain == default_toolchain) {
       "//chrome/android/webapk/libs/client:client_java",
       "//chrome/android/webapk/libs/common:common_java",
       "//chrome/android/webapk/libs/runtime_library:webapk_service_aidl_java",
+      "//chrome/browser/adblock/android:adblock_java_tests",
       "//chrome/browser/android/browserservices/intents:java",
       "//chrome/browser/android/browserservices/verification:java",
       "//chrome/browser/android/browserservices/verification:javatests",
@@ -2022,6 +2029,7 @@ if (current_toolchain == default_toolchain) {
     srcjar_deps = [ "//chrome/browser:tos_dialog_behavior_generated_enum" ]
 
     data = [
+      "//chrome/test/data/adblock/",
       "//chrome/test/data/android/",
       "//chrome/test/data/autofill/",
       "//chrome/test/data/background_sync/",
@@ -3820,6 +3828,12 @@ generate_jni("chrome_jni_headers") {
     "java/src/org/chromium/chrome/browser/webapps/WebappRegistry.java",
   ]
 
+  ### Android API module start
+  sources +=
+      [ "java/src/org/chromium/chrome/browser/adblock/TabIdTranslator.java" ]
+
+  ### Android API module end
+
   # Used for testing only, should not be shipped to end users.
   if (enable_offline_pages_harness) {
     sources += [ "java/src/org/chromium/chrome/browser/offlinepages/evaluation/OfflinePageEvaluationBridge.java" ]
@@ -3895,6 +3909,7 @@ group("jni_headers") {
     "//chrome/browser/ui/messages/android:jni_headers",
     "//chrome/browser/util:jni_headers",
     "//chrome/browser/webauthn/android:jni_headers",
+    "//components/adblock/android:jni_headers",
     "//components/browser_ui/device_lock/android:device_lock_bridge_jni_headers",
     "//components/content_relationship_verification/android:jni_headers",
     "//components/image_fetcher:jni_headers",
diff --git a/chrome/android/chrome_java_sources.gni b/chrome/android/chrome_java_sources.gni
index cee75417da..7c14072853 100644
--- a/chrome/android/chrome_java_sources.gni
+++ b/chrome/android/chrome_java_sources.gni
@@ -1,6 +1,9 @@
 # Copyright 2019 The Chromium Authors
 # Use of this source code is governed by a BSD-style license that can be
 # found in the LICENSE file.
+#
+# This source code is a part of eyeo Chromium SDK.
+# Use of this source code is governed by the GPLv3 that can be found in the components/adblock/LICENSE file.
 
 chrome_java_sources = [
   "java/src/com/google/android/apps/chrome/appwidget/bookmarks/BookmarkThumbnailWidgetProvider.java",
@@ -59,6 +62,7 @@ chrome_java_sources = [
   "java/src/org/chromium/chrome/browser/accessibility/settings/AccessibilitySettings.java",
   "java/src/org/chromium/chrome/browser/accessibility/settings/ChromeAccessibilitySettingsDelegate.java",
   "java/src/org/chromium/chrome/browser/accessibility/settings/TextScalePreference.java",
+  "java/src/org/chromium/chrome/browser/adblock/TabIdTranslator.java",
   "java/src/org/chromium/chrome/browser/announcement/AnnouncementNotificationManager.java",
   "java/src/org/chromium/chrome/browser/app/ChromeActivity.java",
   "java/src/org/chromium/chrome/browser/app/appmenu/AppMenuPropertiesDelegateImpl.java",
diff --git a/chrome/android/java/src/org/chromium/chrome/browser/adblock/TabIdTranslator.java b/chrome/android/java/src/org/chromium/chrome/browser/adblock/TabIdTranslator.java
new file mode 100644
index 0000000000..163fdf2a7d
--- /dev/null
+++ b/chrome/android/java/src/org/chromium/chrome/browser/adblock/TabIdTranslator.java
@@ -0,0 +1,36 @@
+/*
+ * This file is part of eyeo Chromium SDK,
+ * Copyright (C) 2006-present eyeo GmbH
+ *
+ * eyeo Chromium SDK is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 3 as
+ * published by the Free Software Foundation.
+ *
+ * eyeo Chromium SDK is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with eyeo Chromium SDK.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+package chromium.chrome.browser.adblock;
+
+import org.jni_zero.NativeMethods;
+
+import org.chromium.content_public.browser.GlobalRenderFrameHostId;
+
+/**
+ * @brief Helper class to translate AdblockCounters.ResourceInfo.mMainFrameId to TabId.
+ */
+public final class TabIdTranslator {
+    public static int fromRenderFrameHostId(GlobalRenderFrameHostId id) {
+        return TabIdTranslatorJni.get().fromRenderFrameHostId(id.childId(), id.frameRoutingId());
+    }
+
+    @NativeMethods
+    public interface Natives {
+        int fromRenderFrameHostId(int renderProcessId, int renderFrameId);
+    }
+}
diff --git a/chrome/browser/BUILD.gn b/chrome/browser/BUILD.gn
index d77f082c85..917816f926 100644
--- a/chrome/browser/BUILD.gn
+++ b/chrome/browser/BUILD.gn
@@ -3527,6 +3527,10 @@ static_library("browser") {
       "webauthn/android/webauthn_request_delegate_android.h",
     ]
 
+    ### Android API module start
+    sources += [ "android/adblock/tab_id_translator_jni.cc" ]
+
+    ### Android API module end
 
     public_deps += [
       "//chrome/android/features/dev_ui:buildflags",
diff --git a/chrome/browser/android/adblock/tab_id_translator_jni.cc b/chrome/browser/android/adblock/tab_id_translator_jni.cc
new file mode 100644
index 0000000000..731aa7bd3a
--- /dev/null
+++ b/chrome/browser/android/adblock/tab_id_translator_jni.cc
@@ -0,0 +1,41 @@
+/*
+ * This file is part of eyeo Chromium SDK,
+ * Copyright (C) 2006-present eyeo GmbH
+ *
+ * eyeo Chromium SDK is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 3 as
+ * published by the Free Software Foundation.
+ *
+ * eyeo Chromium SDK is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with eyeo Chromium SDK.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+#include "chrome/android/chrome_jni_headers/TabIdTranslator_jni.h"
+#include "chrome/browser/android/tab_android.h"
+#include "content/public/browser/web_contents.h"
+
+namespace {
+constexpr int kNoTabId = -1;
+}
+
+static jint JNI_TabIdTranslator_FromRenderFrameHostId(JNIEnv* env,
+                                                      jint render_process_id,
+                                                      jint render_frame_id) {
+  auto* web_contents = content::WebContents::FromRenderFrameHost(
+      content::RenderFrameHost::FromID(render_process_id, render_frame_id));
+  if (!web_contents) {
+    return kNoTabId;
+  }
+
+  auto* tab = TabAndroid::FromWebContents(web_contents);
+  if (!tab) {
+    return kNoTabId;
+  }
+
+  return tab->GetAndroidId();
+}
diff --git a/chrome/browser/ui/BUILD.gn b/chrome/browser/ui/BUILD.gn
index cc7eaf76ea..2be6381b19 100644
--- a/chrome/browser/ui/BUILD.gn
+++ b/chrome/browser/ui/BUILD.gn
@@ -1082,6 +1082,13 @@ static_library("ui") {
     # TODO(b/335257259): Resolve circular deps.
     allow_circular_includes_from += [ "//chrome/browser/facilitated_payments" ]
 
+    ### Android API module start
+    deps += [
+      "//components/adblock/android:java_bindings",
+      "//components/adblock/android:jni_headers",
+    ]
+
+    ### Android API module end
   } else {
     # !is_android
     sources += [
diff --git a/components/adblock/android/BUILD.gn b/components/adblock/android/BUILD.gn
new file mode 100644
index 0000000000..1ad11ae012
--- /dev/null
+++ b/components/adblock/android/BUILD.gn
@@ -0,0 +1,105 @@
+# This file is part of eyeo Chromium SDK,
+# Copyright (C) 2006-present eyeo GmbH
+# eyeo Chromium SDK is free software: you can redistribute it and/or modify
+# it under the terms of the GNU General Public License version 3 as
+# published by the Free Software Foundation.
+# eyeo Chromium SDK is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+# You should have received a copy of the GNU General Public License
+# along with eyeo Chromium SDK.  If not, see <http://www.gnu.org/licenses/>.
+
+import("//build/config/android/rules.gni")
+import("//build/config/locales.gni")
+import("//third_party/jni_zero/jni_zero.gni")
+import("//tools/grit/grit_rule.gni")
+
+source_set("java_bindings") {
+  sources = [
+    "adblock_controller_jni.cc",
+    "filtering_configuration_android.cc",
+    "filtering_configuration_android.h",
+    "resource_classification_notifier_android.cc",
+    "resource_classification_notifier_android.h",
+  ]
+  deps = [
+    ":jni_headers",
+    "//base",
+    "//components/keyed_service/content:content",
+    "//components/user_prefs:user_prefs",
+  ]
+
+  public_deps = [
+    "//components/adblock/content:browser",
+    "//components/adblock/core/configuration",
+    "//components/adblock/core/subscription",
+    "//components/prefs",
+  ]
+}
+
+generate_jni("jni_headers") {
+  sources = [
+    "java/src/org/chromium/components/adblock/AdblockController.java",
+    "java/src/org/chromium/components/adblock/FilteringConfiguration.java",
+    "java/src/org/chromium/components/adblock/ResourceClassificationNotifier.java",
+  ]
+}
+
+android_library("adblock_controller_java") {
+  sources = [
+    "java/src/org/chromium/components/adblock/AdblockController.java",
+    "java/src/org/chromium/components/adblock/ContentType.java",
+    "java/src/org/chromium/components/adblock/FilteringConfiguration.java",
+    "java/src/org/chromium/components/adblock/ResourceClassificationNotifier.java",
+    "java/src/org/chromium/components/adblock/ResourceFilteringCounters.java",
+  ]
+
+  srcjar_deps = [ ":jni_headers" ]
+  deps = [
+    "//base:base_java",
+    "//content/public/android:content_java",
+    "//third_party/androidx:androidx_annotation_annotation_java",
+    "//third_party/jni_zero:jni_zero_java",
+  ]
+
+  resources_package = "org.chromium.components.adblock.controller"
+}
+
+android_library("adblock_java_tests_base") {
+  testonly = true
+  sources = [
+    "javatests/src/org/chromium/components/adblock/AdblockControllerTestBase.java",
+    "javatests/src/org/chromium/components/adblock/DefaultSettingsTestBase.java",
+    "javatests/src/org/chromium/components/adblock/FilteringConfigurationTestBase.java",
+    "javatests/src/org/chromium/components/adblock/TestPagesCircumventionTestBase.java",
+    "javatests/src/org/chromium/components/adblock/TestPagesCspTestBase.java",
+    "javatests/src/org/chromium/components/adblock/TestPagesElemhideEmuInvTestBase.java",
+    "javatests/src/org/chromium/components/adblock/TestPagesElemhideEmuTestBase.java",
+    "javatests/src/org/chromium/components/adblock/TestPagesElemhideTestBase.java",
+    "javatests/src/org/chromium/components/adblock/TestPagesExceptionTestBase.java",
+    "javatests/src/org/chromium/components/adblock/TestPagesFilterTestBase.java",
+    "javatests/src/org/chromium/components/adblock/TestPagesHeaderFilterTestBase.java",
+    "javatests/src/org/chromium/components/adblock/TestPagesHelperBase.java",
+    "javatests/src/org/chromium/components/adblock/TestPagesInlineCssTestBase.java",
+    "javatests/src/org/chromium/components/adblock/TestPagesRemoveTestBase.java",
+    "javatests/src/org/chromium/components/adblock/TestPagesRewriteTestBase.java",
+    "javatests/src/org/chromium/components/adblock/TestPagesSiteKeyTestBase.java",
+    "javatests/src/org/chromium/components/adblock/TestPagesSnippetsTestBase.java",
+    "javatests/src/org/chromium/components/adblock/TestPagesWebsocketTestBase.java",
+    "javatests/src/org/chromium/components/adblock/TestPagesWildcardDomainTestBase.java",
+    "javatests/src/org/chromium/components/adblock/TestResourceFilteringObserver.java",
+    "javatests/src/org/chromium/components/adblock/TestVerificationUtils.java",
+  ]
+  deps = [
+    ":adblock_controller_java",
+    "//base:base_java",
+    "//base:base_java_test_support",
+    "//content/public/android:content_full_java",
+    "//content/public/test/android:content_java_test_support",
+    "//net/android:net_java_test_support",
+    "//third_party/androidx:androidx_test_monitor_java",
+    "//third_party/androidx:androidx_test_runner_java",
+    "//third_party/junit:junit",
+  ]
+}
diff --git a/components/adblock/android/adblock_controller_jni.cc b/components/adblock/android/adblock_controller_jni.cc
new file mode 100644
index 0000000000..eb13f800ff
--- /dev/null
+++ b/components/adblock/android/adblock_controller_jni.cc
@@ -0,0 +1,128 @@
+/*
+ * This file is part of eyeo Chromium SDK,
+ * Copyright (C) 2006-present eyeo GmbH
+ *
+ * eyeo Chromium SDK is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 3 as
+ * published by the Free Software Foundation.
+ *
+ * eyeo Chromium SDK is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with eyeo Chromium SDK.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+#include <algorithm>
+#include <iterator>
+#include <vector>
+
+#include "base/android/jni_android.h"
+#include "base/android/jni_array.h"
+#include "base/android/jni_string.h"
+#include "base/android/jni_weak_ref.h"
+#include "base/logging.h"
+#include "components/adblock/android/jni_headers/AdblockController_jni.h"
+#include "components/adblock/content/browser/factories/subscription_service_factory.h"
+#include "components/adblock/core/common/adblock_constants.h"
+#include "components/adblock/core/subscription/subscription_config.h"
+#include "content/public/browser/android/browser_context_handle.h"
+#include "content/public/browser/browser_thread.h"
+
+using base::android::CheckException;
+using base::android::ConvertUTF8ToJavaString;
+using base::android::GetClass;
+using base::android::JavaParamRef;
+using base::android::MethodID;
+using base::android::ScopedJavaLocalRef;
+using base::android::ToJavaArrayOfObjects;
+using base::android::ToJavaArrayOfStrings;
+
+namespace {
+
+ScopedJavaLocalRef<jobject> ToJava(JNIEnv* env,
+                                   ScopedJavaLocalRef<jclass>& url_class,
+                                   jmethodID& url_constructor,
+                                   const std::string& url,
+                                   const std::string& title,
+                                   const std::string& version,
+                                   const std::vector<std::string>& languages) {
+  ScopedJavaLocalRef<jobject> url_param(
+      env, env->NewObject(url_class.obj(), url_constructor,
+                          ConvertUTF8ToJavaString(env, url).obj()));
+  CheckException(env);
+  return Java_Subscription_Constructor(env, url_param,
+                                       ConvertUTF8ToJavaString(env, title),
+                                       ConvertUTF8ToJavaString(env, version),
+                                       ToJavaArrayOfStrings(env, languages));
+}
+
+std::vector<ScopedJavaLocalRef<jobject>> CSubscriptionsToJObjects(
+    JNIEnv* env,
+    const std::vector<scoped_refptr<adblock::Subscription>>& subscriptions) {
+  ScopedJavaLocalRef<jclass> url_class = GetClass(env, "java/net/URL");
+  jmethodID url_constructor = MethodID::Get<MethodID::TYPE_INSTANCE>(
+      env, url_class.obj(), "<init>", "(Ljava/lang/String;)V");
+  std::vector<ScopedJavaLocalRef<jobject>> jobjects;
+  jobjects.reserve(subscriptions.size());
+  for (auto& sub : subscriptions) {
+    jobjects.push_back(ToJava(
+        env, url_class, url_constructor, sub->GetSourceUrl().spec(),
+        sub->GetTitle(), sub->GetCurrentVersion(), std::vector<std::string>{}));
+  }
+  return jobjects;
+}
+
+std::vector<ScopedJavaLocalRef<jobject>> CSubscriptionsToJObjects(
+    JNIEnv* env,
+    std::vector<adblock::KnownSubscriptionInfo>& subscriptions) {
+  ScopedJavaLocalRef<jclass> url_class = GetClass(env, "java/net/URL");
+  jmethodID url_constructor = MethodID::Get<MethodID::TYPE_INSTANCE>(
+      env, url_class.obj(), "<init>", "(Ljava/lang/String;)V");
+  std::vector<ScopedJavaLocalRef<jobject>> jobjects;
+  jobjects.reserve(subscriptions.size());
+  for (auto& sub : subscriptions) {
+    if (sub.ui_visibility == adblock::SubscriptionUiVisibility::Visible) {
+      // The checks here are when one makes f.e. adblock:custom visible
+      DCHECK(sub.url.is_valid());
+      if (sub.url.is_valid()) {
+        jobjects.push_back(ToJava(env, url_class, url_constructor,
+                                  sub.url.spec(), sub.title, "",
+                                  sub.languages));
+      }
+    }
+  }
+  return jobjects;
+}
+
+}  // namespace
+
+static base::android::ScopedJavaLocalRef<jobjectArray>
+JNI_AdblockController_GetInstalledSubscriptions(
+    JNIEnv* env,
+    const base::android::JavaParamRef<jobject>& jbrowser_context_handle) {
+  DCHECK_CURRENTLY_ON(content::BrowserThread::UI);
+  auto* subscription_service =
+      adblock::SubscriptionServiceFactory::GetForBrowserContext(
+          content::BrowserContextFromJavaHandle(jbrowser_context_handle));
+  if (!subscription_service) {
+    return ToJavaArrayOfObjects(env,
+                                std::vector<ScopedJavaLocalRef<jobject>>{});
+  }
+
+  return ToJavaArrayOfObjects(
+      env, CSubscriptionsToJObjects(
+               env, subscription_service->GetCurrentSubscriptions(
+                        subscription_service->GetFilteringConfiguration(
+                            adblock::kAdblockFilteringConfigurationName))));
+}
+
+static base::android::ScopedJavaLocalRef<jobjectArray>
+JNI_AdblockController_GetRecommendedSubscriptions(JNIEnv* env) {
+  DCHECK_CURRENTLY_ON(content::BrowserThread::UI);
+
+  auto list = adblock::config::GetKnownSubscriptions();
+  return ToJavaArrayOfObjects(env, CSubscriptionsToJObjects(env, list));
+}
diff --git a/components/adblock/android/filtering_configuration_android.cc b/components/adblock/android/filtering_configuration_android.cc
new file mode 100644
index 0000000000..c3f5810421
--- /dev/null
+++ b/components/adblock/android/filtering_configuration_android.cc
@@ -0,0 +1,226 @@
+/*
+ * This file is part of eyeo Chromium SDK,
+ * Copyright (C) 2006-present eyeo GmbH
+ *
+ * eyeo Chromium SDK is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 3 as
+ * published by the Free Software Foundation.
+ *
+ * eyeo Chromium SDK is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with eyeo Chromium SDK.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+#include "components/adblock/android/filtering_configuration_android.h"
+
+#include <iterator>
+#include <memory>
+
+#include "base/android/jni_android.h"
+#include "base/android/jni_array.h"
+#include "base/android/jni_string.h"
+#include "base/ranges/algorithm.h"
+#include "components/adblock/android/jni_headers/FilteringConfiguration_jni.h"
+#include "components/adblock/content/browser/factories/subscription_service_factory.h"
+#include "components/adblock/core/configuration/filtering_configuration.h"
+#include "components/adblock/core/configuration/persistent_filtering_configuration.h"
+#include "components/adblock/core/subscription/subscription_config.h"
+#include "components/user_prefs/user_prefs.h"
+#include "content/public/browser/android/browser_context_handle.h"
+
+using base::android::AttachCurrentThread;
+using base::android::ConvertJavaStringToUTF8;
+using base::android::ConvertUTF8ToJavaString;
+using base::android::JavaParamRef;
+using base::android::ScopedJavaLocalRef;
+using base::android::ToJavaArrayOfStrings;
+
+using namespace adblock;
+
+FilteringConfigurationAndroid::FilteringConfigurationAndroid(
+    JNIEnv* env,
+    const JavaParamRef<jobject>& jcontroller,
+    const std::string& configuration_name,
+    SubscriptionService* subscription_service,
+    PrefService* pref_service)
+    : subscription_service_(subscription_service),
+      pref_service_(pref_service),
+      java_weak_controller_(env, jcontroller.obj()) {
+  subscription_service_->AddObserver(this);
+  auto* existing_configuration =
+      subscription_service_->GetFilteringConfiguration(configuration_name);
+  if (existing_configuration) {
+    filtering_configuration_ptr = existing_configuration;
+  } else {
+    auto new_filtering_configuration =
+        std::make_unique<PersistentFilteringConfiguration>(pref_service_,
+                                                           configuration_name);
+    filtering_configuration_ptr = new_filtering_configuration.get();
+    subscription_service_->InstallFilteringConfiguration(
+        std::move(new_filtering_configuration));
+  }
+  filtering_configuration_ptr->AddObserver(this);
+}
+
+FilteringConfigurationAndroid::~FilteringConfigurationAndroid() {
+  filtering_configuration_ptr->RemoveObserver(this);
+  subscription_service_->UninstallFilteringConfiguration(
+      filtering_configuration_ptr->GetName());
+  subscription_service_->RemoveObserver(this);
+}
+
+void FilteringConfigurationAndroid::Destroy(JNIEnv*) {
+  delete this;
+}
+
+void FilteringConfigurationAndroid::OnEnabledStateChanged(
+    FilteringConfiguration* config) {
+  Notify(config, Java_FilteringConfiguration_enabledStateChanged);
+}
+
+void FilteringConfigurationAndroid::OnFilterListsChanged(
+    FilteringConfiguration* config) {
+  Notify(config, Java_FilteringConfiguration_filterListsChanged);
+}
+
+void FilteringConfigurationAndroid::OnAllowedDomainsChanged(
+    FilteringConfiguration* config) {
+  Notify(config, Java_FilteringConfiguration_allowedDomainsChanged);
+}
+
+void FilteringConfigurationAndroid::OnCustomFiltersChanged(
+    FilteringConfiguration* config) {
+  Notify(config, Java_FilteringConfiguration_customFiltersChanged);
+}
+
+void FilteringConfigurationAndroid::Notify(
+    FilteringConfiguration* config,
+    FilteringConfigurationAndroid::JavaEventListener event_listener_function) {
+  JNIEnv* env = AttachCurrentThread();
+  auto java_controller = java_weak_controller_.get(env);
+  if (!java_controller.is_null()) {
+    event_listener_function(env, java_controller);
+  }
+}
+
+void FilteringConfigurationAndroid::OnSubscriptionInstalled(const GURL& url) {
+  DCHECK_CALLED_ON_VALID_SEQUENCE(sequence_checker_);
+  JNIEnv* env = AttachCurrentThread();
+  ScopedJavaLocalRef<jstring> j_url = ConvertUTF8ToJavaString(env, url.spec());
+  auto java_controller = java_weak_controller_.get(env);
+  if (!java_controller.is_null()) {
+    Java_FilteringConfiguration_onSubscriptionUpdated(env, java_controller,
+                                                      j_url);
+  }
+}
+
+jboolean FilteringConfigurationAndroid::IsEnabled(JNIEnv* env) const {
+  return filtering_configuration_ptr->IsEnabled() ? JNI_TRUE : JNI_FALSE;
+}
+
+void FilteringConfigurationAndroid::SetEnabled(JNIEnv* env,
+                                               jboolean j_enabled) {
+  filtering_configuration_ptr->SetEnabled(j_enabled == JNI_TRUE);
+}
+
+void FilteringConfigurationAndroid::AddAllowedDomain(
+    JNIEnv* env,
+    const JavaParamRef<jstring>& allowed_domain) {
+  filtering_configuration_ptr->AddAllowedDomain(
+      ConvertJavaStringToUTF8(allowed_domain));
+}
+
+void FilteringConfigurationAndroid::RemoveAllowedDomain(
+    JNIEnv* env,
+    const JavaParamRef<jstring>& allowed_domain) {
+  filtering_configuration_ptr->RemoveAllowedDomain(
+      ConvertJavaStringToUTF8(allowed_domain));
+}
+
+ScopedJavaLocalRef<jobjectArray>
+FilteringConfigurationAndroid::GetAllowedDomains(JNIEnv* env) const {
+  return ToJavaArrayOfStrings(env,
+                              filtering_configuration_ptr->GetAllowedDomains());
+}
+
+void FilteringConfigurationAndroid::AddCustomFilter(
+    JNIEnv* env,
+    const JavaParamRef<jstring>& custom_filter) {
+  filtering_configuration_ptr->AddCustomFilter(
+      ConvertJavaStringToUTF8(custom_filter));
+}
+
+void FilteringConfigurationAndroid::RemoveCustomFilter(
+    JNIEnv* env,
+    const JavaParamRef<jstring>& custom_filter) {
+  filtering_configuration_ptr->RemoveCustomFilter(
+      ConvertJavaStringToUTF8(custom_filter));
+}
+
+ScopedJavaLocalRef<jobjectArray>
+FilteringConfigurationAndroid::GetCustomFilters(JNIEnv* env) const {
+  return ToJavaArrayOfStrings(env,
+                              filtering_configuration_ptr->GetCustomFilters());
+}
+
+void FilteringConfigurationAndroid::AddFilterList(
+    JNIEnv* env,
+    const JavaParamRef<jstring>& url) {
+  filtering_configuration_ptr->AddFilterList(
+      GURL{ConvertJavaStringToUTF8(url)});
+}
+
+void FilteringConfigurationAndroid::RemoveFilterList(
+    JNIEnv* env,
+    const JavaParamRef<jstring>& url) {
+  filtering_configuration_ptr->RemoveFilterList(
+      GURL{ConvertJavaStringToUTF8(url)});
+}
+
+ScopedJavaLocalRef<jobjectArray> FilteringConfigurationAndroid::GetFilterLists(
+    JNIEnv* env) const {
+  // For simplicity, convert GURL to std::string, pass to Java, and convert
+  // from String to URL. Strings are easier to pass through JNI.
+  std::vector<std::string> urls;
+  base::ranges::transform(filtering_configuration_ptr->GetFilterLists(),
+                          std::back_inserter(urls), &GURL::spec);
+  return ToJavaArrayOfStrings(env, urls);
+}
+
+static ScopedJavaLocalRef<jstring>
+JNI_FilteringConfiguration_GetAcceptableAdsUrl(JNIEnv* env) {
+  return ConvertUTF8ToJavaString(env, adblock::AcceptableAdsUrl().spec());
+}
+
+static jlong JNI_FilteringConfiguration_Create(
+    JNIEnv* env,
+    const JavaParamRef<jobject>& jcontroller,
+    const JavaParamRef<jstring>& jstring,
+    const JavaParamRef<jobject>& jbrowser_context_handle) {
+  DCHECK(!jcontroller.is_null());
+  DCHECK(!jbrowser_context_handle.is_null());
+  auto* context =
+      content::BrowserContextFromJavaHandle(jbrowser_context_handle);
+  return reinterpret_cast<jlong>(new FilteringConfigurationAndroid(
+      env, std::move(jcontroller), ConvertJavaStringToUTF8(jstring),
+      adblock::SubscriptionServiceFactory::GetForBrowserContext(context),
+      user_prefs::UserPrefs::Get(context)));
+}
+
+static ScopedJavaLocalRef<jobjectArray>
+JNI_FilteringConfiguration_GetConfigurations(
+    JNIEnv* env,
+    const JavaParamRef<jobject>& jbrowser_context_handle) {
+  std::vector<std::string> configurations;
+  base::ranges::transform(
+      adblock::SubscriptionServiceFactory::GetForBrowserContext(
+          content::BrowserContextFromJavaHandle(jbrowser_context_handle))
+          ->GetInstalledFilteringConfigurations(),
+      std::back_inserter(configurations),
+      [](adblock::FilteringConfiguration* fc) { return fc->GetName(); });
+  return ToJavaArrayOfStrings(env, configurations);
+}
diff --git a/components/adblock/android/filtering_configuration_android.h b/components/adblock/android/filtering_configuration_android.h
new file mode 100644
index 0000000000..b9a5991e4c
--- /dev/null
+++ b/components/adblock/android/filtering_configuration_android.h
@@ -0,0 +1,94 @@
+/*
+ * This file is part of eyeo Chromium SDK,
+ * Copyright (C) 2006-present eyeo GmbH
+ *
+ * eyeo Chromium SDK is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 3 as
+ * published by the Free Software Foundation.
+ *
+ * eyeo Chromium SDK is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with eyeo Chromium SDK.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+#ifndef COMPONENTS_ADBLOCK_ANDROID_FILTERING_CONFIGURATION_ANDROID_H_
+#define COMPONENTS_ADBLOCK_ANDROID_FILTERING_CONFIGURATION_ANDROID_H_
+
+#include <map>
+#include <utility>
+#include <vector>
+#include "base/android/jni_weak_ref.h"
+#include "base/memory/raw_ptr.h"
+#include "base/sequence_checker.h"
+#include "components/adblock/core/configuration/filtering_configuration.h"
+#include "components/adblock/core/subscription/subscription_service.h"
+#include "components/keyed_service/core/keyed_service.h"
+#include "components/prefs/pref_service.h"
+
+class FilteringConfigurationAndroid
+    : public adblock::FilteringConfiguration::Observer,
+      public adblock::SubscriptionService::SubscriptionObserver {
+ public:
+  explicit FilteringConfigurationAndroid(
+      JNIEnv* env,
+      const base::android::JavaParamRef<jobject>& jcontroller,
+      const std::string& configuration_name,
+      adblock::SubscriptionService* subscription_service,
+      PrefService* pref_service);
+  ~FilteringConfigurationAndroid() override;
+  // Called by Java to destroy this instance.
+  void Destroy(JNIEnv*);
+  void SetEnabled(JNIEnv* env, jboolean j_enabled);
+  jboolean IsEnabled(JNIEnv* env) const;
+  void AddFilterList(JNIEnv* env,
+                     const base::android::JavaParamRef<jstring>& url);
+  void RemoveFilterList(JNIEnv* env,
+                        const base::android::JavaParamRef<jstring>& url);
+  base::android::ScopedJavaLocalRef<jobjectArray> GetFilterLists(
+      JNIEnv* env) const;
+  void AddAllowedDomain(JNIEnv* env,
+                        const base::android::JavaParamRef<jstring>& domain);
+  void RemoveAllowedDomain(JNIEnv* env,
+                           const base::android::JavaParamRef<jstring>& domain);
+  base::android::ScopedJavaLocalRef<jobjectArray> GetAllowedDomains(
+      JNIEnv* env) const;
+  void AddCustomFilter(JNIEnv* env,
+                       const base::android::JavaParamRef<jstring>& filter);
+  void RemoveCustomFilter(JNIEnv* env,
+                          const base::android::JavaParamRef<jstring>& filter);
+  base::android::ScopedJavaLocalRef<jobjectArray> GetCustomFilters(
+      JNIEnv* env) const;
+
+  // FilteringConfiguration::Observer:
+  void OnEnabledStateChanged(adblock::FilteringConfiguration* config) override;
+  void OnFilterListsChanged(adblock::FilteringConfiguration* config) override;
+  void OnAllowedDomainsChanged(
+      adblock::FilteringConfiguration* config) override;
+  void OnCustomFiltersChanged(adblock::FilteringConfiguration* config) override;
+
+  // SubcriptionService::Observer:
+  void OnSubscriptionInstalled(const GURL& subscription_url) override;
+
+ private:
+  using JavaEventListener = void(JNIEnv* env,
+                                 const base::android::JavaRef<jobject>& obj);
+  void Notify(adblock::FilteringConfiguration* config,
+              JavaEventListener event_listener_function);
+  SEQUENCE_CHECKER(sequence_checker_);
+  raw_ptr<adblock::SubscriptionService> subscription_service_;
+  raw_ptr<PrefService> pref_service_;
+  raw_ptr<adblock::FilteringConfiguration> filtering_configuration_ptr;
+
+  // Direct reference to FilteringConfiguration java class. Kept for as
+  // long as this instance of FilteringConfigurationAndroid lives:
+  // until corresponding Profile gets destroyed. Destruction of Profile triggers
+  // destruction of both C++ FilteringConfigurationAndroid and Java
+  // FilteringConfiguration objects.
+  const JavaObjectWeakGlobalRef java_weak_controller_;
+};
+
+#endif  // COMPONENTS_ADBLOCK_ANDROID_FILTERING_CONFIGURATION_ANDROID_H_
diff --git a/components/adblock/android/java/src/org/chromium/components/adblock/AdblockController.java b/components/adblock/android/java/src/org/chromium/components/adblock/AdblockController.java
new file mode 100644
index 0000000000..b79c4da9aa
--- /dev/null
+++ b/components/adblock/android/java/src/org/chromium/components/adblock/AdblockController.java
@@ -0,0 +1,259 @@
+/*
+ * This file is part of eyeo Chromium SDK,
+ * Copyright (C) 2006-present eyeo GmbH
+ *
+ * eyeo Chromium SDK is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 3 as
+ * published by the Free Software Foundation.
+ *
+ * eyeo Chromium SDK is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with eyeo Chromium SDK.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+package org.chromium.components.adblock;
+
+import androidx.annotation.UiThread;
+
+import org.jni_zero.CalledByNative;
+import org.jni_zero.NativeMethods;
+
+import org.chromium.base.ThreadUtils;
+import org.chromium.base.library_loader.LibraryLoader;
+import org.chromium.content_public.browser.BrowserContextHandle;
+
+import java.net.URL;
+import java.util.Arrays;
+import java.util.List;
+
+/**
+ * DEPRECATED, please use {@link FilteringConfiguration} instead.
+ *
+ * @brief Main access point for java UI code to control ad filtering. It calls its native counter
+ *     part also AdblockController. It lives in UI thread on the browser process.
+ */
+@Deprecated
+public final class AdblockController {
+    private static final String TAG = AdblockController.class.getSimpleName();
+    private ResourceClassificationNotifier mResourceClassificationNotifier;
+    private FilteringConfiguration mFilteringConfiguration;
+    private BrowserContextHandle mBrowserContextHandle;
+
+    private URL mAcceptableAds;
+
+    private static AdblockController sInstance;
+
+    private AdblockController(BrowserContextHandle contextHandle) {
+        mBrowserContextHandle = contextHandle;
+        mResourceClassificationNotifier =
+                ResourceClassificationNotifier.getInstance(mBrowserContextHandle);
+        mFilteringConfiguration =
+                FilteringConfiguration.createConfiguration("adblock", mBrowserContextHandle);
+        try {
+            mAcceptableAds =
+                    new URL("https://easylist-downloads.adblockplus.org/exceptionrules.txt");
+        } catch (java.net.MalformedURLException e) {
+            mAcceptableAds = null;
+        }
+    }
+
+    /**
+     * @return The singleton object.
+     */
+    public static AdblockController getInstance(BrowserContextHandle contextHandle) {
+        // Make sure native libraries are ready to avoid org.chromium.base.JniException
+        LibraryLoader.getInstance().ensureInitialized();
+        ThreadUtils.assertOnUiThread();
+        if (sInstance == null) {
+            sInstance = new AdblockController(contextHandle);
+        }
+        return sInstance;
+    }
+
+    public static class Subscription {
+        private URL mUrl;
+        private String mTitle;
+        private String mVersion = "";
+        private String[] mLanguages = {};
+
+        public Subscription(final URL url, final String title, final String version) {
+            this.mUrl = url;
+            this.mTitle = title;
+            this.mVersion = version;
+        }
+
+        @CalledByNative("Subscription")
+        public Subscription(
+                final URL url, final String title, final String version, final String[] languages) {
+            this.mUrl = url;
+            this.mTitle = title;
+            this.mVersion = version;
+            this.mLanguages = languages;
+        }
+
+        public String title() {
+            return mTitle;
+        }
+
+        public URL url() {
+            return mUrl;
+        }
+
+        public String version() {
+            return mVersion;
+        }
+
+        public String[] languages() {
+            return mLanguages;
+        }
+
+        @Override
+        public boolean equals(final Object object) {
+            if (object == null) return false;
+            if (getClass() != object.getClass()) return false;
+
+            Subscription other = (Subscription) object;
+            return url().equals(other.url());
+        }
+    }
+
+    @UiThread
+    public void setAcceptableAdsEnabled(boolean enabled) {
+        if (enabled) mFilteringConfiguration.addFilterList(mAcceptableAds);
+        else mFilteringConfiguration.removeFilterList(mAcceptableAds);
+    }
+
+    @UiThread
+    public boolean isAcceptableAdsEnabled() {
+        return mFilteringConfiguration.getFilterLists().contains(mAcceptableAds);
+    }
+
+    @UiThread
+    public List<Subscription> getRecommendedSubscriptions() {
+        return (List<Subscription>)
+                (List<?>) Arrays.asList(AdblockControllerJni.get().getRecommendedSubscriptions());
+    }
+
+    @UiThread
+    public void installSubscription(final URL url) {
+        mFilteringConfiguration.addFilterList(url);
+    }
+
+    @UiThread
+    public void uninstallSubscription(final URL url) {
+        mFilteringConfiguration.removeFilterList(url);
+    }
+
+    @UiThread
+    public List<Subscription> getInstalledSubscriptions() {
+        return (List<Subscription>)
+                (List<?>)
+                        Arrays.asList(
+                                AdblockControllerJni.get()
+                                        .getInstalledSubscriptions(mBrowserContextHandle));
+    }
+
+    /**
+     * @throws IllegalStateException when called on removed FilteringConfiguration.
+     */
+    @UiThread
+    public void setEnabled(boolean enabled) throws IllegalStateException {
+        mFilteringConfiguration.setEnabled(enabled);
+    }
+
+    /**
+     * @throws IllegalStateException when called on removed FilteringConfiguration.
+     */
+    @UiThread
+    public boolean isEnabled() throws IllegalStateException {
+        return mFilteringConfiguration.isEnabled();
+    }
+
+    /**
+     * @throws IllegalStateException when called on removed FilteringConfiguration.
+     */
+    @UiThread
+    public void removeFilterList(final URL url) throws IllegalStateException {
+        mFilteringConfiguration.removeFilterList(url);
+    }
+
+    /**
+     * @throws IllegalStateException when called on removed FilteringConfiguration.
+     */
+    @UiThread
+    public List<URL> getFilterLists() throws IllegalStateException {
+        return mFilteringConfiguration.getFilterLists();
+    }
+
+    /**
+     * @throws IllegalStateException when called on removed FilteringConfiguration.
+     */
+    @UiThread
+    public void addAllowedDomain(final String domain) throws IllegalStateException {
+        mFilteringConfiguration.addAllowedDomain(domain);
+    }
+
+    /**
+     * @throws IllegalStateException when called on removed FilteringConfiguration.
+     */
+    @UiThread
+    public void removeAllowedDomain(final String domain) throws IllegalStateException {
+        mFilteringConfiguration.removeAllowedDomain(domain);
+    }
+
+    /**
+     * @throws IllegalStateException when called on removed FilteringConfiguration.
+     */
+    @UiThread
+    public List<String> getAllowedDomains() throws IllegalStateException {
+        return mFilteringConfiguration.getAllowedDomains();
+    }
+
+    /**
+     * @throws IllegalStateException when called on removed FilteringConfiguration.
+     */
+    @UiThread
+    public void addCustomFilter(final String filter) throws IllegalStateException {
+        mFilteringConfiguration.addCustomFilter(filter);
+    }
+
+    /**
+     * @throws IllegalStateException when called on removed FilteringConfiguration.
+     */
+    @UiThread
+    public void removeCustomFilter(final String filter) throws IllegalStateException {
+        mFilteringConfiguration.removeCustomFilter(filter);
+    }
+
+    /**
+     * @throws IllegalStateException when called on removed FilteringConfiguration.
+     */
+    @UiThread
+    public List<String> getCustomFilters() throws IllegalStateException {
+        return mFilteringConfiguration.getCustomFilters();
+    }
+
+    public interface SubscriptionUpdateObserver
+            extends FilteringConfiguration.SubscriptionUpdateObserver {}
+
+    @UiThread
+    public void addSubscriptionUpdateObserver(final SubscriptionUpdateObserver observer) {
+        mFilteringConfiguration.addSubscriptionUpdateObserver(observer);
+    }
+
+    @UiThread
+    public void removeSubscriptionUpdateObserver(final SubscriptionUpdateObserver observer) {
+        mFilteringConfiguration.removeSubscriptionUpdateObserver(observer);
+    }
+
+    @NativeMethods
+    interface Natives {
+        Object[] getInstalledSubscriptions(BrowserContextHandle contextHandle);
+
+        Object[] getRecommendedSubscriptions();
+    }
+}
diff --git a/components/adblock/android/java/src/org/chromium/components/adblock/ContentType.java b/components/adblock/android/java/src/org/chromium/components/adblock/ContentType.java
new file mode 100644
index 0000000000..9117f76e88
--- /dev/null
+++ b/components/adblock/android/java/src/org/chromium/components/adblock/ContentType.java
@@ -0,0 +1,61 @@
+/*
+ * This file is part of eyeo Chromium SDK,
+ * Copyright (C) 2006-present eyeo GmbH
+ *
+ * eyeo Chromium SDK is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 3 as
+ * published by the Free Software Foundation.
+ *
+ * eyeo Chromium SDK is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with eyeo Chromium SDK.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+package org.chromium.components.adblock;
+
+import java.util.HashMap;
+import java.util.Map;
+
+public enum ContentType {
+    // Note. This has to be kept in sync with c++ enum so some values
+    // are skipped
+    CONTENT_TYPE_OTHER(1 << 0),
+    CONTENT_TYPE_SCRIPT(1 << 1),
+    CONTENT_TYPE_IMAGE(1 << 2),
+    CONTENT_TYPE_STYLESHEET(1 << 3),
+    CONTENT_TYPE_OBJECT(1 << 4),
+    CONTENT_TYPE_SUBDOCUMENT(1 << 5),
+    CONTENT_TYPE_WEBSOCKET(1 << 7),
+    CONTENT_TYPE_WEBRTC(1 << 8),
+    CONTENT_TYPE_PING(1 << 10),
+    CONTENT_TYPE_XMLHTTPREQUEST(1 << 11),
+    CONTENT_TYPE_MEDIA(1 << 14),
+    CONTENT_TYPE_FONT(1 << 15);
+
+    private final int contentType;
+
+    private ContentType(int contentType) {
+        this.contentType = contentType;
+    }
+
+    private static final Map<Integer, ContentType> intToContentTypeMap =
+            new HashMap<Integer, ContentType>();
+
+    static {
+        for (ContentType type : ContentType.values()) {
+            intToContentTypeMap.put(type.contentType, type);
+        }
+    }
+
+    public static ContentType fromInt(int i) {
+        return intToContentTypeMap.get(i);
+    }
+
+    public int getValue() {
+        return contentType;
+    }
+}
diff --git a/components/adblock/android/java/src/org/chromium/components/adblock/FilteringConfiguration.java b/components/adblock/android/java/src/org/chromium/components/adblock/FilteringConfiguration.java
new file mode 100644
index 0000000000..4174d3c626
--- /dev/null
+++ b/components/adblock/android/java/src/org/chromium/components/adblock/FilteringConfiguration.java
@@ -0,0 +1,409 @@
+/*
+ * This file is part of eyeo Chromium SDK,
+ * Copyright (C) 2006-present eyeo GmbH
+ *
+ * eyeo Chromium SDK is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 3 as
+ * published by the Free Software Foundation.
+ *
+ * eyeo Chromium SDK is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with eyeo Chromium SDK.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+package org.chromium.components.adblock;
+
+import android.util.Log;
+import android.webkit.URLUtil;
+
+import androidx.annotation.UiThread;
+
+import org.jni_zero.CalledByNative;
+import org.jni_zero.NativeMethods;
+
+import org.chromium.base.ThreadUtils;
+import org.chromium.base.library_loader.LibraryLoader;
+import org.chromium.content_public.browser.BrowserContextHandle;
+
+import java.net.MalformedURLException;
+import java.net.URL;
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.Collections;
+import java.util.Comparator;
+import java.util.HashSet;
+import java.util.List;
+import java.util.Set;
+
+/**
+ * @brief Represents an independent configuration of filters, filter lists, allowed domains and
+ *     other settings that influence resource filtering and content blocking. Multiple Filtering
+ *     Configurations can co-exist and be controlled separately. A network resource is blocked if
+ *     any enabled Filtering Configuration determines it should be, through its filters. Elements on
+ *     websites are hidden according to a superset of element-hiding selectors from all enabled
+ *     Filtering Configurations. Lives on UI thread, not thread-safe.
+ */
+public final class FilteringConfiguration {
+    private static final String TAG = FilteringConfiguration.class.getSimpleName();
+    private static final Set<FilteringConfiguration> mConfigurations = new HashSet<>();
+
+    private final Set<ConfigurationChangeObserver> mConfigurationChangeObservers = new HashSet<>();
+    private final Set<SubscriptionUpdateObserver> mSubscriptionUpdateObservers = new HashSet<>();
+    private String mName;
+    private long mNativeController;
+
+    private FilteringConfiguration(
+            final String configuration_name, BrowserContextHandle browserContextHandle) {
+        // Make sure native libraries are ready to avoid org.chromium.base.JniException
+        LibraryLoader.getInstance().ensureInitialized();
+
+        mName = configuration_name;
+        mNativeController =
+                FilteringConfigurationJni.get()
+                        .create(this, configuration_name, browserContextHandle);
+    }
+
+    private void DestroyNative() {
+        FilteringConfigurationJni.get().destroy(mNativeController);
+        mNativeController = 0;
+    }
+
+    private void ValidateConfiguration() throws IllegalStateException {
+        if (mNativeController == 0) {
+            throw new IllegalStateException("Configuration does not exist!");
+        }
+    }
+
+    public interface ConfigurationChangeObserver {
+        /** Triggered when the FilteringConfiguration becomes disabled or enabled. */
+        @UiThread
+        void onEnabledStateChanged();
+
+        /** Triggered when the collection of installed filter lists changes. */
+        @UiThread
+        void onFilterListsChanged();
+
+        /** Triggered when the set of allowed domain changes. */
+        @UiThread
+        void onAllowedDomainsChanged();
+
+        /** Triggered when the set of custom filters changes. */
+        @UiThread
+        void onCustomFiltersChanged();
+    }
+
+    public interface SubscriptionUpdateObserver {
+        @UiThread
+        void onSubscriptionDownloaded(final URL url);
+    }
+
+    @UiThread
+    public void addObserver(final ConfigurationChangeObserver observer) {
+        mConfigurationChangeObservers.add(observer);
+    }
+
+    @UiThread
+    public void removeObserver(final ConfigurationChangeObserver observer) {
+        mConfigurationChangeObservers.remove(observer);
+    }
+
+    @UiThread
+    public void addSubscriptionUpdateObserver(final SubscriptionUpdateObserver observer) {
+        mSubscriptionUpdateObservers.add(observer);
+    }
+
+    @UiThread
+    public void removeSubscriptionUpdateObserver(final SubscriptionUpdateObserver observer) {
+        mSubscriptionUpdateObservers.remove(observer);
+    }
+
+    /**
+     * @throws IllegalStateException when called on removed FilteringConfiguration.
+     */
+    @UiThread
+    public void setEnabled(boolean enabled) throws IllegalStateException {
+        ValidateConfiguration();
+        FilteringConfigurationJni.get().setEnabled(mNativeController, enabled);
+    }
+
+    /**
+     * @throws IllegalStateException when called on removed FilteringConfiguration.
+     */
+    @UiThread
+    public boolean isEnabled() throws IllegalStateException {
+        ValidateConfiguration();
+        return FilteringConfigurationJni.get().isEnabled(mNativeController);
+    }
+
+    /**
+     * @throws IllegalStateException when called on removed FilteringConfiguration.
+     */
+    @UiThread
+    public void addFilterList(final URL url) throws IllegalStateException {
+        ValidateConfiguration();
+        FilteringConfigurationJni.get().addFilterList(mNativeController, url.toString());
+    }
+
+    /**
+     * @throws IllegalStateException when called on removed FilteringConfiguration.
+     */
+    @UiThread
+    public void removeFilterList(final URL url) throws IllegalStateException {
+        ValidateConfiguration();
+        FilteringConfigurationJni.get().removeFilterList(mNativeController, url.toString());
+    }
+
+    /**
+     * @throws IllegalStateException when called on removed FilteringConfiguration.
+     */
+    @UiThread
+    public List<URL> getFilterLists() throws IllegalStateException {
+        ValidateConfiguration();
+        List<String> filterListsStr =
+                Arrays.asList(FilteringConfigurationJni.get().getFilterLists(mNativeController));
+        List<URL> filterLists = new ArrayList<URL>();
+        for (String url : filterListsStr) {
+            try {
+                filterLists.add(new URL(url));
+            } catch (MalformedURLException e) {
+                Log.e(TAG, "Received invalid subscription URL from C++: " + url);
+            }
+        }
+        return filterLists;
+    }
+
+    @UiThread
+    public String getAcceptableAdsUrl() {
+        ValidateConfiguration();
+        return FilteringConfigurationJni.get().getAcceptableAdsUrl();
+    }
+
+    /**
+     * @throws IllegalStateException when called on removed FilteringConfiguration.
+     */
+    @UiThread
+    public void addAllowedDomain(final String domain) throws IllegalStateException {
+        ValidateConfiguration();
+        String sanitizedDomain = sanitizeSite(domain);
+        if (sanitizedDomain == null) return;
+        FilteringConfigurationJni.get().addAllowedDomain(mNativeController, sanitizedDomain);
+    }
+
+    /**
+     * @throws IllegalStateException when called on removed FilteringConfiguration.
+     */
+    @UiThread
+    public void removeAllowedDomain(final String domain) throws IllegalStateException {
+        ValidateConfiguration();
+        String sanitizedDomain = sanitizeSite(domain);
+        if (sanitizedDomain == null) return;
+        FilteringConfigurationJni.get().removeAllowedDomain(mNativeController, sanitizedDomain);
+    }
+
+    /**
+     * @throws IllegalStateException when called on removed FilteringConfiguration.
+     */
+    @UiThread
+    public List<String> getAllowedDomains() throws IllegalStateException {
+        ValidateConfiguration();
+        List<String> allowedDomains =
+                Arrays.asList(FilteringConfigurationJni.get().getAllowedDomains(mNativeController));
+        Collections.sort(allowedDomains);
+        return allowedDomains;
+    }
+
+    /**
+     * @throws IllegalStateException when called on removed FilteringConfiguration.
+     */
+    @UiThread
+    public void addCustomFilter(final String filter) throws IllegalStateException {
+        ValidateConfiguration();
+        FilteringConfigurationJni.get().addCustomFilter(mNativeController, filter);
+    }
+
+    /**
+     * @throws IllegalStateException when called on removed FilteringConfiguration.
+     */
+    @UiThread
+    public void removeCustomFilter(final String filter) throws IllegalStateException {
+        ValidateConfiguration();
+        FilteringConfigurationJni.get().removeCustomFilter(mNativeController, filter);
+    }
+
+    /**
+     * @throws IllegalStateException when called on removed FilteringConfiguration.
+     */
+    @UiThread
+    public List<String> getCustomFilters() throws IllegalStateException {
+        ValidateConfiguration();
+        return Arrays.asList(FilteringConfigurationJni.get().getCustomFilters(mNativeController));
+    }
+
+    @UiThread
+    public static FilteringConfiguration createConfiguration(
+            final String configuration_name, BrowserContextHandle browserContextHandle) {
+        FilteringConfiguration configuration = findConfigurationByName(configuration_name);
+        if (configuration == null) {
+            configuration = new FilteringConfiguration(configuration_name, browserContextHandle);
+            mConfigurations.add(configuration);
+        }
+        return configuration;
+    }
+
+    @UiThread
+    public static void removeConfiguration(
+            final String configuration_name, BrowserContextHandle browserContextHandle) {
+        // sync with native filtering configurations
+        getConfigurations(browserContextHandle);
+        final FilteringConfiguration configuration = findConfigurationByName(configuration_name);
+        if (configuration != null) {
+            configuration.DestroyNative();
+            mConfigurations.remove(configuration);
+        }
+    }
+
+    @UiThread
+    public static List<FilteringConfiguration> getConfigurations(
+            BrowserContextHandle browserContextHandle) {
+        // Get all existing (on C++ side) configurations, if there is no matching Java
+        // instance present in mConfigurations set then create one and add.
+        final String[] existing_configurations_names =
+                FilteringConfigurationJni.get().getConfigurations(browserContextHandle);
+        final List<FilteringConfiguration> configurations_to_return =
+                new ArrayList<FilteringConfiguration>();
+        // If mConfigurations contains configurations which are not present on the list returned
+        // from FilteringConfigurationJni.get().getConfigurations() then we need to remove them
+        // as it means that a configuration has been removed on native side (not via Java API).
+        mConfigurations.removeIf(
+                filteringConfiguration -> {
+                    return !Arrays.asList(existing_configurations_names)
+                            .contains(filteringConfiguration.mName);
+                });
+        for (final String configuration_name : existing_configurations_names) {
+            FilteringConfiguration configuration = findConfigurationByName(configuration_name);
+            if (configuration == null) {
+                configuration =
+                        new FilteringConfiguration(configuration_name, browserContextHandle);
+                mConfigurations.add(configuration);
+            }
+            configurations_to_return.add((FilteringConfiguration) configuration);
+        }
+        Collections.sort(
+                configurations_to_return,
+                new Comparator<FilteringConfiguration>() {
+                    @Override
+                    public int compare(
+                            final FilteringConfiguration object1,
+                            final FilteringConfiguration object2) {
+                        return object1.mName.compareTo(object2.mName);
+                    }
+                });
+        return configurations_to_return;
+    }
+
+    @UiThread
+    private static FilteringConfiguration findConfigurationByName(final String configuration_name) {
+        for (final FilteringConfiguration configuration : mConfigurations) {
+            if (configuration.mName.equals(configuration_name)) {
+                return configuration;
+            }
+        }
+        return null;
+    }
+
+    private String sanitizeSite(String site) {
+        // |site| is raw user input. We expect it to be either a domain or a URL.
+        try {
+            URL candidate = new URL(URLUtil.guessUrl(site));
+            return candidate.getHost();
+        } catch (java.net.MalformedURLException e) {
+        }
+        // Could not parse |site| as URL or domain.
+        return null;
+    }
+
+    @CalledByNative
+    private void enabledStateChanged() {
+        ThreadUtils.assertOnUiThread();
+        for (final ConfigurationChangeObserver observer : mConfigurationChangeObservers) {
+            observer.onEnabledStateChanged();
+        }
+    }
+
+    @CalledByNative
+    private void filterListsChanged() {
+        ThreadUtils.assertOnUiThread();
+        for (final ConfigurationChangeObserver observer : mConfigurationChangeObservers) {
+            observer.onFilterListsChanged();
+        }
+    }
+
+    @CalledByNative
+    private void allowedDomainsChanged() {
+        ThreadUtils.assertOnUiThread();
+        for (final ConfigurationChangeObserver observer : mConfigurationChangeObservers) {
+            observer.onAllowedDomainsChanged();
+        }
+    }
+
+    @CalledByNative
+    private void customFiltersChanged() {
+        ThreadUtils.assertOnUiThread();
+        for (final ConfigurationChangeObserver observer : mConfigurationChangeObservers) {
+            observer.onCustomFiltersChanged();
+        }
+    }
+
+    @CalledByNative
+    private void onSubscriptionUpdated(final String url) {
+        ThreadUtils.assertOnUiThread();
+        try {
+            URL subscriptionUrl = new URL(URLUtil.guessUrl(url));
+            for (final SubscriptionUpdateObserver observer : mSubscriptionUpdateObservers) {
+                observer.onSubscriptionDownloaded(subscriptionUrl);
+            }
+        } catch (MalformedURLException e) {
+            Log.e(TAG, "Error parsing subscription url: " + url);
+        }
+    }
+
+    @NativeMethods
+    interface Natives {
+        void destroy(long nativeFilteringConfigurationAndroid);
+
+        void setEnabled(long nativeFilteringConfigurationAndroid, boolean enabled);
+
+        boolean isEnabled(long nativeFilteringConfigurationAndroid);
+
+        void addAllowedDomain(long nativeFilteringConfigurationAndroid, String domain);
+
+        void removeAllowedDomain(long nativeFilteringConfigurationAndroid, String domain);
+
+        String[] getAllowedDomains(long nativeFilteringConfigurationAndroid);
+
+        void addCustomFilter(long nativeFilteringConfigurationAndroid, String filter);
+
+        void removeCustomFilter(long nativeFilteringConfigurationAndroid, String filter);
+
+        String[] getCustomFilters(long nativeFilteringConfigurationAndroid);
+
+        void addFilterList(long nativeFilteringConfigurationAndroid, String url);
+
+        void removeFilterList(long nativeFilteringConfigurationAndroid, String url);
+
+        String[] getFilterLists(long nativeFilteringConfigurationAndroid);
+
+        long create(
+                FilteringConfiguration controller,
+                final String configuration_name,
+                BrowserContextHandle contextHandle);
+
+        String[] getConfigurations(BrowserContextHandle contextHandle);
+
+        String getAcceptableAdsUrl();
+    }
+}
diff --git a/components/adblock/android/java/src/org/chromium/components/adblock/ResourceClassificationNotifier.java b/components/adblock/android/java/src/org/chromium/components/adblock/ResourceClassificationNotifier.java
new file mode 100644
index 0000000000..1dda611ca2
--- /dev/null
+++ b/components/adblock/android/java/src/org/chromium/components/adblock/ResourceClassificationNotifier.java
@@ -0,0 +1,233 @@
+/*
+ * This file is part of eyeo Chromium SDK,
+ * Copyright (C) 2006-present eyeo GmbH
+ *
+ * eyeo Chromium SDK is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 3 as
+ * published by the Free Software Foundation.
+ *
+ * eyeo Chromium SDK is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with eyeo Chromium SDK.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+package org.chromium.components.adblock;
+
+import android.util.Log;
+
+import androidx.annotation.UiThread;
+
+import org.jni_zero.CalledByNative;
+import org.jni_zero.NativeMethods;
+
+import org.chromium.base.ThreadUtils;
+import org.chromium.base.library_loader.LibraryLoader;
+import org.chromium.content_public.browser.BrowserContextHandle;
+import org.chromium.content_public.browser.GlobalRenderFrameHostId;
+
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.HashSet;
+import java.util.List;
+import java.util.Set;
+
+public class ResourceClassificationNotifier {
+    private static final String TAG = ResourceClassificationNotifier.class.getSimpleName();
+
+    private long mNativeController;
+    private static ResourceClassificationNotifier sInstance;
+
+    private final Set<ResourceFilteringObserver> mResourceFilteringObservers = new HashSet<>();
+
+    // TODO(mpawlowski) in the future, we can consider adding filter hit
+    // notifications here as well (DPD-1233)
+
+    public interface ResourceFilteringObserver {
+        /**
+         * "Request allowed" event for a request which would be blocked but there was an
+         * allowlisting filter found.
+         *
+         * <p>It should not block the UI thread for too long.
+         *
+         * @param info contains auxiliary information about the resource.
+         */
+        @UiThread
+        void onRequestAllowed(ResourceFilteringCounters.ResourceInfo info);
+
+        /**
+         * "Request blocked" event for a request which was blocked.
+         *
+         * <p>It should not block the UI thread for too long.
+         *
+         * @param info contains auxiliary information about the resource.
+         */
+        @UiThread
+        void onRequestBlocked(ResourceFilteringCounters.ResourceInfo info);
+
+        /**
+         * "Page allowed" event for an allowlisted domain (page).
+         *
+         * <p>It should not block the UI thread for too long.
+         *
+         * @param info contains auxiliary information about the resource.
+         */
+        @UiThread
+        void onPageAllowed(ResourceFilteringCounters.ResourceInfo info);
+
+        /**
+         * "Popup allowed" event for a popup which would be blocked but there was an allowlisting
+         * filter found.
+         *
+         * <p>It should not block the UI thread for too long.
+         *
+         * @param info contains auxiliary information about the resource.
+         */
+        @UiThread
+        void onPopupAllowed(ResourceFilteringCounters.ResourceInfo info);
+
+        /**
+         * "Popup blocked" event for a popup which was blocked.
+         *
+         * <p>It should not block the UI thread for too long.
+         *
+         * @param info contains auxiliary information about the resource.
+         */
+        @UiThread
+        void onPopupBlocked(ResourceFilteringCounters.ResourceInfo info);
+    }
+
+    private ResourceClassificationNotifier(BrowserContextHandle contextHandle) {
+        mNativeController = ResourceClassificationNotifierJni.get().create(this, contextHandle);
+        assert mNativeController != 0
+                : "Failed to instantiate native ResourceClassificationNotifier";
+    }
+
+    public static ResourceClassificationNotifier getInstance(BrowserContextHandle contextHandle) {
+        // Make sure native libraries are ready to avoid org.chromium.base.JniException
+        LibraryLoader.getInstance().ensureInitialized();
+        ThreadUtils.assertOnUiThread();
+        if (sInstance == null) {
+            sInstance = new ResourceClassificationNotifier(contextHandle);
+        }
+        return sInstance;
+    }
+
+    @UiThread
+    public void addResourceFilteringObserver(final ResourceFilteringObserver observer) {
+        mResourceFilteringObservers.add(observer);
+    }
+
+    @UiThread
+    public void removeResourceFilteringObserver(final ResourceFilteringObserver observer) {
+        mResourceFilteringObservers.remove(observer);
+    }
+
+    @CalledByNative
+    private void requestMatchedCallback(
+            final String requestUrl,
+            boolean wasBlocked,
+            final String[] parentFrameUrls,
+            final String subscriptionUrl,
+            final String configurationName,
+            final int contentType,
+            final int renderProcessId,
+            final int renderFrameId) {
+        ThreadUtils.assertOnUiThread();
+        final List<String> parentsList = Arrays.asList(parentFrameUrls);
+        final ResourceFilteringCounters.ResourceInfo resourceInfo =
+                new ResourceFilteringCounters.ResourceInfo(
+                        requestUrl,
+                        parentsList,
+                        subscriptionUrl,
+                        configurationName,
+                        contentType,
+                        new GlobalRenderFrameHostId(renderProcessId, renderFrameId));
+        Log.d(
+                TAG,
+                "eyeo: requestMatchedCallback() notifies "
+                        + mResourceFilteringObservers.size()
+                        + " listeners about "
+                        + resourceInfo.toString()
+                        + (wasBlocked ? " getting blocked" : " being allowed"));
+        for (final ResourceFilteringObserver observer : mResourceFilteringObservers) {
+            if (wasBlocked) {
+                observer.onRequestBlocked(resourceInfo);
+            } else {
+                observer.onRequestAllowed(resourceInfo);
+            }
+        }
+    }
+
+    @CalledByNative
+    private void pageAllowedCallback(
+            final String requestUrl,
+            final String subscriptionUrl,
+            final String configurationName,
+            final int renderProcessId,
+            final int renderFrameId) {
+        ThreadUtils.assertOnUiThread();
+        final ResourceFilteringCounters.ResourceInfo resourceInfo =
+                new ResourceFilteringCounters.ResourceInfo(
+                        requestUrl,
+                        new ArrayList(),
+                        subscriptionUrl,
+                        configurationName,
+                        ContentType.CONTENT_TYPE_OTHER.getValue(),
+                        new GlobalRenderFrameHostId(renderProcessId, renderFrameId));
+        Log.d(
+                TAG,
+                "eyeo: pageAllowedCallback() notifies "
+                        + mResourceFilteringObservers.size()
+                        + " listeners about "
+                        + resourceInfo.toString());
+        for (final ResourceFilteringObserver observer : mResourceFilteringObservers) {
+            observer.onPageAllowed(resourceInfo);
+        }
+    }
+
+    @CalledByNative
+    private void popupMatchedCallback(
+            final String requestUrl,
+            boolean wasBlocked,
+            final String openerUrl,
+            final String subscription,
+            final String configurationName,
+            final int renderProcessId,
+            final int renderFrameId) {
+        ThreadUtils.assertOnUiThread();
+        final List<String> parentsList = Arrays.asList(openerUrl);
+        final ResourceFilteringCounters.ResourceInfo resourceInfo =
+                new ResourceFilteringCounters.ResourceInfo(
+                        requestUrl,
+                        parentsList,
+                        subscription,
+                        configurationName,
+                        ContentType.CONTENT_TYPE_OTHER.getValue(),
+                        new GlobalRenderFrameHostId(renderProcessId, renderFrameId));
+        Log.d(
+                TAG,
+                "eyeo: popupMatchedCallback() notifies "
+                        + mResourceFilteringObservers.size()
+                        + " listeners about "
+                        + resourceInfo.toString()
+                        + (wasBlocked ? " getting blocked" : " being allowed"));
+        for (final ResourceFilteringObserver observer : mResourceFilteringObservers) {
+            if (wasBlocked) {
+                observer.onPopupBlocked(resourceInfo);
+            } else {
+                observer.onPopupAllowed(resourceInfo);
+            }
+        }
+    }
+
+    @NativeMethods
+    public interface Natives {
+        // Create an instance of ResourceClassificationNotifier associated with the supplied
+        // profile.
+        long create(ResourceClassificationNotifier controller, BrowserContextHandle contextHandle);
+    }
+}
diff --git a/components/adblock/android/java/src/org/chromium/components/adblock/ResourceFilteringCounters.java b/components/adblock/android/java/src/org/chromium/components/adblock/ResourceFilteringCounters.java
new file mode 100644
index 0000000000..7a0f346287
--- /dev/null
+++ b/components/adblock/android/java/src/org/chromium/components/adblock/ResourceFilteringCounters.java
@@ -0,0 +1,111 @@
+/*
+ * This file is part of eyeo Chromium SDK,
+ * Copyright (C) 2006-present eyeo GmbH
+ *
+ * eyeo Chromium SDK is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 3 as
+ * published by the Free Software Foundation.
+ *
+ * eyeo Chromium SDK is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with eyeo Chromium SDK.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+package org.chromium.components.adblock;
+
+import org.chromium.content_public.browser.GlobalRenderFrameHostId;
+
+import java.util.List;
+
+public class ResourceFilteringCounters {
+    /** Immutable data-class containing an auxiliary information about resource event. */
+    public static class ResourceInfo {
+        // TODO: Make members private
+        final String mRequestUrl;
+        final List<String> mParentFrameUrls;
+        final String mSubscriptionUrl;
+        final String mConfigurationName;
+        final ContentType mContentType;
+        final GlobalRenderFrameHostId mMainFrameId;
+
+        ResourceInfo(
+                final String requestUrl,
+                final List<String> parentFrameUrls,
+                final String subscriptionUrl,
+                final String configurationName,
+                final int contentType,
+                final GlobalRenderFrameHostId mainFrameId) {
+            this.mRequestUrl = requestUrl;
+            this.mParentFrameUrls = parentFrameUrls;
+            this.mSubscriptionUrl = subscriptionUrl;
+            this.mConfigurationName = configurationName;
+            this.mContentType = ContentType.fromInt(contentType);
+            this.mMainFrameId = mainFrameId;
+        }
+
+        /**
+         * @return The request which was blocked or allowed.
+         */
+        public String getRequestUrl() {
+            return mRequestUrl;
+        }
+
+        /**
+         * @return The parent frames of the mRequestUrl.
+         */
+        public List<String> getParentFrameUrls() {
+            return mParentFrameUrls;
+        }
+
+        /**
+         * @return Subscription url for filter done blocking or allowing decision, empty string
+         *     otherwise.
+         */
+        public String getSubscription() {
+            return mSubscriptionUrl;
+        }
+
+        /**
+         * @return Configuration name containing subscription with matched filer for blocking or
+         *     allowing decision, empty string otherwise.
+         */
+        public String getConfigurationName() {
+            return mConfigurationName;
+        }
+
+        /**
+         * @return The resource content type. See enum ContentType in components/adblock/types.h
+         */
+        public ContentType getContentType() {
+            return mContentType;
+        }
+
+        /**
+         * @return The current tab id for the mRequestUrl. -1 means no tab id, likely tab closed
+         *     before event arrived. Numbers start from 0.
+         */
+        public GlobalRenderFrameHostId getMainFrameId() {
+            return mMainFrameId;
+        }
+
+        @Override
+        public String toString() {
+            return "mRequestUrl: "
+                    + mRequestUrl
+                    + ", mParentFrameUrls: "
+                    + mParentFrameUrls.toString()
+                    + ", mSubscriptionUrl:"
+                    + mSubscriptionUrl
+                    + ", mConfigurationName:"
+                    + mConfigurationName
+                    + ", mContentType: "
+                    + mContentType.getValue()
+                    + ", mMainFrameId: "
+                    + mMainFrameId;
+        }
+    }
+}
diff --git a/components/adblock/android/javatests/src/org/chromium/components/adblock/AdblockControllerTestBase.java b/components/adblock/android/javatests/src/org/chromium/components/adblock/AdblockControllerTestBase.java
new file mode 100644
index 0000000000..08d6718fd6
--- /dev/null
+++ b/components/adblock/android/javatests/src/org/chromium/components/adblock/AdblockControllerTestBase.java
@@ -0,0 +1,64 @@
+/*
+ * This file is part of eyeo Chromium SDK,
+ * Copyright (C) 2006-present eyeo GmbH
+ *
+ * eyeo Chromium SDK is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 3 as
+ * published by the Free Software Foundation.
+ *
+ * eyeo Chromium SDK is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with eyeo Chromium SDK.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+package org.chromium.components.adblock;
+
+import androidx.test.filters.LargeTest;
+
+import org.junit.Assert;
+import org.junit.Test;
+
+import org.chromium.base.test.util.CallbackHelper;
+import org.chromium.base.test.util.Feature;
+import org.chromium.base.test.util.IntegrationTest;
+import org.chromium.content_public.browser.test.util.TestThreadUtils;
+
+import java.util.ArrayList;
+import java.util.List;
+import java.util.concurrent.TimeUnit;
+import java.util.concurrent.TimeoutException;
+
+public abstract class AdblockControllerTestBase {
+    private final CallbackHelper mHelper = new CallbackHelper();
+    protected AdblockController mAdblockController;
+
+    @Test
+    @IntegrationTest
+    @LargeTest
+    @Feature({"adblock"})
+    public void addingAllowedDomains() throws TimeoutException {
+        final List<String> allowedDomains = new ArrayList<>();
+        TestThreadUtils.runOnUiThreadBlocking(
+                () -> {
+                    mAdblockController.addAllowedDomain("foobar.com");
+                    mAdblockController.addAllowedDomain("domain.com/path/to/page.html");
+                    mAdblockController.addAllowedDomain("domain.com/duplicate.html");
+                    mAdblockController.addAllowedDomain("https://scheme.com/path.html");
+                    mAdblockController.addAllowedDomain("gibberish");
+                    allowedDomains.addAll(mAdblockController.getAllowedDomains());
+                    mHelper.notifyCalled();
+                });
+        mHelper.waitForCallback(0, 1, 10, TimeUnit.SECONDS);
+        // We expect to see a sorted collection of domains (not URLs) without duplicates.
+        ArrayList<String> expectedAllowedDomains = new ArrayList<String>();
+        expectedAllowedDomains.add("domain.com");
+        expectedAllowedDomains.add("foobar.com");
+        expectedAllowedDomains.add("scheme.com");
+        expectedAllowedDomains.add("www.gibberish.com");
+        Assert.assertEquals(expectedAllowedDomains, allowedDomains);
+    }
+}
diff --git a/components/adblock/android/javatests/src/org/chromium/components/adblock/DefaultSettingsTestBase.java b/components/adblock/android/javatests/src/org/chromium/components/adblock/DefaultSettingsTestBase.java
new file mode 100644
index 0000000000..121b62c7ec
--- /dev/null
+++ b/components/adblock/android/javatests/src/org/chromium/components/adblock/DefaultSettingsTestBase.java
@@ -0,0 +1,72 @@
+/*
+ * This file is part of eyeo Chromium SDK,
+ * Copyright (C) 2006-present eyeo GmbH
+ *
+ * eyeo Chromium SDK is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 3 as
+ * published by the Free Software Foundation.
+ *
+ * eyeo Chromium SDK is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with eyeo Chromium SDK.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+package org.chromium.components.adblock;
+
+import org.junit.Assert;
+import org.junit.Test;
+
+import org.chromium.base.test.util.Feature;
+import org.chromium.base.test.util.IntegrationTest;
+import org.chromium.content_public.browser.BrowserContextHandle;
+import org.chromium.content_public.browser.test.util.TestThreadUtils;
+
+import java.net.MalformedURLException;
+import java.net.URL;
+import java.util.List;
+
+public abstract class DefaultSettingsTestBase {
+    protected abstract BrowserContextHandle getBrowserContext();
+
+    @Test
+    @IntegrationTest
+    @Feature({"adblock"})
+    public void checkAdblockEnabledByDefault() {
+        TestThreadUtils.runOnUiThreadBlocking(
+                () -> {
+                    FilteringConfiguration adblockConfiguration =
+                            FilteringConfiguration.createConfiguration(
+                                    "adblock", getBrowserContext());
+
+                    Assert.assertNotNull(adblockConfiguration);
+                    Assert.assertTrue(adblockConfiguration.isEnabled());
+                    Assert.assertNotEquals(adblockConfiguration.getFilterLists().size(), 0);
+                });
+    }
+
+    @Test
+    @IntegrationTest
+    @Feature({"adblock"})
+    public void checkAcceptableAdsEnabledByDefault() {
+        TestThreadUtils.runOnUiThreadBlocking(
+                () -> {
+                    FilteringConfiguration adblockConfiguration =
+                            FilteringConfiguration.createConfiguration(
+                                    "adblock", getBrowserContext());
+
+                    Assert.assertNotNull(adblockConfiguration);
+                    List<URL> filterLists = adblockConfiguration.getFilterLists();
+
+                    try {
+                        URL acceptableAdsUrl = new URL(adblockConfiguration.getAcceptableAdsUrl());
+                        Assert.assertTrue(filterLists.contains(acceptableAdsUrl));
+                    } catch (MalformedURLException e) {
+                        Assert.fail();
+                    }
+                });
+    }
+}
diff --git a/components/adblock/android/javatests/src/org/chromium/components/adblock/FilteringConfigurationTestBase.java b/components/adblock/android/javatests/src/org/chromium/components/adblock/FilteringConfigurationTestBase.java
new file mode 100644
index 0000000000..e823b7a7f8
--- /dev/null
+++ b/components/adblock/android/javatests/src/org/chromium/components/adblock/FilteringConfigurationTestBase.java
@@ -0,0 +1,421 @@
+/*
+ * This file is part of eyeo Chromium SDK,
+ * Copyright (C) 2006-present eyeo GmbH
+ *
+ * eyeo Chromium SDK is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 3 as
+ * published by the Free Software Foundation.
+ *
+ * eyeo Chromium SDK is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with eyeo Chromium SDK.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+package org.chromium.components.adblock;
+
+import androidx.test.InstrumentationRegistry;
+import androidx.test.filters.LargeTest;
+
+import org.junit.Assert;
+import org.junit.Test;
+
+import org.chromium.base.test.util.CallbackHelper;
+import org.chromium.base.test.util.Feature;
+import org.chromium.base.test.util.IntegrationTest;
+import org.chromium.content_public.browser.BrowserContextHandle;
+import org.chromium.content_public.browser.test.util.TestThreadUtils;
+import org.chromium.net.test.EmbeddedTestServer;
+
+import java.net.URL;
+import java.util.ArrayList;
+import java.util.List;
+import java.util.concurrent.TimeUnit;
+import java.util.concurrent.TimeoutException;
+
+public abstract class FilteringConfigurationTestBase {
+    private final CallbackHelper mCallbackHelper = new CallbackHelper();
+    private TestPagesHelperBase mHelper;
+    public FilteringConfiguration mConfigurationA;
+    public FilteringConfiguration mConfigurationB;
+    private EmbeddedTestServer mTestServer;
+    protected String mTestUrl;
+
+    protected abstract void loadTestUrl() throws Exception;
+
+    protected abstract BrowserContextHandle getBrowserContext();
+
+    public void setUp(TestPagesHelperBase helper, String filePath) throws TimeoutException {
+        mHelper = helper;
+        mTestServer = EmbeddedTestServer.createAndStartServer(InstrumentationRegistry.getContext());
+        mTestUrl = mTestServer.getURLWithHostName("test.org", filePath);
+        TestThreadUtils.runOnUiThreadBlocking(
+                () -> {
+                    mConfigurationA =
+                            FilteringConfiguration.createConfiguration("a", getBrowserContext());
+                    mConfigurationB =
+                            FilteringConfiguration.createConfiguration("b", getBrowserContext());
+                    mCallbackHelper.notifyCalled();
+                });
+        mCallbackHelper.waitForCallback(0, 1, 10, TimeUnit.SECONDS);
+    }
+
+    public void tearDown() {
+        mTestServer.stopAndDestroyServer();
+    }
+
+    private static class TestConfigurationChangeObserver
+            implements FilteringConfiguration.ConfigurationChangeObserver {
+        public volatile boolean mOnEnabledStateChangedCalled;
+        public volatile boolean mOnFilterListsChanged;
+        public volatile boolean mOnAllowedDomainsChanged;
+        public volatile boolean mOnCustomFiltersChanged;
+
+        public TestConfigurationChangeObserver() {
+            mOnEnabledStateChangedCalled = false;
+            mOnFilterListsChanged = false;
+            mOnAllowedDomainsChanged = false;
+            mOnCustomFiltersChanged = false;
+        }
+
+        @Override
+        public void onEnabledStateChanged() {
+            mOnEnabledStateChangedCalled = true;
+        }
+
+        @Override
+        public void onFilterListsChanged() {
+            mOnFilterListsChanged = true;
+        }
+
+        @Override
+        public void onAllowedDomainsChanged() {
+            mOnAllowedDomainsChanged = true;
+        }
+
+        @Override
+        public void onCustomFiltersChanged() {
+            mOnCustomFiltersChanged = true;
+        }
+    }
+
+    @Test
+    @IntegrationTest
+    @LargeTest
+    @Feature({"adblock"})
+    public void addingAllowedDomains() throws Exception {
+        final List<String> allowedDomainsA = new ArrayList<>();
+        final List<String> allowedDomainsB = new ArrayList<>();
+        TestThreadUtils.runOnUiThreadBlocking(
+                () -> {
+                    mConfigurationA.addAllowedDomain("foobar.com");
+                    mConfigurationA.addAllowedDomain("domain.com/path/to/page.html");
+                    mConfigurationA.addAllowedDomain("domain.com/duplicate.html");
+                    allowedDomainsA.addAll(mConfigurationA.getAllowedDomains());
+
+                    mConfigurationB.addAllowedDomain("https://scheme.com/path.html");
+                    mConfigurationB.addAllowedDomain("https://second.com");
+                    mConfigurationB.removeAllowedDomain("https://second.com");
+                    mConfigurationB.addAllowedDomain("gibberish");
+                    allowedDomainsB.addAll(mConfigurationB.getAllowedDomains());
+
+                    mCallbackHelper.notifyCalled();
+                });
+        mCallbackHelper.waitForCallback(0, 1, 10, TimeUnit.SECONDS);
+        // We expect to see a sorted collection of domains (not URLs) without duplicates.
+        ArrayList<String> expectedAllowedDomainsA = new ArrayList<String>();
+        expectedAllowedDomainsA.add("domain.com");
+        expectedAllowedDomainsA.add("foobar.com");
+        Assert.assertEquals(expectedAllowedDomainsA, allowedDomainsA);
+
+        // We expect not to see second.com because it was removed after being added.
+        ArrayList<String> expectedAllowedDomainsB = new ArrayList<String>();
+        expectedAllowedDomainsB.add("scheme.com");
+        expectedAllowedDomainsB.add("www.gibberish.com");
+        Assert.assertEquals(expectedAllowedDomainsB, allowedDomainsB);
+    }
+
+    @Test
+    @IntegrationTest
+    @LargeTest
+    @Feature({"adblock"})
+    public void addingCustomFilters() throws Exception {
+        final List<String> customFiltersA = new ArrayList<>();
+        final List<String> customFiltersB = new ArrayList<>();
+        TestThreadUtils.runOnUiThreadBlocking(
+                () -> {
+                    mConfigurationA.addCustomFilter("foobar.com");
+                    mConfigurationA.addCustomFilter("foobar.com");
+                    mConfigurationA.addCustomFilter("abc");
+                    customFiltersA.addAll(mConfigurationA.getCustomFilters());
+
+                    mConfigurationB.addCustomFilter("https://scheme.com/path.html");
+                    mConfigurationB.addCustomFilter("https://second.com");
+                    mConfigurationB.removeCustomFilter("https://second.com");
+                    customFiltersB.addAll(mConfigurationB.getCustomFilters());
+
+                    mCallbackHelper.notifyCalled();
+                });
+        mCallbackHelper.waitForCallback(0, 1, 10, TimeUnit.SECONDS);
+        // We expect to see a collection of custom filters without duplicates.
+        // The order represents order of addition.
+        ArrayList<String> expectedCustomFiltersA = new ArrayList<String>();
+        expectedCustomFiltersA.add("foobar.com");
+        expectedCustomFiltersA.add("abc");
+        Assert.assertEquals(expectedCustomFiltersA, customFiltersA);
+
+        // We expect not to see https://second.com because it was removed after being added.
+        ArrayList<String> expectedCustomFiltersB = new ArrayList<String>();
+        expectedCustomFiltersB.add("https://scheme.com/path.html");
+        Assert.assertEquals(expectedCustomFiltersB, customFiltersB);
+    }
+
+    @Test
+    @IntegrationTest
+    @LargeTest
+    @Feature({"adblock"})
+    public void addingFilterLists() throws Exception {
+        final URL filterList1 = new URL("http://filters.com/list1.txt");
+        final URL filterList2 = new URL("http://filters.com/list2.txt");
+        final List<URL> filterListsA = new ArrayList<URL>();
+        final List<URL> filterListsB = new ArrayList<URL>();
+        TestThreadUtils.runOnUiThreadBlocking(
+                () -> {
+                    mConfigurationA.addFilterList(filterList1);
+                    mConfigurationA.addFilterList(filterList2);
+                    mConfigurationA.addFilterList(filterList1);
+                    filterListsA.addAll(mConfigurationA.getFilterLists());
+
+                    mConfigurationB.addFilterList(filterList1);
+                    mConfigurationB.addFilterList(filterList2);
+                    mConfigurationB.removeFilterList(filterList1);
+                    filterListsB.addAll(mConfigurationB.getFilterLists());
+
+                    mCallbackHelper.notifyCalled();
+                });
+        mCallbackHelper.waitForCallback(0, 1, 10, TimeUnit.SECONDS);
+        ArrayList<URL> expectedFilterListsA = new ArrayList<URL>();
+        expectedFilterListsA.add(filterList1);
+        expectedFilterListsA.add(filterList2);
+        Assert.assertEquals(expectedFilterListsA, filterListsA);
+
+        ArrayList<URL> expectedFilterListsB = new ArrayList<URL>();
+        expectedFilterListsB.add(filterList2);
+        Assert.assertEquals(expectedFilterListsB, filterListsB);
+    }
+
+    @Test
+    @IntegrationTest
+    @LargeTest
+    @Feature({"adblock"})
+    public void aliasedConfigurations() throws Exception {
+        final URL filterList1 = new URL("http://filters.com/list1.txt");
+        final URL filterList2 = new URL("http://filters.com/list2.txt");
+        final List<URL> filterListsA = new ArrayList<URL>();
+        final List<URL> filterListsB = new ArrayList<URL>();
+        TestThreadUtils.runOnUiThreadBlocking(
+                () -> {
+                    // Create a new FilteringConfiguration with a name of one that
+                    // already exist.
+                    FilteringConfiguration aliasedConfiguration =
+                            FilteringConfiguration.createConfiguration("a", getBrowserContext());
+
+                    // We add filter lists only to the original configuration instance.
+                    mConfigurationA.addFilterList(filterList1);
+                    mConfigurationA.addFilterList(filterList2);
+
+                    // We check what filter lists are present in the original and in the aliased
+                    // instance.
+                    filterListsA.addAll(mConfigurationA.getFilterLists());
+                    filterListsB.addAll(aliasedConfiguration.getFilterLists());
+
+                    mCallbackHelper.notifyCalled();
+                });
+        mCallbackHelper.waitForCallback(0, 1, 10, TimeUnit.SECONDS);
+        ArrayList<URL> expectedFilterLists = new ArrayList<URL>();
+        expectedFilterLists.add(filterList1);
+        expectedFilterLists.add(filterList2);
+        Assert.assertEquals(expectedFilterLists, filterListsA);
+        Assert.assertEquals(expectedFilterLists, filterListsB);
+    }
+
+    @Test
+    @IntegrationTest
+    @LargeTest
+    @Feature({"adblock"})
+    public void configurationChangeObserverNotified() throws Exception {
+        final URL filterList1 = new URL("http://filters.com/list1.txt");
+        final TestConfigurationChangeObserver observer = new TestConfigurationChangeObserver();
+        Assert.assertFalse(observer.mOnEnabledStateChangedCalled);
+        Assert.assertFalse(observer.mOnAllowedDomainsChanged);
+        Assert.assertFalse(observer.mOnCustomFiltersChanged);
+        Assert.assertFalse(observer.mOnFilterListsChanged);
+
+        TestThreadUtils.runOnUiThreadBlocking(
+                () -> {
+                    // We'll create an aliased instance which will receive notifications triggered
+                    // by
+                    // changes made to the original instance.
+                    FilteringConfiguration aliasedConfiguration =
+                            FilteringConfiguration.createConfiguration("a", getBrowserContext());
+                    aliasedConfiguration.addObserver(observer);
+
+                    mConfigurationA.addFilterList(filterList1);
+                    mConfigurationA.addAllowedDomain("test.com");
+                    mConfigurationA.addCustomFilter("test.com");
+                    mConfigurationA.setEnabled(false);
+
+                    mCallbackHelper.notifyCalled();
+                });
+        mCallbackHelper.waitForCallback(0, 1, 10, TimeUnit.SECONDS);
+        Assert.assertTrue(observer.mOnEnabledStateChangedCalled);
+        Assert.assertTrue(observer.mOnAllowedDomainsChanged);
+        Assert.assertTrue(observer.mOnCustomFiltersChanged);
+        Assert.assertTrue(observer.mOnFilterListsChanged);
+    }
+
+    @Test
+    @IntegrationTest
+    @LargeTest
+    @Feature({"adblock"})
+    public void resourceBlockedByFilter() throws Exception {
+        TestThreadUtils.runOnUiThreadBlocking(
+                () -> {
+                    mConfigurationA.addCustomFilter("resource.png");
+                    mCallbackHelper.notifyCalled();
+                });
+        mCallbackHelper.waitForCallback(0, 1, 10, TimeUnit.SECONDS);
+        loadTestUrl();
+        TestVerificationUtils.expectResourceBlocked(mHelper, "subresource");
+    }
+
+    @Test
+    @IntegrationTest
+    @LargeTest
+    @Feature({"adblock"})
+    public void resourceAllowedByFilter() throws Exception {
+        TestThreadUtils.runOnUiThreadBlocking(
+                () -> {
+                    mConfigurationA.addCustomFilter("resource.png");
+                    // Allowing filter for the mocked test.org domain that mTestServer hosts.
+                    mConfigurationA.addCustomFilter("@@test.org$document");
+                    mCallbackHelper.notifyCalled();
+                });
+        mCallbackHelper.waitForCallback(0, 1, 10, TimeUnit.SECONDS);
+        loadTestUrl();
+        TestVerificationUtils.expectResourceShown(mHelper, "subresource");
+    }
+
+    @Test
+    @IntegrationTest
+    @LargeTest
+    @Feature({"adblock"})
+    public void resourceAllowedByAllowedDomain() throws Exception {
+        TestThreadUtils.runOnUiThreadBlocking(
+                () -> {
+                    mConfigurationA.addCustomFilter("resource.png");
+                    mConfigurationA.addAllowedDomain("test.org");
+                    mCallbackHelper.notifyCalled();
+                });
+        mCallbackHelper.waitForCallback(0, 1, 10, TimeUnit.SECONDS);
+        loadTestUrl();
+        TestVerificationUtils.expectResourceShown(mHelper, "subresource");
+    }
+
+    @Test
+    @IntegrationTest
+    @LargeTest
+    @Feature({"adblock"})
+    public void resourceBlockedBySecondConfiguration() throws Exception {
+        TestThreadUtils.runOnUiThreadBlocking(
+                () -> {
+                    // ConfigurationA allows the resource.
+                    // Allowing rules take precedence within a FilteringConfiguration.
+                    mConfigurationA.addCustomFilter("resource.png");
+                    mConfigurationA.addAllowedDomain("test.org");
+                    // But ConfigurationB blocks the resource.
+                    // Blocking takes precedence across FilteringConfigurations.
+                    mConfigurationB.addCustomFilter("resource.png");
+                    mCallbackHelper.notifyCalled();
+                });
+        mCallbackHelper.waitForCallback(0, 1, 10, TimeUnit.SECONDS);
+        loadTestUrl();
+        TestVerificationUtils.expectResourceBlocked(mHelper, "subresource");
+    }
+
+    @Test
+    @IntegrationTest
+    @LargeTest
+    @Feature({"adblock"})
+    public void noBlockingWithoutFilters() throws Exception {
+        loadTestUrl();
+        TestVerificationUtils.expectResourceShown(mHelper, "subresource");
+    }
+
+    @Test
+    @IntegrationTest
+    @LargeTest
+    @Feature({"adblock"})
+    public void createAndRemoveConfiguration() throws Exception {
+        TestThreadUtils.runOnUiThreadBlocking(
+                () -> {
+                    // Check initial state.
+                    FilteringConfiguration.removeConfiguration("adblock", getBrowserContext());
+                    ArrayList<FilteringConfiguration> expectedConfigurations =
+                            new ArrayList<FilteringConfiguration>();
+                    expectedConfigurations.add(mConfigurationA);
+                    expectedConfigurations.add(mConfigurationB);
+                    Assert.assertEquals(
+                            expectedConfigurations,
+                            FilteringConfiguration.getConfigurations(getBrowserContext()));
+                    // Add new configuration (twice) and check.
+                    FilteringConfiguration configurationC =
+                            FilteringConfiguration.createConfiguration("c", getBrowserContext());
+                    FilteringConfiguration configurationC2 =
+                            FilteringConfiguration.createConfiguration("c", getBrowserContext());
+                    // Confirm this is the same reference.
+                    Assert.assertEquals(configurationC, configurationC2);
+                    expectedConfigurations.add(configurationC);
+                    Assert.assertEquals(
+                            expectedConfigurations,
+                            FilteringConfiguration.getConfigurations(getBrowserContext()));
+                    // Remove configuration "c" twice (2nd attempt has no effect) and check.
+                    FilteringConfiguration.removeConfiguration("c", getBrowserContext());
+                    FilteringConfiguration.removeConfiguration("c", getBrowserContext());
+                    expectedConfigurations.remove(configurationC);
+                    Assert.assertEquals(
+                            expectedConfigurations,
+                            FilteringConfiguration.getConfigurations(getBrowserContext()));
+                });
+    }
+
+    @Test
+    @IntegrationTest
+    @LargeTest
+    @Feature({"adblock"})
+    public void cannotUseRemovedConfiguration() throws Exception {
+        TestThreadUtils.runOnUiThreadBlocking(
+                () -> {
+                    FilteringConfiguration configurationC =
+                            FilteringConfiguration.createConfiguration("c", getBrowserContext());
+                    configurationC.setEnabled(false);
+                    Assert.assertFalse(configurationC.isEnabled());
+                    FilteringConfiguration.removeConfiguration("c", getBrowserContext());
+                    try {
+                        configurationC.setEnabled(true);
+                        Assert.fail();
+                    } catch (final IllegalStateException e) {
+                        // Expected
+                    }
+                    // Recreate.
+                    configurationC =
+                            FilteringConfiguration.createConfiguration("c", getBrowserContext());
+                    Assert.assertTrue(configurationC.isEnabled());
+                    configurationC.setEnabled(false);
+                    Assert.assertFalse(configurationC.isEnabled());
+                });
+    }
+}
diff --git a/components/adblock/android/javatests/src/org/chromium/components/adblock/TestPagesCircumventionTestBase.java b/components/adblock/android/javatests/src/org/chromium/components/adblock/TestPagesCircumventionTestBase.java
new file mode 100644
index 0000000000..41d1130480
--- /dev/null
+++ b/components/adblock/android/javatests/src/org/chromium/components/adblock/TestPagesCircumventionTestBase.java
@@ -0,0 +1,65 @@
+/*
+ * This file is part of eyeo Chromium SDK,
+ * Copyright (C) 2006-present eyeo GmbH
+ *
+ * eyeo Chromium SDK is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 3 as
+ * published by the Free Software Foundation.
+ *
+ * eyeo Chromium SDK is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with eyeo Chromium SDK.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+package org.chromium.components.adblock;
+
+import androidx.test.filters.LargeTest;
+
+import org.junit.Assert;
+import org.junit.Test;
+
+import org.chromium.base.test.util.Feature;
+import org.chromium.content_public.browser.test.util.JavaScriptUtils;
+
+public abstract class TestPagesCircumventionTestBase {
+    private TestPagesHelperBase mHelper;
+
+    public void setUp(TestPagesHelperBase helper) {
+        mHelper = helper;
+        mHelper.addFilterList(TestPagesHelperBase.TESTPAGES_SUBSCRIPTION);
+    }
+
+    @Test
+    @LargeTest
+    @Feature({"adblock"})
+    public void testVerifyCircumventionInlineStyleNotImportant() throws Exception {
+        mHelper.loadUrl(
+                TestPagesHelperBase.CIRCUMVENTION_TESTPAGES_TESTCASES_ROOT
+                        + "inline-style-important");
+        TestVerificationUtils.verifyHiddenCount(mHelper, 2, "div");
+    }
+
+    @Test
+    @LargeTest
+    @Feature({"adblock"})
+    public void testVerifyCircumventionAnonymousFrameDocumentWrite() throws Exception {
+        mHelper.loadUrl(
+                TestPagesHelperBase.CIRCUMVENTION_TESTPAGES_TESTCASES_ROOT
+                        + "anoniframe-documentwrite");
+        TestVerificationUtils.verifyHiddenCount(mHelper, 1, "span[data-expectedresult='fail']");
+        String numHidden =
+                JavaScriptUtils.executeJavaScriptAndWaitForResult(
+                        mHelper.getWebContents(),
+                        "var hiddenCount = 0;var elements ="
+                                + " document.getElementById(\"write\").contentWindow"
+                                + ".document.getElementsByTagName(\"span\");for (let i = 0; i <"
+                                + " elements.length; ++i) {    if"
+                                + " (window.getComputedStyle(elements[i]).display == \"none\") "
+                                + "++hiddenCount;}hiddenCount;");
+        Assert.assertEquals("1", numHidden);
+    }
+}
diff --git a/components/adblock/android/javatests/src/org/chromium/components/adblock/TestPagesCspTestBase.java b/components/adblock/android/javatests/src/org/chromium/components/adblock/TestPagesCspTestBase.java
new file mode 100644
index 0000000000..29976751a5
--- /dev/null
+++ b/components/adblock/android/javatests/src/org/chromium/components/adblock/TestPagesCspTestBase.java
@@ -0,0 +1,86 @@
+/*
+ * This file is part of eyeo Chromium SDK,
+ * Copyright (C) 2006-present eyeo GmbH
+ *
+ * eyeo Chromium SDK is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 3 as
+ * published by the Free Software Foundation.
+ *
+ * eyeo Chromium SDK is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with eyeo Chromium SDK.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+package org.chromium.components.adblock;
+
+import androidx.test.filters.LargeTest;
+
+import org.junit.Test;
+
+import org.chromium.base.test.util.Feature;
+
+public abstract class TestPagesCspTestBase {
+    private TestPagesHelperBase mHelper;
+
+    protected void setUp(TestPagesHelperBase helper) {
+        mHelper = helper;
+        mHelper.addFilterList(TestPagesHelperBase.TESTPAGES_SUBSCRIPTION);
+    }
+
+    @Test
+    @LargeTest
+    @Feature({"adblock"})
+    public void testCspAllSites() throws Exception {
+        mHelper.loadUrl(TestPagesHelperBase.FILTER_TESTPAGES_TESTCASES_ROOT + "csp_all");
+        TestVerificationUtils.verifyDisplayedCount(mHelper, 0, "img[id='all-sites-fail-1']");
+    }
+
+    @Test
+    @LargeTest
+    @Feature({"adblock"})
+    public void testCspSpecificSite() throws Exception {
+        mHelper.loadUrl(TestPagesHelperBase.FILTER_TESTPAGES_TESTCASES_ROOT + "csp_specific");
+        TestVerificationUtils.verifyDisplayedCount(
+                mHelper,
+                0,
+                "img[id='specific-site-fail-1']",
+                TestVerificationUtils.IncludeSubframes.NO);
+    }
+
+    @Test
+    @LargeTest
+    @Feature({"adblock"})
+    public void testCspSpecificSiteFrameSrc() throws Exception {
+        mHelper.loadUrl(TestPagesHelperBase.FILTER_TESTPAGES_TESTCASES_ROOT + "csp_specific");
+        TestVerificationUtils.verifyDisplayedCount(
+                mHelper, 0, "div[id='sub-frame-error']", TestVerificationUtils.IncludeSubframes.NO);
+        TestVerificationUtils.verifyDisplayedCount(
+                mHelper,
+                0,
+                "div[id='sub-frame-error-details']",
+                TestVerificationUtils.IncludeSubframes.NO);
+    }
+
+    @Test
+    @LargeTest
+    @Feature({"adblock"})
+    public void testCspException() throws Exception {
+        mHelper.loadUrl(TestPagesHelperBase.EXCEPTION_TESTPAGES_TESTCASES_ROOT + "csp");
+        TestVerificationUtils.verifyDisplayedCount(
+                mHelper, 1, "div[id='unblock-javascript'] > img");
+    }
+
+    @Test
+    @LargeTest
+    @Feature({"adblock"})
+    public void testCspGenericBlockException() throws Exception {
+        mHelper.loadUrl(
+                TestPagesHelperBase.EXCEPTION_TESTPAGES_TESTCASES_ROOT + "csp_genericblock");
+        TestVerificationUtils.verifyDisplayedCount(
+                mHelper, 1, "div[id='genericblock-javascript'] > img");
+    }
+}
diff --git a/components/adblock/android/javatests/src/org/chromium/components/adblock/TestPagesElemhideEmuInvTestBase.java b/components/adblock/android/javatests/src/org/chromium/components/adblock/TestPagesElemhideEmuInvTestBase.java
new file mode 100644
index 0000000000..70b1fe11d1
--- /dev/null
+++ b/components/adblock/android/javatests/src/org/chromium/components/adblock/TestPagesElemhideEmuInvTestBase.java
@@ -0,0 +1,116 @@
+/*
+ * This file is part of eyeo Chromium SDK,
+ * Copyright (C) 2006-present eyeo GmbH
+ *
+ * eyeo Chromium SDK is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 3 as
+ * published by the Free Software Foundation.
+ *
+ * eyeo Chromium SDK is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with eyeo Chromium SDK.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+package org.chromium.components.adblock;
+
+import androidx.test.filters.LargeTest;
+
+import org.junit.Test;
+
+import org.chromium.base.test.util.Feature;
+
+public abstract class TestPagesElemhideEmuInvTestBase {
+    public static final String ELEMENT_HIDING_EMULATION_TESTPAGES_URL =
+            TestPagesHelperBase.FILTER_TESTPAGES_TESTCASES_ROOT
+                    + "element-hiding-emulation-inversion";
+    private TestPagesHelperBase mHelper;
+
+    protected void setUp(TestPagesHelperBase helper) {
+        mHelper = helper;
+        mHelper.addFilterList(TestPagesHelperBase.TESTPAGES_SUBSCRIPTION);
+    }
+
+    @Test
+    @LargeTest
+    @Feature({"adblock"})
+    public void testElemHideEmuNotAbpProperties() throws Exception {
+        mHelper.loadUrl(ELEMENT_HIDING_EMULATION_TESTPAGES_URL);
+        TestVerificationUtils.verifyHiddenCount(
+                mHelper, 1, "div[id='basic-not-abp-properties-usage-fail']");
+    }
+
+    @Test
+    @LargeTest
+    @Feature({"adblock"})
+    public void testElemHideEmuNotAbpHas() throws Exception {
+        mHelper.loadUrl(ELEMENT_HIDING_EMULATION_TESTPAGES_URL);
+        TestVerificationUtils.verifyHiddenCount(
+                mHelper, 1, "div[id='basic-not-abp-has-usage-fail']");
+    }
+
+    @Test
+    @LargeTest
+    @Feature({"adblock"})
+    public void testElemHideEmuNotAbpContains() throws Exception {
+        mHelper.loadUrl(ELEMENT_HIDING_EMULATION_TESTPAGES_URL);
+        TestVerificationUtils.verifyHiddenCount(
+                mHelper, 1, "span[id='basic-not-abp-contains-usage-fail']");
+    }
+
+    @Test
+    @LargeTest
+    @Feature({"adblock"})
+    public void testElemHideEmuNotChained() throws Exception {
+        mHelper.loadUrl(ELEMENT_HIDING_EMULATION_TESTPAGES_URL);
+        TestVerificationUtils.verifyHiddenCount(
+                mHelper, 1, "div[id='chained-extended-selectors-with-not-selector-fail-1']");
+    }
+
+    @Test
+    @LargeTest
+    @Feature({"adblock"})
+    public void testElemHideEmuNotCaseIsensitive() throws Exception {
+        mHelper.loadUrl(ELEMENT_HIDING_EMULATION_TESTPAGES_URL);
+        TestVerificationUtils.verifyHiddenCount(
+                mHelper, 1, "div[id='case-insensitive-extended-selectors-with-not-selector-fail']");
+    }
+
+    @Test
+    @LargeTest
+    @Feature({"adblock"})
+    public void testElemHideEmuNotWildcard() throws Exception {
+        mHelper.loadUrl(ELEMENT_HIDING_EMULATION_TESTPAGES_URL);
+        TestVerificationUtils.verifyHiddenCount(
+                mHelper,
+                1,
+                "div[id='wildcard-in-extended-selector-combined-with-not-selector-fail']");
+    }
+
+    @Test
+    @LargeTest
+    @Feature({"adblock"})
+    public void testElemHideEmuNotRegexAbpProperties() throws Exception {
+        mHelper.loadUrl(ELEMENT_HIDING_EMULATION_TESTPAGES_URL);
+        TestVerificationUtils.verifyHiddenCount(
+                mHelper, 1, "div[id='regular-expression-in-not-abp-properties-fail-1']");
+        TestVerificationUtils.verifyHiddenCount(
+                mHelper, 1, "div[id='regular-expression-in-not-abp-properties-fail-2']");
+        TestVerificationUtils.verifyDisplayedCount(mHelper, 1, ".ehei-regex3");
+    }
+
+    @Test
+    @LargeTest
+    @Feature({"adblock"})
+    public void testElemHideEmuNotRegexAbpContains() throws Exception {
+        mHelper.loadUrl(ELEMENT_HIDING_EMULATION_TESTPAGES_URL);
+        TestVerificationUtils.verifyHiddenCount(
+                mHelper, 1, "span[id='regular-expression-in-not-abp-contains-fail-1']");
+        TestVerificationUtils.verifyHiddenCount(
+                mHelper, 1, "span[id='regular-expression-in-not-abp-contains-fail-2']");
+        TestVerificationUtils.verifyDisplayedCount(mHelper, 2, ".ehei-contains-regex");
+    }
+}
diff --git a/components/adblock/android/javatests/src/org/chromium/components/adblock/TestPagesElemhideEmuTestBase.java b/components/adblock/android/javatests/src/org/chromium/components/adblock/TestPagesElemhideEmuTestBase.java
new file mode 100644
index 0000000000..4d3e9be936
--- /dev/null
+++ b/components/adblock/android/javatests/src/org/chromium/components/adblock/TestPagesElemhideEmuTestBase.java
@@ -0,0 +1,161 @@
+/*
+ * This file is part of eyeo Chromium SDK,
+ * Copyright (C) 2006-present eyeo GmbH
+ *
+ * eyeo Chromium SDK is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 3 as
+ * published by the Free Software Foundation.
+ *
+ * eyeo Chromium SDK is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with eyeo Chromium SDK.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+package org.chromium.components.adblock;
+
+import androidx.test.filters.LargeTest;
+
+import org.junit.Test;
+
+import org.chromium.base.test.util.Feature;
+
+public abstract class TestPagesElemhideEmuTestBase {
+    public static final String ELEMENT_HIDING_EMULATION_TESTPAGES_URL =
+            TestPagesHelperBase.FILTER_TESTPAGES_TESTCASES_ROOT + "element-hiding-emulation";
+    public static final String ELEMENT_HIDING_EMULATION_EXCEPTIONS_TESTPAGES_URL =
+            TestPagesHelperBase.EXCEPTION_TESTPAGES_TESTCASES_ROOT + "element-hiding";
+    private TestPagesHelperBase mHelper;
+
+    protected void setUp(TestPagesHelperBase helper) {
+        mHelper = helper;
+        mHelper.addFilterList(TestPagesHelperBase.TESTPAGES_SUBSCRIPTION);
+    }
+
+    @Test
+    @LargeTest
+    @Feature({"adblock"})
+    public void testElemHideEmuFiltersBasicAbpProperties() throws Exception {
+        mHelper.loadUrl(ELEMENT_HIDING_EMULATION_TESTPAGES_URL);
+        TestVerificationUtils.verifyHiddenCount(
+                mHelper, 1, "div[id='basic-abp-properties-usage-fail-1']");
+    }
+
+    @Test
+    @LargeTest
+    @Feature({"adblock"})
+    public void testElemHideEmuFiltersBasicAbpHas() throws Exception {
+        mHelper.loadUrl(ELEMENT_HIDING_EMULATION_TESTPAGES_URL);
+        TestVerificationUtils.verifyHiddenCount(mHelper, 1, "div[id='basic-abp-has-usage-fail-1']");
+    }
+
+    @Test
+    @LargeTest
+    @Feature({"adblock"})
+    public void testElemHideEmuFiltersBasicHas() throws Exception {
+        mHelper.loadUrl(ELEMENT_HIDING_EMULATION_TESTPAGES_URL);
+        TestVerificationUtils.verifyHiddenCount(mHelper, 1, "div[id='basic-has-usage-fail-1']");
+    }
+
+    @Test
+    @LargeTest
+    @Feature({"adblock"})
+    public void testElemHideEmuFiltersBasicAbpContains() throws Exception {
+        mHelper.loadUrl(ELEMENT_HIDING_EMULATION_TESTPAGES_URL);
+        TestVerificationUtils.verifyHiddenCount(
+                mHelper, 1, "span[id='basic-abp-contains-usage-fail-1']");
+    }
+
+    @Test
+    @LargeTest
+    @Feature({"adblock"})
+    public void testElemHideEmuFiltersBasicXpath() throws Exception {
+        mHelper.loadUrl(ELEMENT_HIDING_EMULATION_TESTPAGES_URL);
+        TestVerificationUtils.verifyHiddenCount(mHelper, 1, "span[id='basic-xpath-usage-fail']");
+    }
+
+    @Test
+    @LargeTest
+    @Feature({"adblock"})
+    public void testElemHideEmuFiltersBasicHasText() throws Exception {
+        mHelper.loadUrl(ELEMENT_HIDING_EMULATION_TESTPAGES_URL);
+        TestVerificationUtils.verifyHiddenCount(
+                mHelper, 1, "span[id='basic-has-text-usage-fail-1']");
+    }
+
+    @Test
+    @LargeTest
+    @Feature({"adblock"})
+    public void testElemHideEmuFiltersChainedExtendedSelectors() throws Exception {
+        mHelper.loadUrl(ELEMENT_HIDING_EMULATION_TESTPAGES_URL);
+        TestVerificationUtils.verifyHiddenCount(
+                mHelper, 1, "div[id='chained-extended-selectors-fail-1']");
+    }
+
+    @Test
+    @LargeTest
+    @Feature({"adblock"})
+    public void testElemHideEmuFiltersCaseInsensitiveExtendedSelectors() throws Exception {
+        mHelper.loadUrl(ELEMENT_HIDING_EMULATION_TESTPAGES_URL);
+        TestVerificationUtils.verifyHiddenCount(
+                mHelper, 1, "div[id='case-insensitive-extended-selectors-fail-1']");
+    }
+
+    @Test
+    @LargeTest
+    @Feature({"adblock"})
+    public void testElemHideEmuFiltersWildcardInExtendedSelector() throws Exception {
+        mHelper.loadUrl(ELEMENT_HIDING_EMULATION_TESTPAGES_URL);
+        TestVerificationUtils.verifyHiddenCount(
+                mHelper, 1, "div[id='wildcard-in-extended-selector-fail-1']");
+    }
+
+    @Test
+    @LargeTest
+    @Feature({"adblock"})
+    public void testElemHideEmuFiltersRegularExpressionInAbpProperties() throws Exception {
+        mHelper.loadUrl(ELEMENT_HIDING_EMULATION_TESTPAGES_URL);
+        TestVerificationUtils.verifyHiddenCount(
+                mHelper, 1, "div[id='regular-expression-in-abp-properties-fail-1']");
+        TestVerificationUtils.verifyHiddenCount(
+                mHelper, 1, "div[id='regular-expression-in-abp-properties-fail-2']");
+        // "Not a target" div is not hidden, does not match regular expression.
+        TestVerificationUtils.verifyDisplayedCount(
+                mHelper, 1, "div[class='testcase-examplecontent ehe-regex3']");
+    }
+
+    @Test
+    @LargeTest
+    @Feature({"adblock"})
+    public void testElemHideEmuFiltersRegularExpressionInAbpContains() throws Exception {
+        mHelper.loadUrl(ELEMENT_HIDING_EMULATION_TESTPAGES_URL);
+        TestVerificationUtils.verifyHiddenCount(
+                mHelper, 1, "div[id='regular-expression-in-abp-contains-fail-1']");
+        TestVerificationUtils.verifyHiddenCount(
+                mHelper, 1, "div[id='regular-expression-in-abp-contains-fail-2']");
+    }
+
+    // Exceptions:
+    @Test
+    @LargeTest
+    @Feature({"adblock"})
+    public void testElemHideEmuFiltersException() throws Exception {
+        mHelper.loadUrl(ELEMENT_HIDING_EMULATION_EXCEPTIONS_TESTPAGES_URL);
+        TestVerificationUtils.verifyDisplayedCount(mHelper, 1, "div[id='exception-usage-pass-1']");
+    }
+
+    // DPD-2543
+    @Test
+    @LargeTest
+    @Feature({"adblock"})
+    public void testElemHideEmuFiltersBasicAbpPropertiesWithUsupportedFilter() throws Exception {
+        // Add broken ElemHideEmu filter
+        mHelper.addCustomFilter("abptestpages.org#?#div:-unsupported-selector(width: 213px)");
+        mHelper.loadUrl(ELEMENT_HIDING_EMULATION_TESTPAGES_URL);
+        TestVerificationUtils.verifyHiddenCount(
+                mHelper, 1, "div[id='basic-abp-properties-usage-fail-1']");
+    }
+}
diff --git a/components/adblock/android/javatests/src/org/chromium/components/adblock/TestPagesElemhideTestBase.java b/components/adblock/android/javatests/src/org/chromium/components/adblock/TestPagesElemhideTestBase.java
new file mode 100644
index 0000000000..a5d1921459
--- /dev/null
+++ b/components/adblock/android/javatests/src/org/chromium/components/adblock/TestPagesElemhideTestBase.java
@@ -0,0 +1,159 @@
+/*
+ * This file is part of eyeo Chromium SDK,
+ * Copyright (C) 2006-present eyeo GmbH
+ *
+ * eyeo Chromium SDK is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 3 as
+ * published by the Free Software Foundation.
+ *
+ * eyeo Chromium SDK is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with eyeo Chromium SDK.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+package org.chromium.components.adblock;
+
+import androidx.test.filters.LargeTest;
+
+import org.junit.Test;
+
+import org.chromium.base.test.util.Feature;
+
+public abstract class TestPagesElemhideTestBase {
+    public static final String ELEMENT_HIDING_TESTPAGES_URL =
+            TestPagesHelperBase.FILTER_TESTPAGES_TESTCASES_ROOT + "element-hiding";
+    public static final String ELEMENT_HIDING_EXCEPTIONS_TESTPAGES_URL =
+            TestPagesHelperBase.EXCEPTION_TESTPAGES_TESTCASES_ROOT + "elemhide";
+    private TestPagesHelperBase mHelper;
+
+    protected void setUp(TestPagesHelperBase helper) {
+        mHelper = helper;
+        mHelper.addFilterList(TestPagesHelperBase.TESTPAGES_SUBSCRIPTION);
+    }
+
+    @Test
+    @LargeTest
+    @Feature({"adblock"})
+    public void testElemHideFiltersIdSelector() throws Exception {
+        mHelper.loadUrl(ELEMENT_HIDING_TESTPAGES_URL);
+        TestVerificationUtils.verifyHiddenCount(mHelper, 1, "div[id='eh-id']");
+    }
+
+    @Test
+    @LargeTest
+    @Feature({"adblock"})
+    public void testElemHideFiltersIdSelectorDoubleCurlyBraces() throws Exception {
+        mHelper.loadUrl(ELEMENT_HIDING_TESTPAGES_URL);
+        TestVerificationUtils.verifyHiddenCount(mHelper, 1, "div[id='{{eh-id}}']");
+    }
+
+    @Test
+    @LargeTest
+    @Feature({"adblock"})
+    public void testElemHideFiltersClassSelector() throws Exception {
+        mHelper.loadUrl(ELEMENT_HIDING_TESTPAGES_URL);
+        TestVerificationUtils.verifyHiddenCount(mHelper, 1, "div[class='eh-class']");
+    }
+
+    @Test
+    @LargeTest
+    @Feature({"adblock"})
+    public void testElemHideFiltersDescendantSelector() throws Exception {
+        mHelper.loadUrl(ELEMENT_HIDING_TESTPAGES_URL);
+        TestVerificationUtils.verifyHiddenCount(mHelper, 1, "div[class='eh-descendant']");
+    }
+
+    @Test
+    @LargeTest
+    @Feature({"adblock"})
+    public void testElemHideFiltersSiblingSelector() throws Exception {
+        mHelper.loadUrl(ELEMENT_HIDING_TESTPAGES_URL);
+        TestVerificationUtils.verifyHiddenCount(mHelper, 1, "div[class='eh-sibling']");
+    }
+
+    @Test
+    @LargeTest
+    @Feature({"adblock"})
+    public void testElemHideFiltersAttributeSelector1() throws Exception {
+        mHelper.loadUrl(ELEMENT_HIDING_TESTPAGES_URL);
+        TestVerificationUtils.verifyHiddenCount(
+                mHelper, 1, "div[id='attribute-selector-1-fail-1']");
+    }
+
+    @Test
+    @LargeTest
+    @Feature({"adblock"})
+    public void testElemHideFiltersAttributeSelector2() throws Exception {
+        mHelper.loadUrl(ELEMENT_HIDING_TESTPAGES_URL);
+        TestVerificationUtils.verifyHiddenCount(
+                mHelper, 1, "div[id='attribute-selector-2-fail-1']");
+    }
+
+    @Test
+    @LargeTest
+    @Feature({"adblock"})
+    public void testElemHideFiltersAttributeSelector3() throws Exception {
+        mHelper.loadUrl(ELEMENT_HIDING_TESTPAGES_URL);
+        TestVerificationUtils.verifyHiddenCount(
+                mHelper, 1, "div[id='attribute-selector-3-fail-1']");
+    }
+
+    @Test
+    @LargeTest
+    @Feature({"adblock"})
+    public void testElemHideFiltersStartsWithSelector1() throws Exception {
+        mHelper.loadUrl(ELEMENT_HIDING_TESTPAGES_URL);
+        TestVerificationUtils.verifyHiddenCount(
+                mHelper, 1, "div[id='starts-with-selector-1-fail-1']");
+    }
+
+    @Test
+    @LargeTest
+    @Feature({"adblock"})
+    public void testElemHideFiltersStartsWithSelector2() throws Exception {
+        mHelper.loadUrl(ELEMENT_HIDING_TESTPAGES_URL);
+        TestVerificationUtils.verifyHiddenCount(
+                mHelper, 1, "div[id='starts-with-selector-2-fail-1']");
+    }
+
+    @Test
+    @LargeTest
+    @Feature({"adblock"})
+    public void testElemHideFiltersEndsWithSelector1() throws Exception {
+        mHelper.loadUrl(ELEMENT_HIDING_TESTPAGES_URL);
+        TestVerificationUtils.verifyHiddenCount(
+                mHelper, 1, "div[id='ends-with-selector-1-fail-1']");
+    }
+
+    @Test
+    @LargeTest
+    @Feature({"adblock"})
+    public void testElemHideFiltersContains() throws Exception {
+        mHelper.loadUrl(ELEMENT_HIDING_TESTPAGES_URL);
+        TestVerificationUtils.verifyHiddenCount(mHelper, 1, "div[id='contains-fail-1']");
+    }
+
+    // Exceptions:
+    @Test
+    @LargeTest
+    @Feature({"adblock"})
+    public void testElemHideFiltersBasicException() throws Exception {
+        mHelper.loadUrl(ELEMENT_HIDING_EXCEPTIONS_TESTPAGES_URL);
+        TestVerificationUtils.verifyHiddenCount(mHelper, 1, "img[id='basic-usage-fail-1']");
+        TestVerificationUtils.verifyDisplayedCount(
+                mHelper, 1, "div[id='basic-usage-area'] > div[id='basic-usage-pass-1']");
+    }
+
+    @Test
+    @LargeTest
+    @Feature({"adblock"})
+    public void testElemHideFiltersIframeException() throws Exception {
+        mHelper.loadUrl(ELEMENT_HIDING_EXCEPTIONS_TESTPAGES_URL);
+        TestVerificationUtils.verifyHiddenCount(mHelper, 1, "img[id='iframe-fail-1']");
+        TestVerificationUtils.verifyDisplayedCount(mHelper, 1, "div[id='iframe-pass-1']");
+    }
+}
diff --git a/components/adblock/android/javatests/src/org/chromium/components/adblock/TestPagesExceptionTestBase.java b/components/adblock/android/javatests/src/org/chromium/components/adblock/TestPagesExceptionTestBase.java
new file mode 100644
index 0000000000..27c2146696
--- /dev/null
+++ b/components/adblock/android/javatests/src/org/chromium/components/adblock/TestPagesExceptionTestBase.java
@@ -0,0 +1,190 @@
+/*
+ * This file is part of eyeo Chromium SDK,
+ * Copyright (C) 2006-present eyeo GmbH
+ *
+ * eyeo Chromium SDK is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 3 as
+ * published by the Free Software Foundation.
+ *
+ * eyeo Chromium SDK is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with eyeo Chromium SDK.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+package org.chromium.components.adblock;
+
+import androidx.test.filters.LargeTest;
+
+import org.junit.Assert;
+import org.junit.Test;
+
+import org.chromium.base.test.util.Feature;
+import org.chromium.content_public.browser.test.util.JavaScriptUtils;
+
+import java.util.HashSet;
+import java.util.List;
+import java.util.concurrent.CountDownLatch;
+import java.util.concurrent.TimeUnit;
+
+public abstract class TestPagesExceptionTestBase {
+    private TestPagesHelperBase mHelper;
+
+    protected void setUp(TestPagesHelperBase helper) {
+        mHelper = helper;
+        mHelper.addFilterList(TestPagesHelperBase.TESTPAGES_SUBSCRIPTION);
+    }
+
+    @Test
+    @LargeTest
+    @Feature({"adblock"})
+    public void testVerifyImageExceptions() throws Exception {
+        final String subdomainImage =
+                String.format(
+                        "https://allowed.subdomain.%s/testfiles/image_exception/subdomain.png",
+                        TestPagesHelperBase.TESTPAGES_DOMAIN);
+        mHelper.loadUrl(TestPagesHelperBase.EXCEPTION_TESTPAGES_TESTCASES_ROOT + "image");
+        Assert.assertEquals(2, mHelper.numAllowed());
+        Assert.assertEquals(2, mHelper.numAllowedByType(ContentType.CONTENT_TYPE_IMAGE));
+        Assert.assertTrue(mHelper.isAllowed(subdomainImage));
+        Assert.assertTrue(
+                mHelper.isAllowed(
+                        TestPagesHelperBase.TESTPAGES_RESOURCES_ROOT
+                                + "image_exception/image.png"));
+        TestVerificationUtils.verifyDisplayedCount(mHelper, 2, "img");
+        String numImages =
+                JavaScriptUtils.executeJavaScriptAndWaitForResult(
+                        mHelper.getWebContents(), "document.getElementsByTagName(\"img\").length;");
+        Assert.assertEquals("2", numImages);
+    }
+
+    @Test
+    @LargeTest
+    @Feature({"adblock"})
+    public void testVerifySubdocumentException() throws Exception {
+        mHelper.loadUrl(TestPagesHelperBase.EXCEPTION_TESTPAGES_TESTCASES_ROOT + "subdocument");
+        Assert.assertEquals(1, mHelper.numAllowed());
+        Assert.assertTrue(
+                mHelper.isAllowed(
+                        TestPagesHelperBase.TESTPAGES_RESOURCES_ROOT
+                                + "subdocument_exception/subdocument.html"));
+        TestVerificationUtils.verifyGreenBackground(mHelper, "exception-target");
+        String numFrames =
+                JavaScriptUtils.executeJavaScriptAndWaitForResult(
+                        mHelper.getWebContents(), "window.frames.length;");
+        Assert.assertEquals("1", numFrames);
+        TestVerificationUtils.verifyDisplayedCount(mHelper, 1, "iframe");
+    }
+
+    @Test
+    @LargeTest
+    @Feature({"adblock"})
+    public void testVerifyScriptException() throws Exception {
+        mHelper.loadUrl(TestPagesHelperBase.EXCEPTION_TESTPAGES_TESTCASES_ROOT + "script");
+        Assert.assertEquals(1, mHelper.numAllowed());
+        Assert.assertTrue(
+                mHelper.isAllowed(
+                        TestPagesHelperBase.TESTPAGES_RESOURCES_ROOT
+                                + "script_exception/script.js"));
+        TestVerificationUtils.verifyGreenBackground(mHelper, "script-target");
+        Assert.assertEquals(1, mHelper.numBlocked());
+        Assert.assertTrue(
+                mHelper.isBlocked(
+                        TestPagesHelperBase.TESTPAGES_RESOURCES_ROOT
+                                + "script_exception/image.png"));
+        TestVerificationUtils.verifyHiddenCount(mHelper, 1, "img[data-expectedresult='fail']");
+    }
+
+    @Test
+    @LargeTest
+    @Feature({"adblock"})
+    public void testVerifyStylesheetException() throws Exception {
+        final String allowedUrl =
+                TestPagesHelperBase.TESTPAGES_RESOURCES_ROOT + "stylesheet_exception/stylesheet.cs";
+        final CountDownLatch countDownLatch =
+                mHelper.setOnAdMatchedExpectations(null, new HashSet<>(List.of(allowedUrl)));
+        mHelper.loadUrl(TestPagesHelperBase.EXCEPTION_TESTPAGES_TESTCASES_ROOT + "stylesheet");
+        // Wait with 10 seconds max timeout
+        countDownLatch.await(10, TimeUnit.SECONDS);
+        Assert.assertEquals(1, mHelper.numAllowed());
+        Assert.assertTrue(mHelper.isAllowed(allowedUrl));
+        Assert.assertEquals(1, mHelper.numBlocked());
+        Assert.assertTrue(
+                mHelper.isBlocked(
+                        TestPagesHelperBase.TESTPAGES_RESOURCES_ROOT
+                                + "stylesheet_exception/image.png"));
+        TestVerificationUtils.verifyHiddenCount(mHelper, 1, "img");
+        TestVerificationUtils.verifyGreenBackground(mHelper, "exception-target");
+    }
+
+    @Test
+    @LargeTest
+    @Feature({"adblock"})
+    public void testVerifyXHRException() throws Exception {
+        final String allowedUrl =
+                TestPagesHelperBase.TESTPAGES_RESOURCES_ROOT + "xmlhttprequest_exception/text.txt";
+        final CountDownLatch countDownLatch =
+                mHelper.setOnAdMatchedExpectations(null, new HashSet<>(List.of(allowedUrl)));
+        mHelper.loadUrl(TestPagesHelperBase.EXCEPTION_TESTPAGES_TESTCASES_ROOT + "xmlhttprequest");
+        // Wait with 10 seconds max timeout
+        countDownLatch.await(10, TimeUnit.SECONDS);
+        Assert.assertEquals(1, mHelper.numAllowed());
+        Assert.assertTrue(mHelper.isAllowed(allowedUrl));
+    }
+
+    @Test
+    @LargeTest
+    @Feature({"adblock"})
+    public void testVerifyGenericBlockException() throws Exception {
+        mHelper.loadUrl(TestPagesHelperBase.EXCEPTION_TESTPAGES_TESTCASES_ROOT + "genericblock");
+        Assert.assertEquals(1, mHelper.numBlocked());
+        Assert.assertTrue(
+                mHelper.isBlocked(
+                        TestPagesHelperBase.TESTPAGES_RESOURCES_ROOT
+                                + "genericblock/specific.png"));
+        Assert.assertEquals(1, mHelper.numBlockedByType(ContentType.CONTENT_TYPE_IMAGE));
+        TestVerificationUtils.verifyDisplayedCount(mHelper, 1, "img[data-expectedresult='pass']");
+        TestVerificationUtils.verifyHiddenCount(mHelper, 1, "img[data-expectedresult='fail']");
+    }
+
+    @Test
+    @LargeTest
+    @Feature({"adblock"})
+    public void testVerifyGenericHideException() throws Exception {
+        mHelper.loadUrl(TestPagesHelperBase.EXCEPTION_TESTPAGES_TESTCASES_ROOT + "generichide");
+        TestVerificationUtils.verifyDisplayedCount(mHelper, 1, "div[data-expectedresult='pass']");
+        TestVerificationUtils.verifyHiddenCount(mHelper, 1, "div[data-expectedresult='fail']");
+    }
+
+    @Test
+    @LargeTest
+    @Feature({"adblock"})
+    public void testVerifyDocumentException() throws Exception {
+        mHelper.loadUrl(TestPagesHelperBase.EXCEPTION_TESTPAGES_TESTCASES_ROOT + "document");
+        Assert.assertTrue(
+                mHelper.isAllowed(
+                        TestPagesHelperBase.TESTPAGES_RESOURCES_ROOT + "document/image.png"));
+        Assert.assertTrue(
+                mHelper.isPageAllowed(
+                        TestPagesHelperBase.EXCEPTION_TESTPAGES_TESTCASES_ROOT + "document"));
+        TestVerificationUtils.verifyDisplayedCount(mHelper, 1, "div[data-expectedresult='pass']");
+    }
+
+    @Test
+    @LargeTest
+    @Feature({"adblock"})
+    public void testVerifyWebSocketException() throws Exception {
+        final String wssUrl =
+                String.format("wss://%s/exception_websocket", TestPagesHelperBase.TESTPAGES_DOMAIN);
+        final CountDownLatch countDownLatch =
+                mHelper.setOnAdMatchedExpectations(null, new HashSet<>(List.of(wssUrl)));
+        mHelper.loadUrl(TestPagesHelperBase.EXCEPTION_TESTPAGES_TESTCASES_ROOT + "websocket");
+        // Wait with 10 seconds max timeout
+        countDownLatch.await(10, TimeUnit.SECONDS);
+        Assert.assertEquals(1, mHelper.numAllowedByType(ContentType.CONTENT_TYPE_WEBSOCKET));
+        Assert.assertTrue(mHelper.isAllowed(wssUrl));
+    }
+}
diff --git a/components/adblock/android/javatests/src/org/chromium/components/adblock/TestPagesFilterTestBase.java b/components/adblock/android/javatests/src/org/chromium/components/adblock/TestPagesFilterTestBase.java
new file mode 100644
index 0000000000..4b63c12561
--- /dev/null
+++ b/components/adblock/android/javatests/src/org/chromium/components/adblock/TestPagesFilterTestBase.java
@@ -0,0 +1,277 @@
+/*
+ * This file is part of eyeo Chromium SDK,
+ * Copyright (C) 2006-present eyeo GmbH
+ *
+ * eyeo Chromium SDK is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 3 as
+ * published by the Free Software Foundation.
+ *
+ * eyeo Chromium SDK is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with eyeo Chromium SDK.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+package org.chromium.components.adblock;
+
+import androidx.test.filters.LargeTest;
+
+import org.junit.Assert;
+import org.junit.Test;
+
+import org.chromium.base.test.util.DisabledTest;
+import org.chromium.base.test.util.Feature;
+import org.chromium.content_public.browser.test.util.DOMUtils;
+import org.chromium.content_public.browser.test.util.JavaScriptUtils;
+
+import java.util.Arrays;
+import java.util.HashSet;
+import java.util.List;
+import java.util.concurrent.CountDownLatch;
+import java.util.concurrent.TimeUnit;
+
+public abstract class TestPagesFilterTestBase {
+    private TestPagesHelperBase mHelper;
+
+    protected void setUp(TestPagesHelperBase helper) {
+        mHelper = helper;
+        mHelper.addFilterList(TestPagesHelperBase.TESTPAGES_SUBSCRIPTION);
+    }
+
+    @Test
+    @LargeTest
+    @Feature({"adblock"})
+    public void testBlockingFilters() throws Exception {
+        final CountDownLatch countDownLatch =
+                mHelper.setOnAdMatchedExpectations(
+                        new HashSet<>(
+                                Arrays.asList(
+                                        TestPagesHelperBase.TESTPAGES_RESOURCES_ROOT
+                                                + "blocking/full-path.png",
+                                        TestPagesHelperBase.TESTPAGES_RESOURCES_ROOT
+                                                + "blocking/partial-path/partial-path.png",
+                                        TestPagesHelperBase.TESTPAGES_RESOURCES_ROOT
+                                                + "blocking/wildcard/1/wildcard.png",
+                                        TestPagesHelperBase.TESTPAGES_RESOURCES_ROOT
+                                                + "blocking/wildcard/2/wildcard.png",
+                                        TestPagesHelperBase.TESTPAGES_RESOURCES_ROOT
+                                                + "blocking/dynamic.png",
+                                        TestPagesHelperBase.TESTPAGES_RESOURCES_ROOT
+                                                + "blocking/subdomain.png")),
+                        null);
+        mHelper.loadUrl(TestPagesHelperBase.FILTER_TESTPAGES_TESTCASES_ROOT + "blocking");
+        // Wait with 10 seconds max timeout
+        countDownLatch.await(10, TimeUnit.SECONDS);
+        Assert.assertEquals(6, mHelper.numBlocked());
+        Assert.assertEquals(6, mHelper.numBlockedByType(ContentType.CONTENT_TYPE_IMAGE));
+        TestVerificationUtils.verifyHiddenCount(mHelper, 6, "img[data-expectedresult='fail']");
+    }
+
+    @Test
+    @LargeTest
+    @Feature({"adblock"})
+    public void testVerifyScriptFilters() throws Exception {
+        mHelper.loadUrl(TestPagesHelperBase.FILTER_TESTPAGES_TESTCASES_ROOT + "script");
+        Assert.assertEquals(1, mHelper.numBlocked());
+        Assert.assertEquals(1, mHelper.numBlockedByType(ContentType.CONTENT_TYPE_SCRIPT));
+        Assert.assertTrue(
+                mHelper.isBlocked(
+                        TestPagesHelperBase.TESTPAGES_RESOURCES_ROOT + "script/script.js"));
+
+        String childCount =
+                JavaScriptUtils.executeJavaScriptAndWaitForResult(
+                        mHelper.getWebContents(),
+                        "document.getElementById(\"script-target\").childElementCount");
+        Assert.assertEquals("1", childCount);
+    }
+
+    @Test
+    @LargeTest
+    @Feature({"adblock"})
+    public void testVerifyImageFilters() throws Exception {
+        final CountDownLatch countDownLatch =
+                mHelper.setOnAdMatchedExpectations(
+                        new HashSet<>(
+                                Arrays.asList(
+                                        TestPagesHelperBase.TESTPAGES_RESOURCES_ROOT
+                                                + "image/static/static.png",
+                                        TestPagesHelperBase.TESTPAGES_RESOURCES_ROOT
+                                                + "image/dynamic/dynamic.png")),
+                        null);
+        mHelper.loadUrl(TestPagesHelperBase.FILTER_TESTPAGES_TESTCASES_ROOT + "image");
+        countDownLatch.await(10, TimeUnit.SECONDS);
+        Assert.assertEquals(2, mHelper.numBlocked());
+        Assert.assertEquals(2, mHelper.numBlockedByType(ContentType.CONTENT_TYPE_IMAGE));
+        Assert.assertTrue(
+                mHelper.isBlocked(
+                        TestPagesHelperBase.TESTPAGES_RESOURCES_ROOT + "image/static/static.png"));
+        Assert.assertTrue(
+                mHelper.isBlocked(
+                        TestPagesHelperBase.TESTPAGES_RESOURCES_ROOT
+                                + "image/dynamic/dynamic.png"));
+        TestVerificationUtils.verifyHiddenCount(mHelper, 2, "img[data-expectedresult='fail']");
+    }
+
+    @Test
+    @LargeTest
+    @Feature({"adblock"})
+    public void testVerifyStylesheetFilters() throws Exception {
+        final String blockedUrl =
+                TestPagesHelperBase.TESTPAGES_RESOURCES_ROOT + "stylesheet/stylesheet.cs";
+        final CountDownLatch countDownLatch =
+                mHelper.setOnAdMatchedExpectations(new HashSet<>(List.of(blockedUrl)), null);
+        mHelper.loadUrl(TestPagesHelperBase.FILTER_TESTPAGES_TESTCASES_ROOT + "stylesheet");
+        // Wait with 10 seconds max timeout
+        countDownLatch.await(10, TimeUnit.SECONDS);
+        Assert.assertEquals(1, mHelper.numBlocked());
+        Assert.assertEquals(1, mHelper.numBlockedByType(ContentType.CONTENT_TYPE_STYLESHEET));
+        Assert.assertTrue(mHelper.isBlocked(blockedUrl));
+        String value = DOMUtils.getNodeContents(mHelper.getWebContents(), "stylesheet-target");
+        Assert.assertEquals("Passed. Stylesheet was blocked.", value);
+    }
+
+    @Test
+    @LargeTest
+    @Feature({"adblock"})
+    public void testVerifyXHRFilters() throws Exception {
+        final String blockedUrl =
+                TestPagesHelperBase.TESTPAGES_RESOURCES_ROOT + "xmlhttprequest/text.txt";
+        final CountDownLatch countDownLatch =
+                mHelper.setOnAdMatchedExpectations(new HashSet<>(List.of(blockedUrl)), null);
+        mHelper.loadUrl(TestPagesHelperBase.FILTER_TESTPAGES_TESTCASES_ROOT + "xmlhttprequest");
+        // Wait with 10 seconds max timeout
+        countDownLatch.await(10, TimeUnit.SECONDS);
+        Assert.assertEquals(1, mHelper.numBlocked());
+        Assert.assertEquals(1, mHelper.numBlockedByType(ContentType.CONTENT_TYPE_XMLHTTPREQUEST));
+        Assert.assertTrue(mHelper.isBlocked(blockedUrl));
+    }
+
+    @Test
+    @LargeTest
+    @Feature({"adblock"})
+    public void testVerifySubdocumentFilters() throws Exception {
+        mHelper.loadUrl(TestPagesHelperBase.FILTER_TESTPAGES_TESTCASES_ROOT + "subdocument");
+        Assert.assertEquals(1, mHelper.numBlocked());
+        Assert.assertEquals(1, mHelper.numBlockedByType(ContentType.CONTENT_TYPE_SUBDOCUMENT));
+        Assert.assertTrue(
+                mHelper.isBlocked(
+                        TestPagesHelperBase.TESTPAGES_RESOURCES_ROOT
+                                + "subdocument/subdocument.html"));
+        // Do not search for iframe within the site's iframes.
+        TestVerificationUtils.verifyHiddenCount(
+                mHelper,
+                1,
+                "iframe[data-expectedresult='fail']",
+                TestVerificationUtils.IncludeSubframes.NO);
+    }
+
+    @Test
+    @LargeTest
+    @Feature({"adblock"})
+    @DisabledTest(message = "Please enable again when rewrite filters will be supported")
+    public void testVerifyRewrite() throws Exception {
+        mHelper.loadUrl(TestPagesHelperBase.FILTER_TESTPAGES_TESTCASES_ROOT + "rewrite");
+        Assert.assertEquals(3, mHelper.numBlocked());
+        Assert.assertEquals(1, mHelper.numBlockedByType(ContentType.CONTENT_TYPE_SCRIPT));
+        Assert.assertEquals(2, mHelper.numBlockedByType(ContentType.CONTENT_TYPE_MEDIA));
+        Assert.assertTrue(
+                mHelper.isBlocked(
+                        TestPagesHelperBase.TESTPAGES_RESOURCES_ROOT + "rewrite/audio.mp3"));
+        Assert.assertTrue(
+                mHelper.isBlocked(
+                        TestPagesHelperBase.TESTPAGES_RESOURCES_ROOT + "rewrite/video.mp4"));
+        Assert.assertTrue(
+                mHelper.isBlocked(
+                        TestPagesHelperBase.TESTPAGES_RESOURCES_ROOT + "rewrite/script.js"));
+    }
+
+    @Test
+    @LargeTest
+    @Feature({"adblock"})
+    public void testVerifyMatchCaseFilter() throws Exception {
+        mHelper.loadUrl(TestPagesHelperBase.FILTER_TESTPAGES_TESTCASES_ROOT + "match-case");
+        Assert.assertEquals(2, mHelper.numBlocked());
+        Assert.assertEquals(2, mHelper.numBlockedByType(ContentType.CONTENT_TYPE_IMAGE));
+        TestVerificationUtils.verifyHiddenCount(mHelper, 2, "img[data-expectedresult='fail']");
+    }
+
+    @Test
+    @LargeTest
+    @Feature({"adblock"})
+    public void testVerifyThirdPartyFilter() throws Exception {
+        mHelper.loadUrl(TestPagesHelperBase.FILTER_TESTPAGES_TESTCASES_ROOT + "third-party");
+        Assert.assertEquals(2, mHelper.numBlocked());
+        Assert.assertEquals(2, mHelper.numBlockedByType(ContentType.CONTENT_TYPE_IMAGE));
+        TestVerificationUtils.verifyHiddenCount(mHelper, 2, "img[data-expectedresult='fail']");
+        TestVerificationUtils.verifyDisplayedCount(mHelper, 2, "img[data-expectedresult='pass']");
+    }
+
+    @Test
+    @LargeTest
+    @Feature({"adblock"})
+    public void testVerifyOtherFilter() throws Exception {
+        mHelper.loadUrl(TestPagesHelperBase.FILTER_TESTPAGES_TESTCASES_ROOT + "other");
+        Assert.assertEquals(1, mHelper.numBlocked());
+        Assert.assertEquals(1, mHelper.numBlockedByType(ContentType.CONTENT_TYPE_OTHER));
+        Assert.assertTrue(
+                mHelper.isBlocked(
+                        TestPagesHelperBase.TESTPAGES_RESOURCES_ROOT + "other/image.png"));
+    }
+
+    @Test
+    @LargeTest
+    @Feature({"adblock"})
+    public void testVerifyDomainFilter() throws Exception {
+        mHelper.loadUrl(TestPagesHelperBase.FILTER_TESTPAGES_TESTCASES_ROOT + "domain");
+        Assert.assertEquals(2, mHelper.numBlocked());
+        Assert.assertEquals(2, mHelper.numBlockedByType(ContentType.CONTENT_TYPE_IMAGE));
+        Assert.assertTrue(
+                mHelper.isBlocked(
+                        TestPagesHelperBase.TESTPAGES_RESOURCES_ROOT
+                                + "domain/static/target/image.png"));
+        Assert.assertTrue(
+                mHelper.isBlocked(
+                        TestPagesHelperBase.TESTPAGES_RESOURCES_ROOT + "domain/dynamic/image.png"));
+        TestVerificationUtils.verifyHiddenCount(mHelper, 2, "img[data-expectedresult='fail']");
+    }
+
+    @Test
+    @LargeTest
+    @Feature({"adblock"})
+    public void testVerifyPingFilter() throws Exception {
+        mHelper.loadUrl(TestPagesHelperBase.FILTER_TESTPAGES_TESTCASES_ROOT + "ping");
+        // Ping action not yet triggered
+        Assert.assertEquals(0, mHelper.numBlocked());
+        final CountDownLatch countDownLatch = new CountDownLatch(1);
+        mHelper.setOnAdMatchedLatch(countDownLatch);
+        // Trigger ping action
+        JavaScriptUtils.executeJavaScriptAndWaitForResult(
+                mHelper.getWebContents(),
+                "document.getElementById(\"script-ping-trigger\").click()");
+        // Wait with 10 seconds max timeout
+        countDownLatch.await(10, TimeUnit.SECONDS);
+        Assert.assertEquals(1, mHelper.numBlocked());
+    }
+
+    @Test
+    @LargeTest
+    @Feature({"adblock"})
+    public void testVerifyPingFilterException() throws Exception {
+        mHelper.loadUrl(TestPagesHelperBase.EXCEPTION_TESTPAGES_TESTCASES_ROOT + "ping");
+        // Ping action not yet triggered
+        Assert.assertEquals(0, mHelper.numAllowed());
+        final CountDownLatch countDownLatch = new CountDownLatch(1);
+        mHelper.setOnAdMatchedLatch(countDownLatch);
+        // Trigger ping action
+        JavaScriptUtils.executeJavaScriptAndWaitForResult(
+                mHelper.getWebContents(),
+                "document.getElementsByClassName(\"testcase-trigger\")[0].click()");
+        // Wait with 10 seconds max timeout
+        countDownLatch.await(10, TimeUnit.SECONDS);
+        Assert.assertEquals(1, mHelper.numAllowed());
+        Assert.assertEquals(0, mHelper.numBlocked());
+    }
+}
diff --git a/components/adblock/android/javatests/src/org/chromium/components/adblock/TestPagesHeaderFilterTestBase.java b/components/adblock/android/javatests/src/org/chromium/components/adblock/TestPagesHeaderFilterTestBase.java
new file mode 100644
index 0000000000..7858332dd1
--- /dev/null
+++ b/components/adblock/android/javatests/src/org/chromium/components/adblock/TestPagesHeaderFilterTestBase.java
@@ -0,0 +1,102 @@
+/*
+ * This file is part of eyeo Chromium SDK,
+ * Copyright (C) 2006-present eyeo GmbH
+ *
+ * eyeo Chromium SDK is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 3 as
+ * published by the Free Software Foundation.
+ *
+ * eyeo Chromium SDK is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with eyeo Chromium SDK.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+package org.chromium.components.adblock;
+
+import androidx.test.filters.LargeTest;
+
+import org.junit.Assert;
+import org.junit.Test;
+
+import org.chromium.base.test.util.Feature;
+
+public abstract class TestPagesHeaderFilterTestBase {
+    public static final String HEADER_TESTPAGES_URL =
+            TestPagesHelperBase.FILTER_TESTPAGES_TESTCASES_ROOT + "header";
+    public static final String HEADER_EXCEPTIONS_TESTPAGES_URL =
+            TestPagesHelperBase.EXCEPTION_TESTPAGES_TESTCASES_ROOT + "header";
+    private TestPagesHelperBase mHelper;
+
+    protected void setUp(TestPagesHelperBase helper) {
+        mHelper = helper;
+        mHelper.addFilterList(TestPagesHelperBase.TESTPAGES_SUBSCRIPTION);
+    }
+
+    @Test
+    @LargeTest
+    @Feature({"adblock"})
+    public void testHeaderFilterScript() throws Exception {
+        mHelper.loadUrl(HEADER_TESTPAGES_URL);
+        Assert.assertEquals(1, mHelper.numBlockedByType(ContentType.CONTENT_TYPE_SCRIPT));
+        Assert.assertTrue(
+                mHelper.isBlocked(
+                        String.format(
+                                "https://%s/testfiles/header/script.js",
+                                TestPagesHelperBase.TESTPAGES_DOMAIN)));
+        TestVerificationUtils.verifyDisplayedCount(
+                mHelper, 0, "div#functionproperty-target > div[data-expectedresult='fail']");
+    }
+
+    @Test
+    @LargeTest
+    @Feature({"adblock"})
+    public void testHeaderFilterImagePlusImageAndComma() throws Exception {
+        mHelper.loadUrl(HEADER_TESTPAGES_URL);
+        Assert.assertEquals(2, mHelper.numBlockedByType(ContentType.CONTENT_TYPE_IMAGE));
+        Assert.assertTrue(
+                mHelper.isBlocked(
+                        String.format(
+                                "https://%s/testfiles/header/image.png",
+                                TestPagesHelperBase.TESTPAGES_DOMAIN)));
+        TestVerificationUtils.verifyDisplayedCount(mHelper, 0, "img[id='image-fail-1']");
+        Assert.assertTrue(
+                mHelper.isBlocked(
+                        String.format(
+                                "https://%s/testfiles/header/image2.png",
+                                TestPagesHelperBase.TESTPAGES_DOMAIN)));
+        TestVerificationUtils.verifyDisplayedCount(mHelper, 0, "img[id='comma-fail-1']");
+    }
+
+    @Test
+    @LargeTest
+    @Feature({"adblock"})
+    public void testHeaderFilterStylesheet() throws Exception {
+        mHelper.loadUrl(HEADER_TESTPAGES_URL);
+        Assert.assertEquals(1, mHelper.numBlockedByType(ContentType.CONTENT_TYPE_STYLESHEET));
+        Assert.assertTrue(
+                mHelper.isBlocked(
+                        String.format(
+                                "https://%s/testfiles/header/stylesheet.css",
+                                TestPagesHelperBase.TESTPAGES_DOMAIN)));
+    }
+
+    @Test
+    @LargeTest
+    @Feature({"adblock"})
+    public void testHeaderFilterException() throws Exception {
+        mHelper.loadUrl(HEADER_EXCEPTIONS_TESTPAGES_URL);
+        Assert.assertEquals(1, mHelper.numAllowed());
+        Assert.assertEquals(1, mHelper.numAllowedByType(ContentType.CONTENT_TYPE_IMAGE));
+        Assert.assertTrue(
+                mHelper.isAllowed(
+                        String.format(
+                                "https://%s/testfiles/header_exception/image.png",
+                                TestPagesHelperBase.TESTPAGES_DOMAIN)));
+        TestVerificationUtils.verifyDisplayedCount(
+                mHelper, 1, "img[id='image-header-exception-pass-1']");
+    }
+}
diff --git a/components/adblock/android/javatests/src/org/chromium/components/adblock/TestPagesHelperBase.java b/components/adblock/android/javatests/src/org/chromium/components/adblock/TestPagesHelperBase.java
new file mode 100644
index 0000000000..521f453802
--- /dev/null
+++ b/components/adblock/android/javatests/src/org/chromium/components/adblock/TestPagesHelperBase.java
@@ -0,0 +1,230 @@
+/*
+ * This file is part of eyeo Chromium SDK,
+ * Copyright (C) 2006-present eyeo GmbH
+ *
+ * eyeo Chromium SDK is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 3 as
+ * published by the Free Software Foundation.
+ *
+ * eyeo Chromium SDK is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with eyeo Chromium SDK.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+package org.chromium.components.adblock;
+
+import org.junit.Assert;
+
+import org.chromium.base.Log;
+import org.chromium.base.test.util.CallbackHelper;
+import org.chromium.content_public.browser.BrowserContextHandle;
+import org.chromium.content_public.browser.WebContents;
+import org.chromium.content_public.browser.test.util.TestThreadUtils;
+
+import java.net.MalformedURLException;
+import java.net.URL;
+import java.util.Set;
+import java.util.concurrent.CountDownLatch;
+import java.util.concurrent.TimeUnit;
+import java.util.concurrent.TimeoutException;
+
+public abstract class TestPagesHelperBase
+        implements FilteringConfiguration.ConfigurationChangeObserver {
+    public static final String TESTPAGES_DOMAIN = "abptestpages.org";
+    public static final String TESTPAGES_BASE_URL = "https://" + TESTPAGES_DOMAIN;
+    public static final String TESTPAGES_TESTCASES_ROOT = TESTPAGES_BASE_URL + "/en/";
+    public static final String FILTER_TESTPAGES_TESTCASES_ROOT =
+            TESTPAGES_TESTCASES_ROOT + "filters/";
+    public static final String EXCEPTION_TESTPAGES_TESTCASES_ROOT =
+            TESTPAGES_TESTCASES_ROOT + "exceptions/";
+    public static final String CIRCUMVENTION_TESTPAGES_TESTCASES_ROOT =
+            TESTPAGES_TESTCASES_ROOT + "circumvention/";
+    public static final String SITEKEY_TESTPAGES_TESTCASES_ROOT =
+            EXCEPTION_TESTPAGES_TESTCASES_ROOT + "sitekey_mv2";
+    public static final String SNIPPETS_TESTPAGES_TESTCASES_ROOT =
+            TESTPAGES_TESTCASES_ROOT + "snippets/";
+    public static final String TESTPAGES_RESOURCES_ROOT = TESTPAGES_BASE_URL + "/testfiles/";
+    public static final String TESTPAGES_SUBSCRIPTION =
+            TESTPAGES_TESTCASES_ROOT + "abp-testcase-subscription.txt";
+    public static final int TEST_TIMEOUT_SEC = 30;
+
+    private FilteringConfiguration mAdblockFilteringConfiguration;
+    private ResourceClassificationNotifier mResourceClassificationNotifier;
+
+    private URL mTestSubscriptionUrl;
+    private final CallbackHelper mHelper = new CallbackHelper();
+    private final TestResourceFilteringObserver mObserver = new TestResourceFilteringObserver();
+    private final TestSubscriptionUpdatedObserver mSubscriptionUpdateObserver =
+            new TestSubscriptionUpdatedObserver();
+
+    private class TestSubscriptionUpdatedObserver
+            implements FilteringConfiguration.SubscriptionUpdateObserver {
+        @Override
+        public void onSubscriptionDownloaded(final URL url) {
+            if (mTestSubscriptionUrl == null) return;
+            if (url.toString().contains(mTestSubscriptionUrl.toString())) {
+                Log.d(
+                        "TestSubscriptionUpdatedObserver",
+                        "Notify subscription updated: " + url.toString());
+                mHelper.notifyCalled();
+            }
+        }
+    }
+
+    public void setUp() {
+        TestThreadUtils.runOnUiThreadBlocking(
+                () -> {
+                    mResourceClassificationNotifier =
+                            ResourceClassificationNotifier.getInstance(getBrowserContext());
+                    mResourceClassificationNotifier.addResourceFilteringObserver(mObserver);
+                    // Remove "adblock" configuration to simply drop all default filter lists
+                    FilteringConfiguration.removeConfiguration("adblock", getBrowserContext());
+                    mAdblockFilteringConfiguration =
+                            FilteringConfiguration.createConfiguration(
+                                    "adblock", getBrowserContext());
+                    Assert.assertEquals(0, mAdblockFilteringConfiguration.getFilterLists().size());
+                    mAdblockFilteringConfiguration.addObserver(this);
+                    mAdblockFilteringConfiguration.addSubscriptionUpdateObserver(
+                            mSubscriptionUpdateObserver);
+                });
+    }
+
+    @Override
+    public void onEnabledStateChanged() {}
+
+    @Override
+    public void onFilterListsChanged() {}
+
+    @Override
+    public void onAllowedDomainsChanged() {}
+
+    @Override
+    public void onCustomFiltersChanged() {
+        mHelper.notifyCalled();
+    }
+
+    public void addFilterList(final String filterListUrl) {
+        mTestSubscriptionUrl = null;
+        try {
+            mTestSubscriptionUrl = new URL(filterListUrl);
+            mObserver.setExpectedSubscriptionUrl(mTestSubscriptionUrl);
+        } catch (MalformedURLException ignored) {
+        }
+        Assert.assertNotNull("Test subscription url", mTestSubscriptionUrl);
+        TestThreadUtils.runOnUiThreadBlocking(
+                () -> {
+                    mAdblockFilteringConfiguration.addFilterList(mTestSubscriptionUrl);
+                });
+        try {
+            mHelper.waitForCallback(0, 1, TEST_TIMEOUT_SEC, TimeUnit.SECONDS);
+        } catch (TimeoutException e) {
+            Assert.assertEquals(
+                    "Test subscription was properly added", "Failed to add test subscription");
+        }
+    }
+
+    public void addCustomFilter(final String filter) {
+        TestThreadUtils.runOnUiThreadBlocking(
+                () -> {
+                    mAdblockFilteringConfiguration.addCustomFilter(filter);
+                });
+        try {
+            mHelper.waitForCallback(0, 1, TEST_TIMEOUT_SEC, TimeUnit.SECONDS);
+        } catch (TimeoutException e) {
+            Assert.assertEquals(
+                    "Test custom filter was properly added", "Failed to add test custom filter");
+        }
+    }
+
+    public void tearDown() {
+        TestThreadUtils.runOnUiThreadBlocking(
+                () -> {
+                    if (mAdblockFilteringConfiguration != null) {
+                        mAdblockFilteringConfiguration.removeSubscriptionUpdateObserver(
+                                mSubscriptionUpdateObserver);
+                        mAdblockFilteringConfiguration.removeObserver(this);
+                    }
+                    if (mResourceClassificationNotifier != null) {
+                        mResourceClassificationNotifier.removeResourceFilteringObserver(mObserver);
+                    }
+                });
+    }
+
+    // Note: Use either setOnAdMatchedLatch XOR setOnAdMatchedExpectations
+    public void setOnAdMatchedLatch(final CountDownLatch countDownLatch) {
+        Assert.assertTrue(
+                mObserver.countDownLatch == null || mObserver.countDownLatch.getCount() == 0);
+        mObserver.countDownLatch = countDownLatch;
+    }
+
+    // Note: Use either setOnAdMatchedLatch XOR setOnAdMatchedExpectations
+    public CountDownLatch setOnAdMatchedExpectations(
+            final Set<String> onBlocked, final Set<String> onAllowed) {
+        Assert.assertTrue(
+                mObserver.countDownLatch == null || mObserver.countDownLatch.getCount() == 0);
+        mObserver.countDownLatch = new CountDownLatch(1);
+        mObserver.expectedBlocked = onBlocked;
+        mObserver.expectedAllowed = onAllowed;
+        return mObserver.countDownLatch;
+    }
+
+    public boolean isBlocked(final String url) {
+        return mObserver.isBlocked(url);
+    }
+
+    public boolean isPopupBlocked(final String url) {
+        return mObserver.isPopupBlocked(url);
+    }
+
+    public int numBlockedByType(final ContentType type) {
+        return mObserver.numBlockedByType(type);
+    }
+
+    public int numBlockedPopups() {
+        return mObserver.numBlockedPopups();
+    }
+
+    public int numAllowedByType(final ContentType type) {
+        return mObserver.numAllowedByType(type);
+    }
+
+    public int numAllowedPopups() {
+        return mObserver.numAllowedPopups();
+    }
+
+    public boolean isAllowed(final String url) {
+        return mObserver.isAllowed(url);
+    }
+
+    public boolean isPageAllowed(final String url) {
+        return mObserver.isPageAllowed(url);
+    }
+
+    public boolean isPopupAllowed(final String url) {
+        return mObserver.isPopupAllowed(url);
+    }
+
+    public void loadUrlWaitForContent(final String url) throws Exception {
+        loadUrl(url);
+        TestVerificationUtils.verifyCondition(
+                this, "document.getElementsByClassName('testcase-waiting-content').length == 0");
+    }
+
+    public abstract void loadUrl(final String url) throws Exception;
+
+    public abstract BrowserContextHandle getBrowserContext();
+
+    public abstract WebContents getWebContents();
+
+    public int numBlocked() {
+        return mObserver.blockedInfos.size();
+    }
+
+    public int numAllowed() {
+        return mObserver.allowedInfos.size();
+    }
+}
diff --git a/components/adblock/android/javatests/src/org/chromium/components/adblock/TestPagesInlineCssTestBase.java b/components/adblock/android/javatests/src/org/chromium/components/adblock/TestPagesInlineCssTestBase.java
new file mode 100644
index 0000000000..f5fa93e60d
--- /dev/null
+++ b/components/adblock/android/javatests/src/org/chromium/components/adblock/TestPagesInlineCssTestBase.java
@@ -0,0 +1,94 @@
+/*
+ * This file is part of eyeo Chromium SDK,
+ * Copyright (C) 2006-present eyeo GmbH
+ *
+ * eyeo Chromium SDK is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 3 as
+ * published by the Free Software Foundation.
+ *
+ * eyeo Chromium SDK is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with eyeo Chromium SDK.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+package org.chromium.components.adblock;
+
+import androidx.test.filters.LargeTest;
+
+import org.junit.Test;
+
+import org.chromium.base.test.util.Feature;
+
+import java.util.concurrent.TimeoutException;
+
+public abstract class TestPagesInlineCssTestBase {
+    public static final String INLINE_CSS_TESTPAGES_URL =
+            TestPagesHelperBase.FILTER_TESTPAGES_TESTCASES_ROOT + "inline-css";
+    private TestPagesHelperBase mHelper;
+
+    protected void setUp(TestPagesHelperBase helper) {
+        mHelper = helper;
+    }
+
+    private void verifyIsRed(final String elemId) throws TimeoutException {
+        TestVerificationUtils.expectResourceStyleProperty(
+                mHelper, elemId, "backgroundColor", "rgb(199, 13, 44)");
+    }
+
+    private void verifyIsGreen(final String elemId) throws TimeoutException {
+        TestVerificationUtils.expectResourceStyleProperty(
+                mHelper, elemId, "backgroundColor", "rgb(13, 199, 75)");
+    }
+
+    @Test
+    @LargeTest
+    @Feature({"adblock"})
+    public void testInlineCssWithEhSelector() throws Exception {
+        final String elemId = "inline-css-id";
+        mHelper.loadUrl(INLINE_CSS_TESTPAGES_URL);
+        verifyIsRed(elemId);
+        mHelper.addFilterList(TestPagesHelperBase.TESTPAGES_SUBSCRIPTION);
+        mHelper.loadUrl(INLINE_CSS_TESTPAGES_URL);
+        verifyIsGreen(elemId);
+    }
+
+    @Test
+    @LargeTest
+    @Feature({"adblock"})
+    public void testInlineCssWithEheSelector() throws Exception {
+        final String elemId = "basic-abp-properties-usage-with-inline-css-fail-1";
+        mHelper.loadUrl(INLINE_CSS_TESTPAGES_URL + "-extended");
+        verifyIsRed(elemId);
+        mHelper.addFilterList(TestPagesHelperBase.TESTPAGES_SUBSCRIPTION);
+        mHelper.loadUrl(INLINE_CSS_TESTPAGES_URL + "-extended");
+        verifyIsGreen(elemId);
+    }
+
+    @Test
+    @LargeTest
+    @Feature({"adblock"})
+    public void testInlineCssWithEheSelectorInversion() throws Exception {
+        final String elemId = "basic-not-abp-properties-usage-with-inline-css-fail";
+        mHelper.loadUrl(INLINE_CSS_TESTPAGES_URL + "-extended-inversion");
+        verifyIsRed(elemId);
+        mHelper.addFilterList(TestPagesHelperBase.TESTPAGES_SUBSCRIPTION);
+        mHelper.loadUrl(INLINE_CSS_TESTPAGES_URL + "-extended-inversion");
+        verifyIsGreen(elemId);
+    }
+
+    @Test
+    @LargeTest
+    @Feature({"adblock"})
+    public void testInlineCssOnDOMMutation() throws Exception {
+        final String elemId = "span-inline-css";
+        mHelper.loadUrlWaitForContent(INLINE_CSS_TESTPAGES_URL + "-on-DOM-mutation");
+        verifyIsRed(elemId);
+        mHelper.addFilterList(TestPagesHelperBase.TESTPAGES_SUBSCRIPTION);
+        mHelper.loadUrlWaitForContent(INLINE_CSS_TESTPAGES_URL + "-on-DOM-mutation");
+        verifyIsGreen(elemId);
+    }
+}
diff --git a/components/adblock/android/javatests/src/org/chromium/components/adblock/TestPagesRemoveTestBase.java b/components/adblock/android/javatests/src/org/chromium/components/adblock/TestPagesRemoveTestBase.java
new file mode 100644
index 0000000000..112b04178a
--- /dev/null
+++ b/components/adblock/android/javatests/src/org/chromium/components/adblock/TestPagesRemoveTestBase.java
@@ -0,0 +1,94 @@
+/*
+ * This file is part of eyeo Chromium SDK,
+ * Copyright (C) 2006-present eyeo GmbH
+ *
+ * eyeo Chromium SDK is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 3 as
+ * published by the Free Software Foundation.
+ *
+ * eyeo Chromium SDK is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with eyeo Chromium SDK.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+package org.chromium.components.adblock;
+
+import androidx.test.filters.LargeTest;
+
+import org.junit.Test;
+
+import org.chromium.base.test.util.Feature;
+
+import java.util.concurrent.TimeoutException;
+
+public abstract class TestPagesRemoveTestBase {
+    public static final String REMOVE_TESTPAGES_URL =
+            TestPagesHelperBase.FILTER_TESTPAGES_TESTCASES_ROOT + "remove";
+    private TestPagesHelperBase mHelper;
+
+    protected void setUp(TestPagesHelperBase helper) {
+        mHelper = helper;
+    }
+
+    private void verifyResourcePresent(final String elemId) throws TimeoutException {
+        TestVerificationUtils.verifyCondition(
+                mHelper, "document.getElementById('" + elemId + "') !=  null");
+    }
+
+    private void verifyResourceRemoved(final String elemId) throws TimeoutException {
+        TestVerificationUtils.verifyCondition(
+                mHelper, "document.getElementById('" + elemId + "') ==  null");
+    }
+
+    @Test
+    @LargeTest
+    @Feature({"adblock"})
+    public void testRemoveWithEhSelector() throws Exception {
+        final String elemId = "remove-id";
+        mHelper.loadUrl(REMOVE_TESTPAGES_URL);
+        verifyResourcePresent(elemId);
+        mHelper.addFilterList(TestPagesHelperBase.TESTPAGES_SUBSCRIPTION);
+        mHelper.loadUrl(REMOVE_TESTPAGES_URL);
+        verifyResourceRemoved(elemId);
+    }
+
+    @Test
+    @LargeTest
+    @Feature({"adblock"})
+    public void testRemoveWithEheSelector() throws Exception {
+        final String elemId = "basic-abp-properties-usage-with-remove-fail-1";
+        mHelper.loadUrl(REMOVE_TESTPAGES_URL + "-extended");
+        verifyResourcePresent(elemId);
+        mHelper.addFilterList(TestPagesHelperBase.TESTPAGES_SUBSCRIPTION);
+        mHelper.loadUrl(REMOVE_TESTPAGES_URL + "-extended");
+        verifyResourceRemoved(elemId);
+    }
+
+    @Test
+    @LargeTest
+    @Feature({"adblock"})
+    public void testRemoveWithEheSelectorInversion() throws Exception {
+        final String elemId = "basic-not-abp-properties-usage-with-remove-fail";
+        mHelper.loadUrl(REMOVE_TESTPAGES_URL + "-extended-inversion");
+        verifyResourcePresent(elemId);
+        mHelper.addFilterList(TestPagesHelperBase.TESTPAGES_SUBSCRIPTION);
+        mHelper.loadUrl(REMOVE_TESTPAGES_URL + "-extended-inversion");
+        verifyResourceRemoved(elemId);
+    }
+
+    @Test
+    @LargeTest
+    @Feature({"adblock"})
+    public void testRemoveOnDOMMutation() throws Exception {
+        final String elemId = "input-remove";
+        mHelper.loadUrlWaitForContent(REMOVE_TESTPAGES_URL + "-on-DOM-mutation");
+        verifyResourcePresent(elemId);
+        mHelper.addFilterList(TestPagesHelperBase.TESTPAGES_SUBSCRIPTION);
+        mHelper.loadUrlWaitForContent(REMOVE_TESTPAGES_URL + "-on-DOM-mutation");
+        verifyResourceRemoved(elemId);
+    }
+}
diff --git a/components/adblock/android/javatests/src/org/chromium/components/adblock/TestPagesRewriteTestBase.java b/components/adblock/android/javatests/src/org/chromium/components/adblock/TestPagesRewriteTestBase.java
new file mode 100644
index 0000000000..5f3a8b15fc
--- /dev/null
+++ b/components/adblock/android/javatests/src/org/chromium/components/adblock/TestPagesRewriteTestBase.java
@@ -0,0 +1,175 @@
+/*
+ * This file is part of eyeo Chromium SDK,
+ * Copyright (C) 2006-present eyeo GmbH
+ *
+ * eyeo Chromium SDK is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 3 as
+ * published by the Free Software Foundation.
+ *
+ * eyeo Chromium SDK is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with eyeo Chromium SDK.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+package org.chromium.components.adblock;
+
+import androidx.test.filters.LargeTest;
+
+import org.junit.Test;
+
+import org.chromium.base.test.util.Feature;
+
+public abstract class TestPagesRewriteTestBase {
+    public static final String REWRITE_TEST_URL =
+            TestPagesHelperBase.FILTER_TESTPAGES_TESTCASES_ROOT + "rewrite";
+    private TestPagesHelperBase mHelper;
+
+    protected void setUp(TestPagesHelperBase helper) {
+        mHelper = helper;
+    }
+
+    @Test
+    @LargeTest
+    @Feature({"adblock"})
+    public void testRewriteScript() throws Exception {
+        mHelper.addCustomFilter(
+                String.format(
+                        "||%s/testfiles/rewrite/*.js$rewrite=abp-resource:blank-js,domain=%s",
+                        TestPagesHelperBase.TESTPAGES_DOMAIN,
+                        TestPagesHelperBase.TESTPAGES_DOMAIN));
+        mHelper.loadUrl(REWRITE_TEST_URL);
+        TestVerificationUtils.verifyDisplayedCount(mHelper, 0, "div[id='script-fail-1']");
+    }
+
+    @Test
+    @LargeTest
+    @Feature({"adblock"})
+    public void testRewriteStylesheet() throws Exception {
+        mHelper.addCustomFilter(
+                String.format(
+                        "||%s/testfiles/rewrite/*.css$rewrite=abp-resource:blank-css,domain=%s",
+                        TestPagesHelperBase.TESTPAGES_DOMAIN,
+                        TestPagesHelperBase.TESTPAGES_DOMAIN));
+        mHelper.loadUrl(REWRITE_TEST_URL);
+        TestVerificationUtils.verifyGreenBackground(mHelper, "stylesheet-target");
+    }
+
+    @Test
+    @LargeTest
+    @Feature({"adblock"})
+    public void testRewriteSubdocument() throws Exception {
+        mHelper.addCustomFilter(
+                String.format(
+                        "||%s/testfiles/rewrite/*.html$rewrite=abp-resource:blank-html,domain=%s",
+                        TestPagesHelperBase.TESTPAGES_DOMAIN,
+                        TestPagesHelperBase.TESTPAGES_DOMAIN));
+        mHelper.loadUrl(REWRITE_TEST_URL);
+        TestVerificationUtils.verifySelfTestPass(mHelper, "subdocument-target");
+    }
+
+    @Test
+    @LargeTest
+    @Feature({"adblock"})
+    public void testRewriteText() throws Exception {
+        mHelper.addCustomFilter(
+                String.format(
+                        "||%s/testfiles/rewrite/*.txt$rewrite=abp-resource:blank-text,domain=%s",
+                        TestPagesHelperBase.TESTPAGES_DOMAIN,
+                        TestPagesHelperBase.TESTPAGES_DOMAIN));
+        mHelper.loadUrl(REWRITE_TEST_URL);
+        TestVerificationUtils.verifySelfTestPass(mHelper, "text-status");
+    }
+
+    @Test
+    @LargeTest
+    @Feature({"adblock"})
+    public void testRewriteGif() throws Exception {
+        mHelper.addCustomFilter(
+                String.format(
+                        "||%s/testfiles/rewrite/1x1.gif$rewrite=abp-resource:1x1-transparent-gif,domain=%s",
+                        TestPagesHelperBase.TESTPAGES_DOMAIN,
+                        TestPagesHelperBase.TESTPAGES_DOMAIN));
+        mHelper.loadUrl(REWRITE_TEST_URL);
+        TestVerificationUtils.verifySelfTestPass(mHelper, "1x1-target");
+    }
+
+    @Test
+    @LargeTest
+    @Feature({"adblock"})
+    public void testRewrite2x2Png() throws Exception {
+        mHelper.addCustomFilter(
+                String.format(
+                        "||%s/testfiles/rewrite/2x2.png$rewrite=abp-resource:2x2-transparent-png,domain=%s",
+                        TestPagesHelperBase.TESTPAGES_DOMAIN,
+                        TestPagesHelperBase.TESTPAGES_DOMAIN));
+        mHelper.loadUrl(REWRITE_TEST_URL);
+        TestVerificationUtils.verifySelfTestPass(mHelper, "2x2-target");
+    }
+
+    @Test
+    @LargeTest
+    @Feature({"adblock"})
+    public void testRewrite3x2Png() throws Exception {
+        mHelper.addCustomFilter(
+                String.format(
+                        "||%s/testfiles/rewrite/3x2.png$rewrite=abp-resource:3x2-transparent-png,domain=%s",
+                        TestPagesHelperBase.TESTPAGES_DOMAIN,
+                        TestPagesHelperBase.TESTPAGES_DOMAIN));
+        mHelper.loadUrl(REWRITE_TEST_URL);
+        TestVerificationUtils.verifySelfTestPass(mHelper, "3x2-target");
+    }
+
+    @Test
+    @LargeTest
+    @Feature({"adblock"})
+    public void testRewrite32x32Png() throws Exception {
+        mHelper.addCustomFilter(
+                String.format(
+                        "||%s/testfiles/rewrite/32x32.png$rewrite=abp-resource:32x32-transparent-png,"
+                            + "domain=%s",
+                        TestPagesHelperBase.TESTPAGES_DOMAIN,
+                        TestPagesHelperBase.TESTPAGES_DOMAIN));
+        mHelper.loadUrl(REWRITE_TEST_URL);
+        TestVerificationUtils.verifySelfTestPass(mHelper, "32x32-target");
+    }
+
+    @Test
+    @LargeTest
+    @Feature({"adblock"})
+    public void testRewriteAudio() throws Exception {
+        mHelper.addCustomFilter(
+                String.format(
+                        "||%s/testfiles/rewrite/*.mp3$rewrite=abp-resource:blank-mp3,domain=%s",
+                        TestPagesHelperBase.TESTPAGES_DOMAIN,
+                        TestPagesHelperBase.TESTPAGES_DOMAIN));
+        mHelper.loadUrl(REWRITE_TEST_URL);
+        final String js_verification_code =
+                "document.getElementById('audio-area') && "
+                        + "document.getElementById('audio-area').lastChild && "
+                        + "document.getElementById('audio-area').lastChild.getAttribute"
+                        + "('data-expectedresult') == \"pass\"";
+        TestVerificationUtils.verifyCondition(mHelper, js_verification_code);
+    }
+
+    @Test
+    @LargeTest
+    @Feature({"adblock"})
+    public void testRewriteVideo() throws Exception {
+        mHelper.addCustomFilter(
+                String.format(
+                        "||%s/testfiles/rewrite/*.mp4$rewrite=abp-resource:blank-mp4,domain=%s",
+                        TestPagesHelperBase.TESTPAGES_DOMAIN,
+                        TestPagesHelperBase.TESTPAGES_DOMAIN));
+        mHelper.loadUrl(REWRITE_TEST_URL);
+        final String js_verification_code =
+                "document.getElementById('video-area') && "
+                        + "document.getElementById('video-area').lastChild && "
+                        + "document.getElementById('video-area').lastChild.getAttribute"
+                        + "('data-expectedresult') == \"pass\"";
+        TestVerificationUtils.verifyCondition(mHelper, js_verification_code);
+    }
+}
diff --git a/components/adblock/android/javatests/src/org/chromium/components/adblock/TestPagesSiteKeyTestBase.java b/components/adblock/android/javatests/src/org/chromium/components/adblock/TestPagesSiteKeyTestBase.java
new file mode 100644
index 0000000000..89ffea6969
--- /dev/null
+++ b/components/adblock/android/javatests/src/org/chromium/components/adblock/TestPagesSiteKeyTestBase.java
@@ -0,0 +1,51 @@
+/*
+ * This file is part of eyeo Chromium SDK,
+ * Copyright (C) 2006-present eyeo GmbH
+ *
+ * eyeo Chromium SDK is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 3 as
+ * published by the Free Software Foundation.
+ *
+ * eyeo Chromium SDK is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with eyeo Chromium SDK.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+package org.chromium.components.adblock;
+
+import androidx.test.filters.LargeTest;
+
+import org.junit.Assert;
+import org.junit.Test;
+
+import org.chromium.base.test.util.Feature;
+
+public abstract class TestPagesSiteKeyTestBase {
+    private TestPagesHelperBase mHelper;
+
+    protected void setUp(TestPagesHelperBase helper) {
+        mHelper = helper;
+        mHelper.addFilterList(TestPagesHelperBase.TESTPAGES_SUBSCRIPTION);
+    }
+
+    @Test
+    @LargeTest
+    @Feature({"adblock"})
+    public void testVerifySitekeyException() throws Exception {
+        mHelper.loadUrl(TestPagesHelperBase.SITEKEY_TESTPAGES_TESTCASES_ROOT);
+        Assert.assertEquals(1, mHelper.numBlocked());
+        Assert.assertTrue(
+                mHelper.isBlocked(
+                        TestPagesHelperBase.TESTPAGES_RESOURCES_ROOT + "sitekey/outofframe.png"));
+        Assert.assertEquals(1, mHelper.numAllowed());
+        Assert.assertTrue(
+                mHelper.isAllowed(
+                        TestPagesHelperBase.TESTPAGES_RESOURCES_ROOT + "sitekey/inframe.png"));
+        TestVerificationUtils.verifyHiddenCount(mHelper, 1, "img");
+        TestVerificationUtils.verifyHiddenCount(mHelper, 1, "div");
+    }
+}
diff --git a/components/adblock/android/javatests/src/org/chromium/components/adblock/TestPagesSnippetsTestBase.java b/components/adblock/android/javatests/src/org/chromium/components/adblock/TestPagesSnippetsTestBase.java
new file mode 100644
index 0000000000..7b78da1467
--- /dev/null
+++ b/components/adblock/android/javatests/src/org/chromium/components/adblock/TestPagesSnippetsTestBase.java
@@ -0,0 +1,538 @@
+/*
+ * This file is part of eyeo Chromium SDK,
+ * Copyright (C) 2006-present eyeo GmbH
+ *
+ * eyeo Chromium SDK is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 3 as
+ * published by the Free Software Foundation.
+ *
+ * eyeo Chromium SDK is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with eyeo Chromium SDK.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+package org.chromium.components.adblock;
+
+import androidx.test.filters.LargeTest;
+
+import org.junit.Test;
+
+import org.chromium.base.test.util.Feature;
+
+public abstract class TestPagesSnippetsTestBase {
+    private TestPagesHelperBase mHelper;
+
+    protected void setUp(TestPagesHelperBase helper) {
+        mHelper = helper;
+        mHelper.addFilterList(TestPagesHelperBase.TESTPAGES_SUBSCRIPTION);
+    }
+
+    @Test
+    @LargeTest
+    @Feature({"adblock"})
+    public void testAbortCurrentInlineScriptBasic() throws Exception {
+        mHelper.loadUrlWaitForContent(
+                TestPagesHelperBase.SNIPPETS_TESTPAGES_TESTCASES_ROOT
+                        + "abort-current-inline-script");
+        // All "Abort" snippets cancel creation of the target div, so it won't be hidden - it will
+        // not exist in DOM. Therefore we verify it's not displayed instead of verifying it's
+        // hidden.
+        TestVerificationUtils.verifyDisplayedCount(
+                mHelper, 0, "div#basic-target > div[data-expectedresult='fail']");
+    }
+
+    @Test
+    @LargeTest
+    @Feature({"adblock"})
+    public void testAbortCurrentInlineScriptSearch() throws Exception {
+        mHelper.loadUrlWaitForContent(
+                TestPagesHelperBase.SNIPPETS_TESTPAGES_TESTCASES_ROOT
+                        + "abort-current-inline-script");
+        TestVerificationUtils.verifyDisplayedCount(
+                mHelper, 0, "div#search-target > div[data-expectedresult='fail']");
+    }
+
+    @Test
+    @LargeTest
+    @Feature({"adblock"})
+    public void testAbortCurrentInlineScriptRegex() throws Exception {
+        mHelper.loadUrlWaitForContent(
+                TestPagesHelperBase.SNIPPETS_TESTPAGES_TESTCASES_ROOT
+                        + "abort-current-inline-script");
+        TestVerificationUtils.verifyDisplayedCount(
+                mHelper, 0, "div#regex-target > div[data-expectedresult='fail']");
+    }
+
+    @Test
+    @LargeTest
+    @Feature({"adblock"})
+    public void testAbortOnPropertyReadBasic() throws Exception {
+        mHelper.loadUrlWaitForContent(
+                TestPagesHelperBase.SNIPPETS_TESTPAGES_TESTCASES_ROOT + "abort-on-property-read");
+        TestVerificationUtils.verifyDisplayedCount(
+                mHelper, 0, "div#basic-target > div[data-expectedresult='fail']");
+    }
+
+    @Test
+    @LargeTest
+    @Feature({"adblock"})
+    public void testAbortOnPropertyReadSubProperty() throws Exception {
+        mHelper.loadUrlWaitForContent(
+                TestPagesHelperBase.SNIPPETS_TESTPAGES_TESTCASES_ROOT + "abort-on-property-read");
+        TestVerificationUtils.verifyDisplayedCount(
+                mHelper, 0, "div#subproperty-target > div[data-expectedresult='fail']");
+    }
+
+    @Test
+    @LargeTest
+    @Feature({"adblock"})
+    public void testAbortOnPropertyReadFunctionProperty() throws Exception {
+        mHelper.loadUrlWaitForContent(
+                TestPagesHelperBase.SNIPPETS_TESTPAGES_TESTCASES_ROOT + "abort-on-property-read");
+        TestVerificationUtils.verifyDisplayedCount(
+                mHelper, 0, "div#functionproperty-target > div[data-expectedresult='fail']");
+    }
+
+    @Test
+    @LargeTest
+    @Feature({"adblock"})
+    public void testAbortOnPropertyWriteBasic() throws Exception {
+        mHelper.loadUrlWaitForContent(
+                TestPagesHelperBase.SNIPPETS_TESTPAGES_TESTCASES_ROOT + "abort-on-property-write");
+        TestVerificationUtils.verifyDisplayedCount(
+                mHelper, 0, "div#basic-target > div[data-expectedresult='fail']");
+    }
+
+    @Test
+    @LargeTest
+    @Feature({"adblock"})
+    public void testAbortOnPropertyWriteSubProperty() throws Exception {
+        mHelper.loadUrlWaitForContent(
+                TestPagesHelperBase.SNIPPETS_TESTPAGES_TESTCASES_ROOT + "abort-on-property-write");
+        TestVerificationUtils.verifyDisplayedCount(
+                mHelper, 0, "div#subproperty-target > div[data-expectedresult='fail']");
+    }
+
+    @Test
+    @LargeTest
+    @Feature({"adblock"})
+    public void testAbortOnPropertyWriteFunctionProperty() throws Exception {
+        mHelper.loadUrlWaitForContent(
+                TestPagesHelperBase.SNIPPETS_TESTPAGES_TESTCASES_ROOT + "abort-on-property-write");
+        TestVerificationUtils.verifyDisplayedCount(
+                mHelper, 0, "div#functionproperty-target > div[data-expectedresult='fail']");
+    }
+
+    @Test
+    @LargeTest
+    @Feature({"adblock"})
+    public void testAbortOnIframePropertyReadBasic() throws Exception {
+        mHelper.loadUrlWaitForContent(
+                TestPagesHelperBase.SNIPPETS_TESTPAGES_TESTCASES_ROOT
+                        + "abort-on-iframe-property-read");
+        TestVerificationUtils.verifyDisplayedCount(
+                mHelper, 0, "div#basic-target > div[data-expectedresult='fail']");
+    }
+
+    @Test
+    @LargeTest
+    @Feature({"adblock"})
+    public void testAbortOnIframePropertyReadSubProperty() throws Exception {
+        mHelper.loadUrlWaitForContent(
+                TestPagesHelperBase.SNIPPETS_TESTPAGES_TESTCASES_ROOT
+                        + "abort-on-iframe-property-read");
+        TestVerificationUtils.verifyDisplayedCount(
+                mHelper, 0, "div#subproperty-target > div[data-expectedresult='fail']");
+    }
+
+    @Test
+    @LargeTest
+    @Feature({"adblock"})
+    public void testAbortOnIframePropertyReadMultipleProperties() throws Exception {
+        mHelper.loadUrlWaitForContent(
+                TestPagesHelperBase.SNIPPETS_TESTPAGES_TESTCASES_ROOT
+                        + "abort-on-iframe-property-read");
+        TestVerificationUtils.verifyDisplayedCount(
+                mHelper, 0, "div#multipleproperties-target > div[data-expectedresult='fail']");
+    }
+
+    @Test
+    @LargeTest
+    @Feature({"adblock"})
+    public void testAbortOnIframePropertyWriteBasic() throws Exception {
+        mHelper.loadUrlWaitForContent(
+                TestPagesHelperBase.SNIPPETS_TESTPAGES_TESTCASES_ROOT
+                        + "abort-on-iframe-property-write");
+        TestVerificationUtils.verifyDisplayedCount(
+                mHelper, 0, "div#basic-target > div[data-expectedresult='fail']");
+    }
+
+    @Test
+    @LargeTest
+    @Feature({"adblock"})
+    public void testAbortOnIframePropertyWriteSubProperty() throws Exception {
+        mHelper.loadUrlWaitForContent(
+                TestPagesHelperBase.SNIPPETS_TESTPAGES_TESTCASES_ROOT
+                        + "abort-on-iframe-property-write");
+        TestVerificationUtils.verifyDisplayedCount(
+                mHelper, 0, "div#subproperty-target > div[data-expectedresult='fail']");
+    }
+
+    @Test
+    @LargeTest
+    @Feature({"adblock"})
+    public void testAbortOnIframePropertyWriteMultipleProperties() throws Exception {
+        mHelper.loadUrlWaitForContent(
+                TestPagesHelperBase.SNIPPETS_TESTPAGES_TESTCASES_ROOT
+                        + "abort-on-iframe-property-write");
+        TestVerificationUtils.verifyDisplayedCount(
+                mHelper, 0, "div#multipleproperties-target > div[data-expectedresult='fail']");
+    }
+
+    @Test
+    @LargeTest
+    @Feature({"adblock"})
+    public void testHideIfContainsStatic() throws Exception {
+        mHelper.loadUrlWaitForContent(
+                TestPagesHelperBase.SNIPPETS_TESTPAGES_TESTCASES_ROOT + "hide-if-contains");
+        TestVerificationUtils.verifyHiddenCount(mHelper, 1, "p#hic-static-id");
+    }
+
+    @Test
+    @LargeTest
+    @Feature({"adblock"})
+    public void testHideIfContainsDynamic() throws Exception {
+        mHelper.loadUrlWaitForContent(
+                TestPagesHelperBase.SNIPPETS_TESTPAGES_TESTCASES_ROOT + "hide-if-contains");
+        TestVerificationUtils.verifyHiddenCount(mHelper, 1, "p#hic-dynamic-id");
+    }
+
+    @Test
+    @LargeTest
+    @Feature({"adblock"})
+    public void testHideIfContainsSearch() throws Exception {
+        mHelper.loadUrlWaitForContent(
+                TestPagesHelperBase.SNIPPETS_TESTPAGES_TESTCASES_ROOT + "hide-if-contains");
+        TestVerificationUtils.verifyHiddenCount(mHelper, 1, "div#search2-target > p.target");
+        TestVerificationUtils.verifyDisplayedCount(
+                mHelper, 1, "div#search1-target > p[data-expectedresult='pass']");
+    }
+
+    @Test
+    @LargeTest
+    @Feature({"adblock"})
+    public void testHideIfContainsRegex() throws Exception {
+        mHelper.loadUrlWaitForContent(
+                TestPagesHelperBase.SNIPPETS_TESTPAGES_TESTCASES_ROOT + "hide-if-contains");
+        // "hic-regex-1" does not match regex, should remain displayed.
+        TestVerificationUtils.verifyDisplayedCount(mHelper, 1, "p#hic-regex-1");
+
+        // "hic-regex-2" and "hic-regex-2" do match regex, should be hidden.
+        TestVerificationUtils.verifyHiddenCount(mHelper, 1, "p#hic-regex-2");
+        TestVerificationUtils.verifyHiddenCount(mHelper, 1, "p#hic-regex-3");
+    }
+
+    @Test
+    @LargeTest
+    @Feature({"adblock"})
+    public void testHideIfContainsFrame() throws Exception {
+        mHelper.loadUrlWaitForContent(
+                TestPagesHelperBase.SNIPPETS_TESTPAGES_TESTCASES_ROOT + "hide-if-contains");
+        TestVerificationUtils.verifyHiddenCount(mHelper, 1, "span#frame-target");
+    }
+
+    @Test
+    @LargeTest
+    @Feature({"adblock"})
+    public void testHideIfContainsAndMatchesStyleStatic() throws Exception {
+        mHelper.loadUrlWaitForContent(
+                TestPagesHelperBase.SNIPPETS_TESTPAGES_TESTCASES_ROOT
+                        + "hide-if-contains-and-matches-style");
+        TestVerificationUtils.verifyHiddenCount(
+                mHelper, 1, "div#static-usage-area > div[data-expectedresult='fail']");
+        TestVerificationUtils.verifyDisplayedCount(
+                mHelper, 1, "div#static-usage-area > div[data-expectedresult='pass']");
+    }
+
+    @Test
+    @LargeTest
+    @Feature({"adblock"})
+    public void testHideIfContainsAndMatchesStyleDynamic() throws Exception {
+        mHelper.loadUrlWaitForContent(
+                TestPagesHelperBase.SNIPPETS_TESTPAGES_TESTCASES_ROOT
+                        + "hide-if-contains-and-matches-style");
+        TestVerificationUtils.verifyHiddenCount(
+                mHelper, 1, "div#dynamic-target > div[data-expectedresult='fail']");
+        TestVerificationUtils.verifyDisplayedCount(
+                mHelper, 1, "div#dynamic-target > div[data-expectedresult='pass']");
+    }
+
+    @Test
+    @LargeTest
+    @Feature({"adblock"})
+    public void testHideIfContainsImage() throws Exception {
+        mHelper.loadUrlWaitForContent(
+                TestPagesHelperBase.SNIPPETS_TESTPAGES_TESTCASES_ROOT + "hide-if-contains-image");
+        TestVerificationUtils.verifyHiddenCount(mHelper, 2, "div[data-expectedresult='fail']");
+    }
+
+    @Test
+    @LargeTest
+    @Feature({"adblock"})
+    public void testHideIfContainsVisibleTextBasicUsage() throws Exception {
+        mHelper.loadUrlWaitForContent(
+                TestPagesHelperBase.SNIPPETS_TESTPAGES_TESTCASES_ROOT
+                        + "hide-if-contains-visible-text");
+        TestVerificationUtils.verifyHiddenCount(
+                mHelper, 1, "div#parent-basic > div[data-expectedresult='fail']");
+    }
+
+    @Test
+    @LargeTest
+    @Feature({"adblock"})
+    public void testHideIfContainsVisibleTextContentUsage() throws Exception {
+        mHelper.loadUrlWaitForContent(
+                TestPagesHelperBase.SNIPPETS_TESTPAGES_TESTCASES_ROOT
+                        + "hide-if-contains-visible-text");
+        TestVerificationUtils.verifyHiddenCount(
+                mHelper, 1, "div#parent-content > div[data-expectedresult='fail']");
+    }
+
+    @Test
+    @LargeTest
+    @Feature({"adblock"})
+    public void testHideIfHasAndMatchesStyleBasicUsage() throws Exception {
+        mHelper.loadUrlWaitForContent(
+                TestPagesHelperBase.SNIPPETS_TESTPAGES_TESTCASES_ROOT
+                        + "hide-if-has-and-matches-style");
+        TestVerificationUtils.verifyHiddenCount(
+                mHelper, 1, "div#basic-target > div[data-expectedresult='fail']");
+    }
+
+    @Test
+    @LargeTest
+    @Feature({"adblock"})
+    public void testHideIfHasAndMatchesStyleLegitElements() throws Exception {
+        mHelper.loadUrlWaitForContent(
+                TestPagesHelperBase.SNIPPETS_TESTPAGES_TESTCASES_ROOT
+                        + "hide-if-has-and-matches-style");
+        TestVerificationUtils.verifyDisplayedCount(
+                mHelper, 1, "div#comments-target > div[data-expectedresult='pass']");
+    }
+
+    @Test
+    @LargeTest
+    @Feature({"adblock"})
+    public void testHideIfLabeledBy() throws Exception {
+        mHelper.loadUrlWaitForContent(
+                TestPagesHelperBase.SNIPPETS_TESTPAGES_TESTCASES_ROOT + "hide-if-labelled-by");
+        TestVerificationUtils.verifyHiddenCount(mHelper, 1, "div[data-expectedresult='fail']");
+        TestVerificationUtils.verifyDisplayedCount(mHelper, 1, "div[data-expectedresult='pass']");
+    }
+
+    @Test
+    @LargeTest
+    @Feature({"adblock"})
+    public void testHideIfMatchesXPathBasicStaticUsage() throws Exception {
+        mHelper.loadUrlWaitForContent(
+                TestPagesHelperBase.SNIPPETS_TESTPAGES_TESTCASES_ROOT + "hide-if-matches-xpath");
+        TestVerificationUtils.verifyHiddenCount(
+                mHelper, 1, "div#basic-static-usage-area > div[data-expectedresult='fail']");
+        TestVerificationUtils.verifyDisplayedCount(
+                mHelper, 1, "div#basic-static-usage-area > div[data-expectedresult='pass']");
+    }
+
+    @Test
+    @LargeTest
+    @Feature({"adblock"})
+    public void testHideIfMatchesXPath3BasicStaticUsage() throws Exception {
+        mHelper.loadUrlWaitForContent(
+                TestPagesHelperBase.SNIPPETS_TESTPAGES_TESTCASES_ROOT + "hide-if-matches-xpath");
+        TestVerificationUtils.verifyHiddenCount(
+                mHelper, 1, "div#basic-static-usage-area > div[data-expectedresult='fail']");
+        TestVerificationUtils.verifyDisplayedCount(
+                mHelper, 1, "div#basic-static-usage-area > div[data-expectedresult='pass']");
+    }
+
+    @Test
+    @LargeTest
+    @Feature({"adblock"})
+    public void testHideIfMatchesXPathClassUsage() throws Exception {
+        mHelper.loadUrlWaitForContent(
+                TestPagesHelperBase.SNIPPETS_TESTPAGES_TESTCASES_ROOT + "hide-if-matches-xpath");
+        TestVerificationUtils.verifyHiddenCount(
+                mHelper, 1, "div#class-usage-area > div[data-expectedresult='fail']");
+        TestVerificationUtils.verifyDisplayedCount(
+                mHelper, 1, "div#class-usage-area > div[data-expectedresult='pass']");
+    }
+
+    @Test
+    @LargeTest
+    @Feature({"adblock"})
+    public void testHideIfMatchesXPath3ClassUsage() throws Exception {
+        mHelper.loadUrlWaitForContent(
+                TestPagesHelperBase.SNIPPETS_TESTPAGES_TESTCASES_ROOT + "hide-if-matches-xpath");
+        TestVerificationUtils.verifyHiddenCount(
+                mHelper, 1, "div#class-usage-area > div[data-expectedresult='fail']");
+        TestVerificationUtils.verifyDisplayedCount(
+                mHelper, 1, "div#class-usage-area > div[data-expectedresult='pass']");
+    }
+
+    @Test
+    @LargeTest
+    @Feature({"adblock"})
+    public void testHideIfMatchesXPathIdStartsWith() throws Exception {
+        mHelper.loadUrlWaitForContent(
+                TestPagesHelperBase.SNIPPETS_TESTPAGES_TESTCASES_ROOT + "hide-if-matches-xpath");
+        TestVerificationUtils.verifyHiddenCount(
+                mHelper, 1, "div#hide-if-id-starts-with-area > div[data-expectedresult='fail']");
+        TestVerificationUtils.verifyDisplayedCount(
+                mHelper, 1, "div#hide-if-id-starts-with-area > div[data-expectedresult='pass']");
+    }
+
+    @Test
+    @LargeTest
+    @Feature({"adblock"})
+    public void testHideIfMatchesXPath3IdStartsWith() throws Exception {
+        mHelper.loadUrlWaitForContent(
+                TestPagesHelperBase.SNIPPETS_TESTPAGES_TESTCASES_ROOT + "hide-if-matches-xpath");
+        TestVerificationUtils.verifyHiddenCount(
+                mHelper, 1, "div#hide-if-id-starts-with-area > div[data-expectedresult='fail']");
+        TestVerificationUtils.verifyDisplayedCount(
+                mHelper, 1, "div#hide-if-id-starts-with-area > div[data-expectedresult='pass']");
+    }
+
+    @Test
+    @LargeTest
+    @Feature({"adblock"})
+    public void testHideIfMatchesXPath3Regex() throws Exception {
+        mHelper.loadUrlWaitForContent(
+                TestPagesHelperBase.SNIPPETS_TESTPAGES_TESTCASES_ROOT + "hide-if-matches-xpath3");
+        TestVerificationUtils.verifyHiddenCount(
+                mHelper,
+                1,
+                "div#hide-if-class-matches-regex-area > div[data-expectedresult='fail']");
+    }
+
+    @Test
+    @LargeTest
+    @Feature({"adblock"})
+    public void testHideIfMatchesXPath3NormalizeAndJoinStrings() throws Exception {
+        mHelper.loadUrlWaitForContent(
+                TestPagesHelperBase.SNIPPETS_TESTPAGES_TESTCASES_ROOT + "hide-if-matches-xpath3");
+        TestVerificationUtils.verifyHiddenCount(
+                mHelper,
+                1,
+                "div#normalize-and-join-strings-area > div[data-expectedresult='fail']");
+    }
+
+    @Test
+    @LargeTest
+    @Feature({"adblock"})
+    public void testHideIfMatchesXPath3CastToNumber() throws Exception {
+        mHelper.loadUrlWaitForContent(
+                TestPagesHelperBase.SNIPPETS_TESTPAGES_TESTCASES_ROOT + "hide-if-matches-xpath3");
+        TestVerificationUtils.verifyHiddenCount(
+                mHelper, 1, "div#cast-to-number-area > div[data-expectedresult='fail']");
+        TestVerificationUtils.verifyDisplayedCount(
+                mHelper, 1, "div#cast-to-number-area > div[data-expectedresult='pass']");
+    }
+
+    @Test
+    @LargeTest
+    @Feature({"adblock"})
+    public void testHideIfMatchesComputedXPathClassChangesDynamically() throws Exception {
+        mHelper.loadUrlWaitForContent(
+                TestPagesHelperBase.SNIPPETS_TESTPAGES_TESTCASES_ROOT
+                        + "hide-if-matches-computed-xpath");
+        TestVerificationUtils.verifyHiddenCount(
+                mHelper,
+                1,
+                "div#hide-when-class-changes-dynamically-based-on-a-string-found-in-another-element-area"
+                    + " > div[data-expectedresult='fail']");
+    }
+
+    @Test
+    @LargeTest
+    @Feature({"adblock"})
+    public void testHideIfMatchesComputedXPathClassMatchesRegex() throws Exception {
+        mHelper.loadUrlWaitForContent(
+                TestPagesHelperBase.SNIPPETS_TESTPAGES_TESTCASES_ROOT
+                        + "hide-if-matches-computed-xpath");
+        TestVerificationUtils.verifyHiddenCount(
+                mHelper,
+                1,
+                "div#hide-when-class-matches-regex-group-area > div[data-expectedresult='fail']");
+    }
+
+    @Test
+    @LargeTest
+    @Feature({"adblock"})
+    public void testHideIfShadowContainsBasicUsage() throws Exception {
+        mHelper.loadUrlWaitForContent(
+                TestPagesHelperBase.SNIPPETS_TESTPAGES_TESTCASES_ROOT + "hide-if-shadow-contains");
+        TestVerificationUtils.verifyHiddenCount(
+                mHelper, 1, "div#basic-target > p[data-expectedresult='fail']");
+    }
+
+    @Test
+    @LargeTest
+    @Feature({"adblock"})
+    public void testHideIfShadowContainsRegexUsage() throws Exception {
+        mHelper.loadUrlWaitForContent(
+                TestPagesHelperBase.SNIPPETS_TESTPAGES_TESTCASES_ROOT + "hide-if-shadow-contains");
+        TestVerificationUtils.verifyHiddenCount(
+                mHelper, 2, "div#regex-target > div[data-expectedresult='fail']");
+        TestVerificationUtils.verifyDisplayedCount(
+                mHelper, 1, "div#regex-target > div[data-expectedresult='pass']");
+    }
+
+    @Test
+    @LargeTest
+    @Feature({"adblock"})
+    public void testJsonPrune() throws Exception {
+        mHelper.loadUrlWaitForContent(
+                TestPagesHelperBase.SNIPPETS_TESTPAGES_TESTCASES_ROOT + "json-prune?delay=100");
+        // The object does not get hidden, it no longer exists in the DOM.
+        TestVerificationUtils.verifyDisplayedCount(
+                mHelper, 0, "div#testcase-area > div[data-expectedresult='fail']");
+    }
+
+    @Test
+    @LargeTest
+    @Feature({"adblock"})
+    public void testOverridePropertyRead() throws Exception {
+        mHelper.loadUrlWaitForContent(
+                TestPagesHelperBase.SNIPPETS_TESTPAGES_TESTCASES_ROOT + "override-property-read");
+        TestVerificationUtils.verifyHiddenCount(
+                mHelper, 1, "div#basic-target > div[data-expectedresult='fail']");
+    }
+
+    @Test
+    @LargeTest
+    @Feature({"adblock"})
+    public void testStripFetchQueryParameterBasicUsage() throws Exception {
+        mHelper.loadUrlWaitForContent(
+                TestPagesHelperBase.SNIPPETS_TESTPAGES_TESTCASES_ROOT
+                        + "strip-fetch-query-parameter");
+        TestVerificationUtils.verifyDisplayedCount(
+                mHelper, 0, "div#basic-target > div[data-expectedresult='fail']");
+        TestVerificationUtils.verifyDisplayedCount(
+                mHelper, 1, "div#basic-target > div[data-expectedresult='pass']");
+    }
+
+    @Test
+    @LargeTest
+    @Feature({"adblock"})
+    public void testStripFetchQueryParameterOtherUsage() throws Exception {
+        mHelper.loadUrlWaitForContent(
+                TestPagesHelperBase.SNIPPETS_TESTPAGES_TESTCASES_ROOT
+                        + "strip-fetch-query-parameter");
+        TestVerificationUtils.verifyDisplayedCount(
+                mHelper, 2, "div#other-target > div[data-expectedresult='pass']");
+    }
+}
diff --git a/components/adblock/android/javatests/src/org/chromium/components/adblock/TestPagesWebsocketTestBase.java b/components/adblock/android/javatests/src/org/chromium/components/adblock/TestPagesWebsocketTestBase.java
new file mode 100644
index 0000000000..a71cdcfbbc
--- /dev/null
+++ b/components/adblock/android/javatests/src/org/chromium/components/adblock/TestPagesWebsocketTestBase.java
@@ -0,0 +1,54 @@
+/*
+ * This file is part of eyeo Chromium SDK,
+ * Copyright (C) 2006-present eyeo GmbH
+ *
+ * eyeo Chromium SDK is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 3 as
+ * published by the Free Software Foundation.
+ *
+ * eyeo Chromium SDK is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with eyeo Chromium SDK.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+package org.chromium.components.adblock;
+
+import androidx.test.filters.LargeTest;
+
+import org.junit.Assert;
+import org.junit.Test;
+
+import org.chromium.base.test.util.Feature;
+
+import java.util.HashSet;
+import java.util.List;
+import java.util.concurrent.CountDownLatch;
+import java.util.concurrent.TimeUnit;
+
+public abstract class TestPagesWebsocketTestBase {
+    private TestPagesHelperBase mHelper;
+
+    protected void setUp(TestPagesHelperBase helper) {
+        mHelper = helper;
+        mHelper.addFilterList(TestPagesHelperBase.TESTPAGES_SUBSCRIPTION);
+    }
+
+    @Test
+    @LargeTest
+    @Feature({"adblock"})
+    public void testVerifyWebsocketFilter() throws Exception {
+        final String wssUrl =
+                String.format("wss://%s/websocket", TestPagesHelperBase.TESTPAGES_DOMAIN);
+        final CountDownLatch countDownLatch =
+                mHelper.setOnAdMatchedExpectations(new HashSet<>(List.of(wssUrl)), null);
+        mHelper.loadUrl(TestPagesHelperBase.FILTER_TESTPAGES_TESTCASES_ROOT + "websocket");
+        // Wait with 10 seconds max timeout
+        countDownLatch.await(10, TimeUnit.SECONDS);
+        Assert.assertEquals(1, mHelper.numBlockedByType(ContentType.CONTENT_TYPE_WEBSOCKET));
+        Assert.assertTrue(mHelper.isBlocked(wssUrl));
+    }
+}
diff --git a/components/adblock/android/javatests/src/org/chromium/components/adblock/TestPagesWildcardDomainTestBase.java b/components/adblock/android/javatests/src/org/chromium/components/adblock/TestPagesWildcardDomainTestBase.java
new file mode 100644
index 0000000000..29f9b78be7
--- /dev/null
+++ b/components/adblock/android/javatests/src/org/chromium/components/adblock/TestPagesWildcardDomainTestBase.java
@@ -0,0 +1,116 @@
+/*
+ * This file is part of eyeo Chromium SDK,
+ * Copyright (C) 2006-present eyeo GmbH
+ *
+ * eyeo Chromium SDK is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 3 as
+ * published by the Free Software Foundation.
+ *
+ * eyeo Chromium SDK is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with eyeo Chromium SDK.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+package org.chromium.components.adblock;
+
+import androidx.test.filters.LargeTest;
+
+import org.junit.Test;
+
+import org.chromium.base.test.util.Feature;
+
+public abstract class TestPagesWildcardDomainTestBase {
+
+    public static final String WILDCARD_DOMAIN_TESTPAGES_URL =
+            "https://subdomain.abptestpages.org/en/filters/wildcard-domain";
+
+    private TestPagesHelperBase mHelper;
+
+    protected void setUp(TestPagesHelperBase helper) {
+        mHelper = helper;
+        mHelper.addFilterList(TestPagesHelperBase.TESTPAGES_SUBSCRIPTION);
+    }
+
+    @Test
+    @LargeTest
+    @Feature({"adblock"})
+    public void testWildcardDomainContainsWithWildcards() throws Exception {
+        mHelper.loadUrl(WILDCARD_DOMAIN_TESTPAGES_URL);
+        TestVerificationUtils.verifyHiddenCount(
+                mHelper, 1, "div[id='element-hiding-contains-with-wildcards-fail-1']");
+    }
+
+    @Test
+    @LargeTest
+    @Feature({"adblock"})
+    public void testWildcardDomainId() throws Exception {
+        mHelper.loadUrl(WILDCARD_DOMAIN_TESTPAGES_URL);
+        TestVerificationUtils.verifyHiddenCount(mHelper, 1, "div[id='eh-id']");
+    }
+
+    @Test
+    @LargeTest
+    @Feature({"adblock"})
+    public void testWildcardDomainAttributeSelector() throws Exception {
+        mHelper.loadUrl(WILDCARD_DOMAIN_TESTPAGES_URL);
+        TestVerificationUtils.verifyHiddenCount(
+                mHelper, 1, "div[id='element-hiding-attribute-selector-fail-1']");
+    }
+
+    @Test
+    @LargeTest
+    @Feature({"adblock"})
+    public void testWildcardDomainAbpProperties() throws Exception {
+        mHelper.loadUrl(WILDCARD_DOMAIN_TESTPAGES_URL);
+        TestVerificationUtils.verifyHiddenCount(
+                mHelper, 1, "div[id='element-hiding-emulation-basic-abp-properties-usage-fail-1']");
+    }
+
+    @Test
+    @LargeTest
+    @Feature({"adblock"})
+    public void testWildcardDomainAbpHas() throws Exception {
+        mHelper.loadUrl(WILDCARD_DOMAIN_TESTPAGES_URL);
+        TestVerificationUtils.verifyHiddenCount(
+                mHelper, 1, "div[id='element-hiding-emulation-basic-abp-has-usage-fail-1']");
+    }
+
+    @Test
+    @LargeTest
+    @Feature({"adblock"})
+    public void testWildcardDomainChainedExtendedSelectors() throws Exception {
+        mHelper.loadUrl(WILDCARD_DOMAIN_TESTPAGES_URL);
+        TestVerificationUtils.verifyHiddenCount(
+                mHelper, 1, "div[id='element-hiding-emulation-chained-extended-selectors-fail-1']");
+    }
+
+    @Test
+    @LargeTest
+    @Feature({"adblock"})
+    public void testWildcardDomainExtendedSelectorAndDomain() throws Exception {
+        mHelper.loadUrl(WILDCARD_DOMAIN_TESTPAGES_URL);
+        TestVerificationUtils.verifyHiddenCount(
+                mHelper,
+                1,
+                "div[id='element-hide-emulation-wildcard-in-extended-selector-and-wildcard-in-domain-fail-1']");
+    }
+
+    @Test
+    @LargeTest
+    @Feature({"adblock"})
+    public void testWildcardDomainRegularExpression() throws Exception {
+        mHelper.loadUrl(WILDCARD_DOMAIN_TESTPAGES_URL);
+        TestVerificationUtils.verifyHiddenCount(
+                mHelper,
+                1,
+                "div[id='element-hiding-emulation-regular-expression-in-abp-contains-fail-1']");
+        TestVerificationUtils.verifyHiddenCount(
+                mHelper,
+                1,
+                "div[id='element-hiding-emulation-regular-expression-in-abp-contains-fail-2']");
+    }
+}
diff --git a/components/adblock/android/javatests/src/org/chromium/components/adblock/TestResourceFilteringObserver.java b/components/adblock/android/javatests/src/org/chromium/components/adblock/TestResourceFilteringObserver.java
new file mode 100644
index 0000000000..d0b0005fc1
--- /dev/null
+++ b/components/adblock/android/javatests/src/org/chromium/components/adblock/TestResourceFilteringObserver.java
@@ -0,0 +1,181 @@
+/*
+ * This file is part of eyeo Chromium SDK,
+ * Copyright (C) 2006-present eyeo GmbH
+ *
+ * eyeo Chromium SDK is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 3 as
+ * published by the Free Software Foundation.
+ *
+ * eyeo Chromium SDK is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with eyeo Chromium SDK.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+package org.chromium.components.adblock;
+
+import org.junit.Assert;
+
+import java.net.URL;
+import java.util.List;
+import java.util.Set;
+import java.util.concurrent.CopyOnWriteArrayList;
+import java.util.concurrent.CountDownLatch;
+
+public class TestResourceFilteringObserver
+        implements ResourceClassificationNotifier.ResourceFilteringObserver {
+    @Override
+    public void onRequestAllowed(ResourceFilteringCounters.ResourceInfo info) {
+        allowedInfos.add(info);
+        Assert.assertEquals(info.getSubscription(), getExpectedSubscriptionUrl());
+        CheckAndCountDownLatch(Decision.ALLOWED, info.getRequestUrl().split("\\?")[0]);
+    }
+
+    @Override
+    public void onRequestBlocked(ResourceFilteringCounters.ResourceInfo info) {
+        blockedInfos.add(info);
+        Assert.assertEquals(info.getSubscription(), getExpectedSubscriptionUrl());
+        CheckAndCountDownLatch(Decision.BLOCKED, info.getRequestUrl().split("\\?")[0]);
+    }
+
+    @Override
+    public void onPageAllowed(ResourceFilteringCounters.ResourceInfo info) {
+        allowedPageInfos.add(info);
+        Assert.assertEquals(info.getSubscription(), getExpectedSubscriptionUrl());
+    }
+
+    @Override
+    public void onPopupAllowed(ResourceFilteringCounters.ResourceInfo info) {
+        allowedPopupsInfos.add(info);
+        Assert.assertEquals(info.getSubscription(), getExpectedSubscriptionUrl());
+    }
+
+    @Override
+    public void onPopupBlocked(ResourceFilteringCounters.ResourceInfo info) {
+        blockedPopupsInfos.add(info);
+        Assert.assertEquals(info.getSubscription(), getExpectedSubscriptionUrl());
+    }
+
+    public boolean isBlocked(String url) {
+        for (ResourceFilteringCounters.ResourceInfo info : blockedInfos) {
+            if (info.getRequestUrl().contains(url)) return true;
+        }
+
+        return false;
+    }
+
+    public boolean isPopupBlocked(String url) {
+        for (ResourceFilteringCounters.ResourceInfo info : blockedPopupsInfos) {
+            if (info.getRequestUrl().contains(url)) return true;
+        }
+
+        return false;
+    }
+
+    public int numBlockedByType(ContentType type) {
+        int result = 0;
+        for (ResourceFilteringCounters.ResourceInfo info : blockedInfos) {
+            if (info.getContentType() == type) ++result;
+        }
+        return result;
+    }
+
+    public int numBlockedPopups() {
+        return blockedPopupsInfos.size();
+    }
+
+    public boolean isAllowed(String url) {
+        for (ResourceFilteringCounters.ResourceInfo info : allowedInfos) {
+            if (info.getRequestUrl().contains(url)) return true;
+        }
+
+        return false;
+    }
+
+    public boolean isPageAllowed(String url) {
+        for (ResourceFilteringCounters.ResourceInfo info : allowedPageInfos) {
+            if (info.getRequestUrl().contains(url)) return true;
+        }
+
+        return false;
+    }
+
+    public boolean isPopupAllowed(String url) {
+        for (ResourceFilteringCounters.ResourceInfo info : allowedPopupsInfos) {
+            if (info.getRequestUrl().contains(url)) return true;
+        }
+
+        return false;
+    }
+
+    public int numAllowedByType(ContentType type) {
+        int result = 0;
+        for (ResourceFilteringCounters.ResourceInfo info : allowedInfos) {
+            if (info.getContentType() == type) ++result;
+        }
+        return result;
+    }
+
+    public int numAllowedPopups() {
+        return allowedPopupsInfos.size();
+    }
+
+    public void setExpectedSubscriptionUrl(URL url) {
+        mTestSubscriptionUrl = url;
+    }
+
+    private String getExpectedSubscriptionUrl() {
+        if (mTestSubscriptionUrl != null) return mTestSubscriptionUrl.toString();
+        return "adblock:custom";
+    }
+
+    private enum Decision {
+        ALLOWED,
+        BLOCKED
+    }
+
+    // We either countDown() our latch for every filtered resource if there are no
+    // specific expectations set (expectedAllowed == null && expectedBlocked == null),
+    // or we countDown() only when all expectations have been met so when:
+    // (expectedAllowed.isNullOrEmpty() && expectedBlocked.isNullOrEmpty()).
+    private void CheckAndCountDownLatch(final Decision decision, final String url) {
+        if (countDownLatch != null) {
+            if (expectedBlocked == null && expectedAllowed == null) {
+                countDownLatch.countDown();
+            } else {
+                if (decision == Decision.BLOCKED) {
+                    if (expectedBlocked != null) {
+                        expectedBlocked.remove(url);
+                    }
+                } else {
+                    if (expectedAllowed != null) {
+                        expectedAllowed.remove(url);
+                    }
+                }
+                boolean expectationsMet =
+                        (expectedAllowed == null || expectedAllowed.isEmpty())
+                                && (expectedBlocked == null || expectedBlocked.isEmpty());
+                if (expectationsMet) {
+                    countDownLatch.countDown();
+                }
+            }
+        }
+    }
+
+    private URL mTestSubscriptionUrl;
+    public List<ResourceFilteringCounters.ResourceInfo> blockedInfos = new CopyOnWriteArrayList<>();
+    public List<ResourceFilteringCounters.ResourceInfo> allowedInfos = new CopyOnWriteArrayList<>();
+    public List<ResourceFilteringCounters.ResourceInfo> allowedPageInfos =
+            new CopyOnWriteArrayList<>();
+    public List<ResourceFilteringCounters.ResourceInfo> blockedPopupsInfos =
+            new CopyOnWriteArrayList<>();
+    public List<ResourceFilteringCounters.ResourceInfo> allowedPopupsInfos =
+            new CopyOnWriteArrayList<>();
+    CountDownLatch countDownLatch;
+    Set<String> expectedAllowed;
+    Set<String> expectedBlocked;
+}
+;
diff --git a/components/adblock/android/javatests/src/org/chromium/components/adblock/TestVerificationUtils.java b/components/adblock/android/javatests/src/org/chromium/components/adblock/TestVerificationUtils.java
new file mode 100644
index 0000000000..1d61bb2b34
--- /dev/null
+++ b/components/adblock/android/javatests/src/org/chromium/components/adblock/TestVerificationUtils.java
@@ -0,0 +1,229 @@
+/*
+ * This file is part of eyeo Chromium SDK,
+ * Copyright (C) 2006-present eyeo GmbH
+ *
+ * eyeo Chromium SDK is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 3 as
+ * published by the Free Software Foundation.
+ *
+ * eyeo Chromium SDK is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with eyeo Chromium SDK.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+package org.chromium.components.adblock;
+
+import org.junit.Assert;
+
+import org.chromium.content_public.browser.test.util.JavaScriptUtils;
+
+import java.util.Locale;
+import java.util.concurrent.TimeoutException;
+
+public class TestVerificationUtils {
+    public enum IncludeSubframes {
+        YES,
+        NO,
+    }
+
+    private static final String STATUS_OK = "\"OK\"";
+
+    private static final String MATCHES_HIDDEN_FUNCTION =
+            "let matches = function(element) {"
+                    + "  return window.getComputedStyle(element).display == \"none\";"
+                    + "}";
+
+    private static final String MATCHES_DISPLAYED_FUNCTION =
+            "let matches = function(element) {"
+                    + "  return window.getComputedStyle(element).display != \"none\";"
+                    + "}";
+
+    private static final String COUNT_ELEMENT_FUNCTION =
+            "let countElements = function(selector, includeSubframes) {"
+                    + "  let count = 0;"
+                    + "  for (let element of document.querySelectorAll(selector)) {"
+                    + "    if (matches(element))"
+                    + "      ++count;"
+                    + "  }"
+                    + "  if (includeSubframes) {"
+                    + "    for (let frame of document.querySelectorAll(\"iframe\")) {"
+                    + "      for (let element of frame.contentWindow.document.body"
+                    + ".querySelectorAll(selector)) {"
+                    + "        if (matches(element))"
+                    + "          ++count;"
+                    + "      }"
+                    + "    }"
+                    + "  }"
+                    + "  return count;"
+                    + "}";
+
+    private static final String WAIT_FOR_COUNT_FUNCTION_WRAPPER =
+            "(function () {"
+                    + "%s\n" // matches() definition placeholder
+                    + "%s\n" // countElements() definition placeholder
+                    + "%s\n" // WAIT_FUNCTION placeholder which calls countElements() as a predicate
+                    + "}());";
+
+    // Poll every 100 ms until condition is met or 3 seconds timeout occurs
+    // Internal timeout of JavaScriptUtils.runJavascriptWithAsyncResult() is 5 seconds
+    // so our wait timeout needs to be shorter.
+    private static final String WAIT_FUNCTION =
+            "function waitWithTimeout() {"
+                    + "  return new Promise(resolve => {"
+                    + "    let repeat = 30;"
+                    + "    const id = setInterval(() => {"
+                    + "      --repeat;"
+                    + "      if (%s) {" // predicate placeholder
+                    + "        clearInterval(id);"
+                    + "        resolve('OK');"
+                    + "      } else if (repeat == 0) {"
+                    + "        clearInterval(id);"
+                    + "        resolve('Timeout');"
+                    + "      }"
+                    + "    }, 100);"
+                    + "  });"
+                    + "};"
+                    + "waitWithTimeout().then((r) => { domAutomationController.send(r);});";
+
+    private static void verifyMatchesCount(
+            final TestPagesHelperBase helper,
+            final int num,
+            final String matchesFunction,
+            final String selector,
+            IncludeSubframes includeSubframes)
+            throws TimeoutException {
+        final String boolIncludeSubframes =
+                includeSubframes == IncludeSubframes.YES ? "true" : "false";
+        final String predicate =
+                String.format(
+                        Locale.getDefault(),
+                        "countElements(\"%s\", %s) == %d",
+                        selector,
+                        boolIncludeSubframes,
+                        num);
+        final String waitFunction = String.format(WAIT_FUNCTION, predicate);
+        final String js =
+                String.format(
+                        WAIT_FOR_COUNT_FUNCTION_WRAPPER,
+                        matchesFunction,
+                        COUNT_ELEMENT_FUNCTION,
+                        waitFunction);
+        final String result =
+                JavaScriptUtils.runJavascriptWithAsyncResult(helper.getWebContents(), js);
+        Assert.assertEquals(STATUS_OK, result);
+    }
+
+    public static void verifyHiddenCount(
+            final TestPagesHelperBase helper, final int num, final String selector)
+            throws TimeoutException {
+        verifyHiddenCount(helper, num, selector, IncludeSubframes.YES);
+    }
+
+    public static void verifyHiddenCount(
+            final TestPagesHelperBase helper,
+            final int num,
+            final String selector,
+            final IncludeSubframes includeSubframes)
+            throws TimeoutException {
+        verifyMatchesCount(helper, num, MATCHES_HIDDEN_FUNCTION, selector, includeSubframes);
+    }
+
+    public static void verifyDisplayedCount(
+            final TestPagesHelperBase helper, final int num, final String selector)
+            throws TimeoutException {
+        verifyDisplayedCount(helper, num, selector, IncludeSubframes.YES);
+    }
+
+    public static void verifyDisplayedCount(
+            final TestPagesHelperBase helper,
+            final int num,
+            final String selector,
+            final IncludeSubframes includeSubframes)
+            throws TimeoutException {
+        verifyMatchesCount(helper, num, MATCHES_DISPLAYED_FUNCTION, selector, includeSubframes);
+    }
+
+    public static void verifyCondition(final TestPagesHelperBase helper, final String predicate)
+            throws TimeoutException {
+        final String waitFunction = String.format(WAIT_FUNCTION, predicate);
+        Assert.assertEquals(
+                STATUS_OK,
+                JavaScriptUtils.runJavascriptWithAsyncResult(
+                        helper.getWebContents(), waitFunction));
+    }
+
+    public static void verifyGreenBackground(final TestPagesHelperBase helper, final String elemId)
+            throws TimeoutException {
+        verifyCondition(
+                helper,
+                "document.getElementById('"
+                        + elemId
+                        + "') && "
+                        + "window.getComputedStyle(document.getElementById('"
+                        + elemId
+                        + "')).backgroundColor == 'rgb(13, 199, 75)'");
+    }
+
+    // For some cases it is better to rely on page script testing element
+    // rather than invent a specific script to check condition. For example
+    // checks for rewrite filters replaces content proper way.
+    public static void verifySelfTestPass(final TestPagesHelperBase helper, final String elemId)
+            throws TimeoutException {
+        verifyCondition(
+                helper,
+                "document.getElementById('"
+                        + elemId
+                        + "') && "
+                        + "document.getElementById('"
+                        + elemId
+                        + "').getAttribute('data-expectedresult') == 'pass'");
+    }
+
+    public static void expectResourceBlocked(final TestPagesHelperBase helper, final String elemId)
+            throws TimeoutException {
+        verifyCondition(
+                helper,
+                "document.getElementById('"
+                        + elemId
+                        + "') && "
+                        + "window.getComputedStyle(document.getElementById('"
+                        + elemId
+                        + "')).display == 'none'");
+    }
+
+    public static void expectResourceShown(final TestPagesHelperBase helper, final String elemId)
+            throws TimeoutException {
+        verifyCondition(
+                helper,
+                "document.getElementById('"
+                        + elemId
+                        + "') && "
+                        + "window.getComputedStyle(document.getElementById('"
+                        + elemId
+                        + "')).display == 'inline'");
+    }
+
+    public static void expectResourceStyleProperty(
+            final TestPagesHelperBase helper,
+            final String elemId,
+            final String property,
+            final String value)
+            throws TimeoutException {
+        verifyCondition(
+                helper,
+                "document.getElementById('"
+                        + elemId
+                        + "') && "
+                        + "window.getComputedStyle(document.getElementById('"
+                        + elemId
+                        + "'))['"
+                        + property
+                        + "'] == '"
+                        + value
+                        + "'");
+    }
+}
diff --git a/components/adblock/android/resource_classification_notifier_android.cc b/components/adblock/android/resource_classification_notifier_android.cc
new file mode 100644
index 0000000000..bd1246b3c2
--- /dev/null
+++ b/components/adblock/android/resource_classification_notifier_android.cc
@@ -0,0 +1,161 @@
+/*
+ * This file is part of eyeo Chromium SDK,
+ * Copyright (C) 2006-present eyeo GmbH
+ *
+ * eyeo Chromium SDK is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 3 as
+ * published by the Free Software Foundation.
+ *
+ * eyeo Chromium SDK is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with eyeo Chromium SDK.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+#include "components/adblock/android/resource_classification_notifier_android.h"
+
+#include "base/android/jni_android.h"
+#include "base/android/jni_array.h"
+#include "base/android/jni_string.h"
+#include "base/android/jni_weak_ref.h"
+#include "components/adblock/android/jni_headers/ResourceClassificationNotifier_jni.h"
+#include "components/adblock/content/browser/factories/resource_classification_runner_factory.h"
+#include "components/adblock/core/common/adblock_utils.h"
+#include "content/public/browser/android/browser_context_handle.h"
+#include "content/public/browser/render_process_host.h"
+#include "content/public/browser/web_contents.h"
+
+using base::android::AttachCurrentThread;
+using base::android::ConvertUTF8ToJavaString;
+using base::android::JavaParamRef;
+using base::android::ScopedJavaLocalRef;
+using base::android::ToJavaArrayOfStrings;
+
+namespace adblock {
+
+ResourceClassificationNotifierAndroid::ResourceClassificationNotifierAndroid(
+    JNIEnv* env,
+    const base::android::JavaParamRef<jobject>& jcontroller,
+    ResourceClassificationRunner* classification_runner)
+    : classification_runner_(classification_runner),
+      java_weak_controller_(env, jcontroller.obj()) {
+  if (classification_runner_) {
+    classification_runner_->AddObserver(this);
+  }
+}
+
+ResourceClassificationNotifierAndroid::
+    ~ResourceClassificationNotifierAndroid() {
+  if (classification_runner_) {
+    classification_runner_->RemoveObserver(this);
+  }
+}
+
+void ResourceClassificationNotifierAndroid::OnRequestMatched(
+    const GURL& url,
+    FilterMatchResult result,
+    const std::vector<GURL>& parent_frame_urls,
+    ContentType content_type,
+    content::RenderFrameHost* render_frame_host,
+    const GURL& subscription,
+    const std::string& configuration_name) {
+  DCHECK_CALLED_ON_VALID_SEQUENCE(sequence_checker_);
+  DCHECK(render_frame_host);
+  DCHECK(result == FilterMatchResult::kBlockRule ||
+         result == FilterMatchResult::kAllowRule);
+  const bool was_blocked = result == FilterMatchResult::kBlockRule;
+  DVLOG(3) << "[eyeo] Ad matched " << url << "(type: " << content_type
+           << (was_blocked ? ", blocked" : ", allowed") << ")";
+  JNIEnv* env = AttachCurrentThread();
+  auto java_controller = java_weak_controller_.get(env);
+  if (!java_controller.is_null()) {
+    ScopedJavaLocalRef<jstring> j_url =
+        ConvertUTF8ToJavaString(env, url.spec());
+    ScopedJavaLocalRef<jobjectArray> j_parents = ToJavaArrayOfStrings(
+        env, adblock::utils::ConvertURLs(parent_frame_urls));
+    ScopedJavaLocalRef<jstring> j_subscription =
+        ConvertUTF8ToJavaString(env, subscription.spec());
+    ScopedJavaLocalRef<jstring> j_configuration =
+        ConvertUTF8ToJavaString(env, configuration_name);
+    Java_ResourceClassificationNotifier_requestMatchedCallback(
+        env, java_controller, j_url, was_blocked, j_parents, j_subscription,
+        j_configuration, static_cast<int>(content_type),
+        render_frame_host->GetMainFrame()->GetProcess()->GetID(),
+        render_frame_host->GetMainFrame()->GetRoutingID());
+  }
+}
+
+void ResourceClassificationNotifierAndroid::OnPageAllowed(
+    const GURL& url,
+    content::RenderFrameHost* render_frame_host,
+    const GURL& subscription,
+    const std::string& configuration_name) {
+  DCHECK_CALLED_ON_VALID_SEQUENCE(sequence_checker_);
+  DCHECK(render_frame_host);
+  DVLOG(3) << "[eyeo] Page allowed " << url;
+  JNIEnv* env = AttachCurrentThread();
+  auto java_controller = java_weak_controller_.get(env);
+  if (!java_controller.is_null()) {
+    ScopedJavaLocalRef<jstring> j_url =
+        ConvertUTF8ToJavaString(env, url.spec());
+    ScopedJavaLocalRef<jstring> j_subscription =
+        ConvertUTF8ToJavaString(env, subscription.spec());
+    ScopedJavaLocalRef<jstring> j_configuration =
+        ConvertUTF8ToJavaString(env, configuration_name);
+    Java_ResourceClassificationNotifier_pageAllowedCallback(
+        env, java_controller, j_url, j_subscription, j_configuration,
+        render_frame_host->GetMainFrame()->GetProcess()->GetID(),
+        render_frame_host->GetMainFrame()->GetRoutingID());
+  }
+}
+
+void ResourceClassificationNotifierAndroid::OnPopupMatched(
+    const GURL& url,
+    FilterMatchResult result,
+    const GURL& opener_url,
+    content::RenderFrameHost* render_frame_host,
+    const GURL& subscription,
+    const std::string& configuration_name) {
+  DCHECK_CALLED_ON_VALID_SEQUENCE(sequence_checker_);
+  DCHECK(render_frame_host);
+  DCHECK(result == FilterMatchResult::kBlockRule ||
+         result == FilterMatchResult::kAllowRule);
+  const bool was_blocked = result == FilterMatchResult::kBlockRule;
+  DVLOG(3) << "[eyeo] Popup matched " << url
+           << (was_blocked ? ", blocked" : ", allowed");
+  JNIEnv* env = AttachCurrentThread();
+  auto java_controller = java_weak_controller_.get(env);
+  if (!java_controller.is_null()) {
+    ScopedJavaLocalRef<jstring> j_url =
+        ConvertUTF8ToJavaString(env, url.spec());
+    ScopedJavaLocalRef<jstring> j_opener =
+        ConvertUTF8ToJavaString(env, opener_url.spec());
+    ScopedJavaLocalRef<jstring> j_subscription =
+        ConvertUTF8ToJavaString(env, subscription.spec());
+    ScopedJavaLocalRef<jstring> j_configuration =
+        ConvertUTF8ToJavaString(env, configuration_name);
+    Java_ResourceClassificationNotifier_popupMatchedCallback(
+        env, java_controller, j_url, was_blocked, j_opener, j_subscription,
+        j_configuration,
+        render_frame_host->GetMainFrame()->GetProcess()->GetID(),
+        render_frame_host->GetMainFrame()->GetRoutingID());
+  }
+}
+
+}  // namespace adblock
+
+static jlong JNI_ResourceClassificationNotifier_Create(
+    JNIEnv* env,
+    const JavaParamRef<jobject>& jcontroller,
+    const base::android::JavaParamRef<jobject>& jbrowser_context_handle) {
+  DCHECK(!jcontroller.is_null());
+  DCHECK(!jbrowser_context_handle.is_null());
+  return reinterpret_cast<jlong>(
+      new adblock::ResourceClassificationNotifierAndroid(
+          env, std::move(jcontroller),
+          adblock::ResourceClassificationRunnerFactory::GetForBrowserContext(
+              content::BrowserContextFromJavaHandle(jbrowser_context_handle))));
+}
diff --git a/components/adblock/android/resource_classification_notifier_android.h b/components/adblock/android/resource_classification_notifier_android.h
new file mode 100644
index 0000000000..b72e4eb413
--- /dev/null
+++ b/components/adblock/android/resource_classification_notifier_android.h
@@ -0,0 +1,72 @@
+/*
+ * This file is part of eyeo Chromium SDK,
+ * Copyright (C) 2006-present eyeo GmbH
+ *
+ * eyeo Chromium SDK is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 3 as
+ * published by the Free Software Foundation.
+ *
+ * eyeo Chromium SDK is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with eyeo Chromium SDK.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+#ifndef COMPONENTS_ADBLOCK_ANDROID_RESOURCE_CLASSIFICATION_NOTIFIER_ANDROID_H_
+#define COMPONENTS_ADBLOCK_ANDROID_RESOURCE_CLASSIFICATION_NOTIFIER_ANDROID_H_
+
+#include "base/android/jni_android.h"
+#include "base/android/jni_weak_ref.h"
+#include "components/adblock/content/browser/resource_classification_runner.h"
+#include "content/public/browser/browser_context.h"
+
+class FilterMatchResult;
+
+namespace adblock {
+
+class ResourceClassificationNotifierAndroid
+    : public ResourceClassificationRunner::Observer {
+ public:
+  ResourceClassificationNotifierAndroid(
+      JNIEnv* env,
+      const base::android::JavaParamRef<jobject>& jcontroller,
+      ResourceClassificationRunner* classification_runner);
+  ~ResourceClassificationNotifierAndroid() override;
+
+  // ResourceClassificationRunner::Observer
+  void OnRequestMatched(const GURL& url,
+                        FilterMatchResult match_result,
+                        const std::vector<GURL>& parent_frame_urls,
+                        ContentType content_type,
+                        content::RenderFrameHost* render_frame_host,
+                        const GURL& subscription,
+                        const std::string& configuration_name) override;
+  void OnPageAllowed(const GURL& url,
+                     content::RenderFrameHost* render_frame_host,
+                     const GURL& subscription,
+                     const std::string& configuration_name) override;
+  void OnPopupMatched(const GURL& url,
+                      FilterMatchResult match_result,
+                      const GURL& opener_url,
+                      content::RenderFrameHost* render_frame_host,
+                      const GURL& subscription,
+                      const std::string& configuration_name) override;
+
+ private:
+  SEQUENCE_CHECKER(sequence_checker_);
+  raw_ptr<ResourceClassificationRunner> classification_runner_;
+
+  // Direct reference to ResourceClassificationNotifier java class. Kept for as
+  // long as this instance of ResourceClassificationNotifierAndroid lives:
+  // until corresponding Profile gets destroyed. Destruction of Profile triggers
+  // destruction of both C++ ResourceClassificationNotifierAndroid and Java
+  // ResourceClassificationNotifier objects.
+  const JavaObjectWeakGlobalRef java_weak_controller_;
+};
+
+}  // namespace adblock
+
+#endif  // COMPONENTS_ADBLOCK_ANDROID_RESOURCE_CLASSIFICATION_NOTIFIER_ANDROID_H_
-- 
2.43.2

