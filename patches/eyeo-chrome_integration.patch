From: chromium-sdk <project_26591639_bot@noreply.gitlab.com>
Date: Thu, 12 Oct 2023 14:46:02 +0200
Subject: eyeo Browser Ad filtering Solution: Chrome Integration Module

Based on Chromium 118.0.5993.48

Pre-requisites: eyeo Browser Ad filtering Solution: Base Module
---
 chrome/app/chrome_main_delegate.cc            |   7 +-
 chrome/browser/BUILD.gn                       |  29 ++
 chrome/browser/adblock/README.md              |   3 +
 .../adblock/adblock_content_browser_client.cc | 320 ++++++++++++++++++
 .../adblock/adblock_content_browser_client.h  | 100 ++++++
 ...adblock_content_browser_client_unittest.cc | 203 +++++++++++
 .../adblock/adblock_controller_factory.cc     |  67 ++++
 .../adblock/adblock_controller_factory.h      |  49 +++
 .../adblock_telemetry_service_factory.cc      |  63 ++++
 .../adblock_telemetry_service_factory.h       |  51 +++
 chrome/browser/adblock/android/BUILD.gn       |  68 ++++
 ...ontent_security_policy_injector_factory.cc |  69 ++++
 ...content_security_policy_injector_factory.h |  49 +++
 .../browser/adblock/element_hider_factory.cc  |  63 ++++
 .../browser/adblock/element_hider_factory.h   |  47 +++
 .../resource_classification_runner_factory.cc |  71 ++++
 .../resource_classification_runner_factory.h  |  49 +++
 .../browser/adblock/session_stats_factory.cc  |  64 ++++
 .../browser/adblock/session_stats_factory.h   |  47 +++
 .../adblock/sitekey_storage_factory.cc        |  59 ++++
 .../browser/adblock/sitekey_storage_factory.h |  47 +++
 ...ubscription_persistent_metadata_factory.cc |  63 ++++
 ...subscription_persistent_metadata_factory.h |  49 +++
 .../adblock/subscription_service_factory.cc   |  66 ++++
 .../adblock/subscription_service_factory.h    |  50 +++
 .../chrome_browser_interface_binders.cc       |   9 +
 chrome/browser/preferences/BUILD.gn           |   5 +
 .../prefs/chrome_pref_service_factory.cc      |  11 +
 ...hrome_browser_main_extra_parts_profiles.cc |  26 ++
 chrome/browser/resources/BUILD.gn             |   5 +
 .../resources/adblock_internals/BUILD.gn      |  29 ++
 .../adblock_internals/adblock_internals.html  |  38 +++
 .../adblock_internals/adblock_internals.ts    |  43 +++
 .../safe_browsing_blocking_page_test.cc       |   7 +
 ...subresource_filter_browser_test_harness.cc |   8 +-
 chrome/browser/ui/BUILD.gn                    |  10 +
 chrome/browser/ui/prefs/pref_watcher.cc       |  13 +
 chrome/browser/ui/tab_helpers.cc              |  18 +
 .../ui/webui/adblock_internals/BUILD.gn       |  23 ++
 .../adblock_internals/adblock_internals.mojom |  20 ++
 .../adblock_internals_page_handler_impl.cc    | 115 +++++++
 .../adblock_internals_page_handler_impl.h     |  51 +++
 .../adblock_internals/adblock_internals_ui.cc |  47 +++
 .../adblock_internals/adblock_internals_ui.h  |  48 +++
 .../webui/chrome_web_ui_controller_factory.cc |   8 +
 chrome/common/BUILD.gn                        |   3 +
 chrome/common/webui_url_constants.cc          |   5 +
 chrome/common/webui_url_constants.h           |   5 +
 48 files changed, 2298 insertions(+), 2 deletions(-)
 create mode 100644 chrome/browser/adblock/README.md
 create mode 100644 chrome/browser/adblock/adblock_content_browser_client.cc
 create mode 100644 chrome/browser/adblock/adblock_content_browser_client.h
 create mode 100644 chrome/browser/adblock/adblock_content_browser_client_unittest.cc
 create mode 100644 chrome/browser/adblock/adblock_controller_factory.cc
 create mode 100644 chrome/browser/adblock/adblock_controller_factory.h
 create mode 100644 chrome/browser/adblock/adblock_telemetry_service_factory.cc
 create mode 100644 chrome/browser/adblock/adblock_telemetry_service_factory.h
 create mode 100644 chrome/browser/adblock/android/BUILD.gn
 create mode 100644 chrome/browser/adblock/content_security_policy_injector_factory.cc
 create mode 100644 chrome/browser/adblock/content_security_policy_injector_factory.h
 create mode 100644 chrome/browser/adblock/element_hider_factory.cc
 create mode 100644 chrome/browser/adblock/element_hider_factory.h
 create mode 100644 chrome/browser/adblock/resource_classification_runner_factory.cc
 create mode 100644 chrome/browser/adblock/resource_classification_runner_factory.h
 create mode 100644 chrome/browser/adblock/session_stats_factory.cc
 create mode 100644 chrome/browser/adblock/session_stats_factory.h
 create mode 100644 chrome/browser/adblock/sitekey_storage_factory.cc
 create mode 100644 chrome/browser/adblock/sitekey_storage_factory.h
 create mode 100644 chrome/browser/adblock/subscription_persistent_metadata_factory.cc
 create mode 100644 chrome/browser/adblock/subscription_persistent_metadata_factory.h
 create mode 100644 chrome/browser/adblock/subscription_service_factory.cc
 create mode 100644 chrome/browser/adblock/subscription_service_factory.h
 create mode 100644 chrome/browser/resources/adblock_internals/BUILD.gn
 create mode 100644 chrome/browser/resources/adblock_internals/adblock_internals.html
 create mode 100644 chrome/browser/resources/adblock_internals/adblock_internals.ts
 create mode 100644 chrome/browser/ui/webui/adblock_internals/BUILD.gn
 create mode 100644 chrome/browser/ui/webui/adblock_internals/adblock_internals.mojom
 create mode 100644 chrome/browser/ui/webui/adblock_internals/adblock_internals_page_handler_impl.cc
 create mode 100644 chrome/browser/ui/webui/adblock_internals/adblock_internals_page_handler_impl.h
 create mode 100644 chrome/browser/ui/webui/adblock_internals/adblock_internals_ui.cc
 create mode 100644 chrome/browser/ui/webui/adblock_internals/adblock_internals_ui.h

diff --git a/chrome/app/chrome_main_delegate.cc b/chrome/app/chrome_main_delegate.cc
--- a/chrome/app/chrome_main_delegate.cc
+++ b/chrome/app/chrome_main_delegate.cc
@@ -1,6 +1,10 @@
 // Copyright 2012 The Chromium Authors
 // Use of this source code is governed by a BSD-style license that can be
 // found in the LICENSE file.
+//
+// This source code is a part of eyeo Chromium SDK.
+// Use of this source code is governed by the GPLv3 that can be found in the
+// components/adblock/LICENSE file.
 
 #include "chrome/app/chrome_main_delegate.h"
 
@@ -37,6 +41,7 @@
 #include "base/trace_event/trace_event_impl.h"
 #include "build/build_config.h"
 #include "build/chromeos_buildflags.h"
+#include "chrome/browser/adblock/adblock_content_browser_client.h"
 #include "chrome/browser/buildflags.h"
 #include "chrome/browser/chrome_content_browser_client.h"
 #include "chrome/browser/chrome_resource_bundle_helper.h"
@@ -1913,7 +1918,7 @@ content::ContentClient* ChromeMainDelegate::CreateContentClient() {
 content::ContentBrowserClient*
 ChromeMainDelegate::CreateContentBrowserClient() {
   chrome_content_browser_client_ =
-      std::make_unique<ChromeContentBrowserClient>();
+      std::make_unique<AdblockContentBrowserClient>();
   return chrome_content_browser_client_.get();
 }
 
diff --git a/chrome/browser/BUILD.gn b/chrome/browser/BUILD.gn
--- a/chrome/browser/BUILD.gn
+++ b/chrome/browser/BUILD.gn
@@ -1,6 +1,9 @@
 # Copyright 2014 The Chromium Authors
 # Use of this source code is governed by a BSD-style license that can be
 # found in the LICENSE file.
+#
+# This source code is a part of eyeo Chromium SDK.
+# Use of this source code is governed by the GPLv3 that can be found in the components/adblock/LICENSE file.
 
 import("//base/allocator/allocator.gni")
 import("//build/buildflag_header.gni")
@@ -157,6 +160,26 @@ static_library("browser") {
     "accessibility/prefers_default_scrollbar_styles_prefs.h",
     "affiliations/affiliation_service_factory.cc",
     "affiliations/affiliation_service_factory.h",
+    "adblock/adblock_content_browser_client.cc",
+    "adblock/adblock_content_browser_client.h",
+    "adblock/adblock_controller_factory.cc",
+    "adblock/adblock_controller_factory.h",
+    "adblock/adblock_telemetry_service_factory.cc",
+    "adblock/adblock_telemetry_service_factory.h",
+    "adblock/content_security_policy_injector_factory.cc",
+    "adblock/content_security_policy_injector_factory.h",
+    "adblock/element_hider_factory.cc",
+    "adblock/element_hider_factory.h",
+    "adblock/resource_classification_runner_factory.cc",
+    "adblock/resource_classification_runner_factory.h",
+    "adblock/session_stats_factory.cc",
+    "adblock/session_stats_factory.h",
+    "adblock/sitekey_storage_factory.cc",
+    "adblock/sitekey_storage_factory.h",
+    "adblock/subscription_persistent_metadata_factory.cc",
+    "adblock/subscription_persistent_metadata_factory.h",
+    "adblock/subscription_service_factory.cc",
+    "adblock/subscription_service_factory.h",
     "after_startup_task_utils.cc",
     "after_startup_task_utils.h",
     "app_mode/app_mode_utils.cc",
@@ -2176,6 +2199,7 @@ static_library("browser") {
     "//chrome/browser/ui/color:color_headers",
     "//chrome/browser/ui/color:mixers",
     "//chrome/browser/ui/webui:configs",
+    "//chrome/browser/ui/webui/adblock_internals:mojo_bindings",
     "//chrome/browser/ui/webui/app_service_internals:mojo_bindings",
     "//chrome/browser/ui/webui/data_sharing_internals:mojo_bindings",
     "//chrome/browser/ui/webui/internals/user_education:mojo_bindings",
@@ -2200,6 +2224,8 @@ static_library("browser") {
     "//chrome/installer/util:with_no_strings",
     "//chrome/services/on_device_translation:on_device_translation_service",
     "//chrome/services/speech/buildflags",
+    "//components/adblock/content:browser",
+    "//components/adblock/core/converter",
     "//components/assist_ranker",
     "//components/autofill/content/browser",
     "//components/autofill/content/common:features",
@@ -3546,6 +3572,8 @@ static_library("browser") {
       "webauthn/android/webauthn_request_delegate_android.cc",
       "webauthn/android/webauthn_request_delegate_android.h",
     ]
+
+
     public_deps += [
       "//chrome/android/features/dev_ui:buildflags",
       "//components/image_fetcher/core",
@@ -3751,6 +3779,7 @@ static_library("browser") {
     # `IdentityManagerFactory` in facilitated payments.
     allow_circular_includes_from += [ "//chrome/browser/facilitated_payments" ]
 
+
     if (safe_browsing_mode == 2) {
       sources += [
         "component_updater/real_time_url_checks_allowlist_component_installer.cc",
diff --git a/chrome/browser/adblock/README.md b/chrome/browser/adblock/README.md
new file mode 100644
--- /dev/null
+++ b/chrome/browser/adblock/README.md
@@ -0,0 +1,3 @@
+This folder contains the OS-agnostic, Chrome-specific source code of eyeo Chromium SDK.
+
+For the full documentation, refer to [components/adblock](/components/adblock).
diff --git a/chrome/browser/adblock/adblock_content_browser_client.cc b/chrome/browser/adblock/adblock_content_browser_client.cc
new file mode 100644
--- /dev/null
+++ b/chrome/browser/adblock/adblock_content_browser_client.cc
@@ -0,0 +1,320 @@
+/*
+ * This file is part of eyeo Chromium SDK,
+ * Copyright (C) 2006-present eyeo GmbH
+ *
+ * eyeo Chromium SDK is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 3 as
+ * published by the Free Software Foundation.
+ *
+ * eyeo Chromium SDK is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with eyeo Chromium SDK.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+#include "chrome/browser/adblock/adblock_content_browser_client.h"
+
+#include "base/containers/unique_ptr_adapters.h"
+#include "base/ranges/algorithm.h"
+#include "chrome/browser/adblock/content_security_policy_injector_factory.h"
+#include "chrome/browser/adblock/element_hider_factory.h"
+#include "chrome/browser/adblock/resource_classification_runner_factory.h"
+#include "chrome/browser/adblock/sitekey_storage_factory.h"
+#include "chrome/browser/adblock/subscription_service_factory.h"
+#include "chrome/browser/profiles/profile.h"
+#include "chrome/browser/ui/browser_navigator_params.h"
+#include "components/adblock/content/browser/adblock_url_loader_factory.h"
+#include "components/adblock/content/browser/resource_classification_runner.h"
+#include "components/adblock/core/common/adblock_prefs.h"
+#include "components/adblock/core/configuration/filtering_configuration.h"
+#include "components/adblock/core/subscription/subscription_service.h"
+#include "components/embedder_support/user_agent_utils.h"
+#include "components/prefs/pref_service.h"
+#include "content/public/browser/browser_task_traits.h"
+#include "content/public/browser/browser_thread.h"
+#include "content/public/browser/render_frame_host.h"
+#include "content/public/browser/render_process_host.h"
+#include "content/public/browser/render_view_host.h"
+#include "content/public/browser/web_contents.h"
+#include "mojo/public/cpp/bindings/self_owned_receiver.h"
+#include "services/network/public/mojom/websocket.mojom.h"
+#include "services/service_manager/public/cpp/binder_registry.h"
+#include "third_party/blink/public/common/loader/url_loader_throttle.h"
+
+#ifdef EYEO_INTERCEPT_DEBUG_URL
+#include "components/adblock/content/browser/adblock_url_loader_factory_for_test.h"
+#endif
+
+#if BUILDFLAG(ENABLE_EXTENSIONS)
+#include "chrome/browser/extensions/extension_util.h"
+#endif
+
+namespace {
+
+bool IsFilteringNeeded(content::RenderFrameHost* frame) {
+  if (frame) {
+    auto* profile =
+        Profile::FromBrowserContext(frame->GetProcess()->GetBrowserContext());
+    if (profile) {
+      // Filtering may be needed if there's at least one enabled
+      // FilteringConfiguration.
+      return base::ranges::any_of(
+          adblock::SubscriptionServiceFactory::GetForBrowserContext(profile)
+              ->GetInstalledFilteringConfigurations(),
+          &adblock::FilteringConfiguration::IsEnabled);
+    }
+  }
+  return false;
+}
+
+// Owns all of the AdblockURLLoaderFactory for a given Profile.
+class AdblockContextData : public base::SupportsUserData::Data {
+ public:
+  AdblockContextData(const AdblockContextData&) = delete;
+  AdblockContextData& operator=(const AdblockContextData&) = delete;
+  ~AdblockContextData() override = default;
+
+  static void StartProxying(
+      Profile* profile,
+      content::RenderFrameHost* frame,
+      int render_process_id,
+      mojo::PendingReceiver<network::mojom::URLLoaderFactory> receiver,
+      mojo::PendingRemote<network::mojom::URLLoaderFactory> target_factory,
+      bool use_test_loader) {
+    const void* const kAdblockContextUserDataKey = &kAdblockContextUserDataKey;
+    auto* self = static_cast<AdblockContextData*>(
+        profile->GetUserData(kAdblockContextUserDataKey));
+    if (!self) {
+      self = new AdblockContextData();
+      profile->SetUserData(kAdblockContextUserDataKey, base::WrapUnique(self));
+    }
+    auto* browser_context =
+        content::WebContents::FromRenderFrameHost(frame)->GetBrowserContext();
+    adblock::AdblockURLLoaderFactoryConfig config{
+        adblock::SubscriptionServiceFactory::GetForBrowserContext(
+            browser_context),
+        adblock::ResourceClassificationRunnerFactory::GetForBrowserContext(
+            browser_context),
+        adblock::ElementHiderFactory::GetForBrowserContext(browser_context),
+        adblock::SitekeyStorageFactory::GetForBrowserContext(browser_context),
+        adblock::ContentSecurityPolicyInjectorFactory::GetForBrowserContext(
+            browser_context)};
+#ifdef EYEO_INTERCEPT_DEBUG_URL
+    if (use_test_loader) {
+      auto proxy = std::make_unique<adblock::AdblockURLLoaderFactoryForTest>(
+          std::move(config),
+          content::GlobalRenderFrameHostId(render_process_id,
+                                           frame->GetRoutingID()),
+          std::move(receiver), std::move(target_factory),
+          embedder_support::GetUserAgent(),
+          base::BindOnce(&AdblockContextData::RemoveProxy,
+                         self->weak_factory_.GetWeakPtr()),
+          adblock::SubscriptionServiceFactory::GetForBrowserContext(
+              Profile::FromBrowserContext(
+                  frame->GetProcess()->GetBrowserContext())));
+      self->proxies_.emplace(std::move(proxy));
+      return;
+    }
+#endif
+    auto proxy = std::make_unique<adblock::AdblockURLLoaderFactory>(
+        std::move(config),
+        content::GlobalRenderFrameHostId(render_process_id,
+                                         frame->GetRoutingID()),
+        std::move(receiver), std::move(target_factory),
+        embedder_support::GetUserAgent(),
+        base::BindOnce(&AdblockContextData::RemoveProxy,
+                       self->weak_factory_.GetWeakPtr()));
+    self->proxies_.emplace(std::move(proxy));
+  }
+
+ private:
+  void RemoveProxy(adblock::AdblockURLLoaderFactory* proxy) {
+    auto it = proxies_.find(proxy);
+    DCHECK(it != proxies_.end());
+    proxies_.erase(it);
+  }
+
+  AdblockContextData() = default;
+
+  std::set<std::unique_ptr<adblock::AdblockURLLoaderFactory>,
+           base::UniquePtrComparator>
+      proxies_;
+
+  base::WeakPtrFactory<AdblockContextData> weak_factory_{this};
+};
+
+}  // namespace
+
+AdblockContentBrowserClient::AdblockContentBrowserClient() = default;
+
+AdblockContentBrowserClient::~AdblockContentBrowserClient() = default;
+
+#if BUILDFLAG(ENABLE_EXTENSIONS)
+// static
+bool AdblockContentBrowserClient::force_adblock_proxy_for_testing_ = false;
+
+// static
+void AdblockContentBrowserClient::ForceAdblockProxyForTesting() {
+  force_adblock_proxy_for_testing_ = true;
+}
+#endif
+
+bool AdblockContentBrowserClient::WillInterceptWebSocket(
+    content::RenderFrameHost* frame) {
+  if (IsFilteringNeeded(frame)) {
+    return true;
+  }
+
+  return ChromeContentBrowserClient::WillInterceptWebSocket(frame);
+}
+
+void AdblockContentBrowserClient::CreateWebSocket(
+    content::RenderFrameHost* frame,
+    WebSocketFactory factory,
+    const GURL& url,
+    const net::SiteForCookies& site_for_cookies,
+    const absl::optional<std::string>& user_agent,
+    mojo::PendingRemote<network::mojom::WebSocketHandshakeClient>
+        handshake_client) {
+  if (IsFilteringNeeded(frame)) {
+    CreateWebSocketInternal(frame->GetGlobalId(), std::move(factory), url,
+                            site_for_cookies, user_agent,
+                            std::move(handshake_client));
+  } else {
+    DCHECK(ChromeContentBrowserClient::WillInterceptWebSocket(frame));
+    ChromeContentBrowserClient::CreateWebSocket(frame, std::move(factory), url,
+                                                site_for_cookies, user_agent,
+                                                std::move(handshake_client));
+  }
+}
+
+void AdblockContentBrowserClient::CreateWebSocketInternal(
+    content::GlobalRenderFrameHostId render_frame_host_id,
+    WebSocketFactory factory,
+    const GURL& url,
+    const net::SiteForCookies& site_for_cookies,
+    const absl::optional<std::string>& user_agent,
+    mojo::PendingRemote<network::mojom::WebSocketHandshakeClient>
+        handshake_client) {
+  auto* frame = content::RenderFrameHost::FromID(render_frame_host_id);
+  if (!frame) {
+    return;
+  }
+  auto* browser_context = frame->GetProcess()->GetBrowserContext();
+  auto* subscription_service =
+      adblock::SubscriptionServiceFactory::GetForBrowserContext(
+          browser_context);
+  auto* classification_runner =
+      adblock::ResourceClassificationRunnerFactory::GetForBrowserContext(
+          browser_context);
+  classification_runner->CheckRequestFilterMatchForWebSocket(
+      subscription_service->GetCurrentSnapshot(), url, render_frame_host_id,
+      base::BindOnce(
+          &AdblockContentBrowserClient::OnWebSocketFilterCheckCompleted,
+          weak_factory_.GetWeakPtr(), render_frame_host_id, std::move(factory),
+          url, site_for_cookies, user_agent, std::move(handshake_client)));
+}
+
+void AdblockContentBrowserClient::OnWebSocketFilterCheckCompleted(
+    content::GlobalRenderFrameHostId render_frame_host_id,
+    ChromeContentBrowserClient::WebSocketFactory factory,
+    const GURL& url,
+    const net::SiteForCookies& site_for_cookies,
+    const absl::optional<std::string>& user_agent,
+    mojo::PendingRemote<network::mojom::WebSocketHandshakeClient>
+        handshake_client,
+    adblock::FilterMatchResult result) {
+  auto* frame = content::RenderFrameHost::FromID(render_frame_host_id);
+  if (!frame) {
+    return;
+  }
+  const bool has_blocking_filter =
+      result == adblock::FilterMatchResult::kBlockRule;
+  if (!has_blocking_filter) {
+    VLOG(1) << "[eyeo] Web socket allowed for " << url;
+    if (ChromeContentBrowserClient::WillInterceptWebSocket(frame)) {
+      ChromeContentBrowserClient::CreateWebSocket(
+          frame, std::move(factory), url, site_for_cookies, user_agent,
+          std::move(handshake_client));
+      return;
+    }
+
+    std::vector<network::mojom::HttpHeaderPtr> headers;
+    if (user_agent) {
+      headers.push_back(network::mojom::HttpHeader::New(
+          net::HttpRequestHeaders::kUserAgent, *user_agent));
+    }
+    std::move(factory).Run(url, std::move(headers), std::move(handshake_client),
+                           mojo::NullRemote(), mojo::NullRemote());
+  }
+
+  VLOG(1) << "[eyeo] Web socket blocked for " << url;
+}
+
+bool AdblockContentBrowserClient::WillCreateURLLoaderFactory(
+    content::BrowserContext* browser_context,
+    content::RenderFrameHost* frame,
+    int render_process_id,
+    URLLoaderFactoryType type,
+    const url::Origin& request_initiator,
+    absl::optional<int64_t> navigation_id,
+    ukm::SourceIdObj ukm_source_id,
+    mojo::PendingReceiver<network::mojom::URLLoaderFactory>* factory_receiver,
+    mojo::PendingRemote<network::mojom::TrustedURLLoaderHeaderClient>*
+        header_client,
+    bool* bypass_redirect_checks,
+    bool* disable_secure_dns,
+    network::mojom::URLLoaderFactoryOverridePtr* factory_override,
+    scoped_refptr<base::SequencedTaskRunner> navigation_response_task_runner) {
+  // Create Chromium proxy first as WebRequestProxyingURLLoaderFactory logic
+  // depends on being first proxy
+  bool use_chrome_proxy =
+      ChromeContentBrowserClient::WillCreateURLLoaderFactory(
+          browser_context, frame, render_process_id, type, request_initiator,
+          navigation_id, ukm_source_id, factory_receiver, header_client,
+          bypass_redirect_checks, disable_secure_dns, factory_override,
+          navigation_response_task_runner);
+  auto* profile = frame ? Profile::FromBrowserContext(
+                              frame->GetProcess()->GetBrowserContext())
+                        : nullptr;
+
+#if BUILDFLAG(ENABLE_EXTENSIONS)
+  if (!force_adblock_proxy_for_testing_ &&
+      request_initiator.scheme() == extensions::kExtensionScheme) {
+    VLOG(1) << "[eyeo] Do not use adblock proxy for extensions requests "
+               "[extension id:"
+            << request_initiator.host() << "].";
+    return use_chrome_proxy;
+  }
+#endif
+
+  bool use_adblock_proxy =
+      (type == URLLoaderFactoryType::kDocumentSubResource ||
+       type == URLLoaderFactoryType::kNavigation) &&
+      IsFilteringNeeded(frame);
+
+  bool use_test_loader = false;
+#ifdef EYEO_INTERCEPT_DEBUG_URL
+  content::WebContents* wc = content::WebContents::FromRenderFrameHost(frame);
+  use_test_loader =
+      (type ==
+       content::ContentBrowserClient::URLLoaderFactoryType::kNavigation) &&
+      wc->GetVisibleURL().is_valid() &&
+      wc->GetVisibleURL().host() ==
+          adblock::AdblockURLLoaderFactoryForTest::kAdblockDebugDataHostName;
+  use_adblock_proxy |= use_test_loader;
+#endif
+
+  if (use_adblock_proxy) {
+    auto proxied_receiver = std::move(*factory_receiver);
+    mojo::PendingRemote<network::mojom::URLLoaderFactory> target_factory_remote;
+    *factory_receiver = target_factory_remote.InitWithNewPipeAndPassReceiver();
+    AdblockContextData::StartProxying(
+        profile, frame, render_process_id, std::move(proxied_receiver),
+        std::move(target_factory_remote), use_test_loader);
+  }
+  return use_adblock_proxy || use_chrome_proxy;
+}
diff --git a/chrome/browser/adblock/adblock_content_browser_client.h b/chrome/browser/adblock/adblock_content_browser_client.h
new file mode 100644
--- /dev/null
+++ b/chrome/browser/adblock/adblock_content_browser_client.h
@@ -0,0 +1,100 @@
+/*
+ * This file is part of eyeo Chromium SDK,
+ * Copyright (C) 2006-present eyeo GmbH
+ *
+ * eyeo Chromium SDK is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 3 as
+ * published by the Free Software Foundation.
+ *
+ * eyeo Chromium SDK is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with eyeo Chromium SDK.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+#ifndef CHROME_BROWSER_ADBLOCK_ADBLOCK_CONTENT_BROWSER_CLIENT_H_
+#define CHROME_BROWSER_ADBLOCK_ADBLOCK_CONTENT_BROWSER_CLIENT_H_
+
+#include "build/buildflag.h"
+#include "chrome/browser/chrome_content_browser_client.h"
+
+namespace adblock {
+enum class FilterMatchResult;
+}  // namespace adblock
+
+/**
+ * @brief Intercepts network and UI events to inject ad-filtering.
+ * Provides ad-filtering implementations of URLLoaderThrottles.
+ * Binds a mojo connection between Renderer processes and the
+ * Browser-process-based ResourceClassificationRunner.
+ * Lives in browser process UI thread.
+ */
+class AdblockContentBrowserClient : public ChromeContentBrowserClient {
+ public:
+  AdblockContentBrowserClient();
+  ~AdblockContentBrowserClient() override;
+
+#if BUILDFLAG(ENABLE_EXTENSIONS)
+  // Enable ad filtering also for requests initiated by extensions.
+  // This allows implementing extension-driven browser tests.
+  // In production code, requests from extensions are not blocked.
+  static void ForceAdblockProxyForTesting();
+#endif
+
+  bool WillInterceptWebSocket(content::RenderFrameHost* frame) override;
+  void CreateWebSocket(
+      content::RenderFrameHost* frame,
+      WebSocketFactory factory,
+      const GURL& url,
+      const net::SiteForCookies& site_for_cookies,
+      const absl::optional<std::string>& user_agent,
+      mojo::PendingRemote<network::mojom::WebSocketHandshakeClient>
+          handshake_client) override;
+
+  bool WillCreateURLLoaderFactory(
+      content::BrowserContext* browser_context,
+      content::RenderFrameHost* frame,
+      int render_process_id,
+      URLLoaderFactoryType type,
+      const url::Origin& request_initiator,
+      absl::optional<int64_t> navigation_id,
+      ukm::SourceIdObj ukm_source_id,
+      mojo::PendingReceiver<network::mojom::URLLoaderFactory>* factory_receiver,
+      mojo::PendingRemote<network::mojom::TrustedURLLoaderHeaderClient>*
+          header_client,
+      bool* bypass_redirect_checks,
+      bool* disable_secure_dns,
+      network::mojom::URLLoaderFactoryOverridePtr* factory_override,
+      scoped_refptr<base::SequencedTaskRunner> navigation_response_task_runner)
+      override;
+
+ private:
+  void CreateWebSocketInternal(
+      content::GlobalRenderFrameHostId render_frame_host_id,
+      WebSocketFactory factory,
+      const GURL& url,
+      const net::SiteForCookies& site_for_cookies,
+      const absl::optional<std::string>& user_agent,
+      mojo::PendingRemote<network::mojom::WebSocketHandshakeClient>
+          handshake_client);
+  void OnWebSocketFilterCheckCompleted(
+      content::GlobalRenderFrameHostId render_frame_host_id,
+      ChromeContentBrowserClient::WebSocketFactory factory,
+      const GURL& url,
+      const net::SiteForCookies& site_for_cookies,
+      const absl::optional<std::string>& user_agent,
+      mojo::PendingRemote<network::mojom::WebSocketHandshakeClient>
+          handshake_client,
+      adblock::FilterMatchResult result);
+
+  base::WeakPtrFactory<AdblockContentBrowserClient> weak_factory_{this};
+
+#if BUILDFLAG(ENABLE_EXTENSIONS)
+  static bool force_adblock_proxy_for_testing_;
+#endif
+};
+
+#endif  // CHROME_BROWSER_ADBLOCK_ADBLOCK_CONTENT_BROWSER_CLIENT_H_
diff --git a/chrome/browser/adblock/adblock_content_browser_client_unittest.cc b/chrome/browser/adblock/adblock_content_browser_client_unittest.cc
new file mode 100644
--- /dev/null
+++ b/chrome/browser/adblock/adblock_content_browser_client_unittest.cc
@@ -0,0 +1,203 @@
+/*
+ * This file is part of eyeo Chromium SDK,
+ * Copyright (C) 2006-present eyeo GmbH
+ *
+ * eyeo Chromium SDK is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 3 as
+ * published by the Free Software Foundation.
+ *
+ * eyeo Chromium SDK is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with eyeo Chromium SDK.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+#include "chrome/browser/adblock/adblock_content_browser_client.h"
+
+#include "base/callback_list.h"
+#include "base/memory/raw_ptr.h"
+#include "base/run_loop.h"
+#include "base/test/gmock_move_support.h"
+#include "base/test/mock_callback.h"
+#include "chrome/browser/adblock/resource_classification_runner_factory.h"
+#include "chrome/browser/adblock/subscription_service_factory.h"
+#include "chrome/browser/profiles/profile.h"
+#include "chrome/test/base/chrome_render_view_host_test_harness.h"
+#include "components/adblock/content/browser/test/mock_resource_classification_runner.h"
+#include "components/adblock/core/common/adblock_prefs.h"
+#include "components/adblock/core/common/content_type.h"
+#include "components/adblock/core/subscription/installed_subscription.h"
+#include "components/adblock/core/subscription/subscription_service.h"
+#include "components/adblock/core/subscription/test/mock_subscription_collection.h"
+#include "components/adblock/core/subscription/test/mock_subscription_service.h"
+#include "components/keyed_service/core/keyed_service.h"
+#include "content/public/browser/content_browser_client.h"
+#include "content/public/test/mock_render_process_host.h"
+#include "content/public/test/test_renderer_host.h"
+#include "gmock/gmock.h"
+#include "services/network/public/mojom/network_context.mojom.h"
+#include "services/network/public/mojom/websocket.mojom.h"
+#include "testing/gtest/include/gtest/gtest.h"
+
+using testing::_;
+using testing::Return;
+
+namespace adblock {
+
+class AdblockContentBrowserClientUnitTest
+    : public ChromeRenderViewHostTestHarness {
+ public:
+  TestingProfile::TestingFactories GetTestingFactories() const override {
+    return {std::make_pair(
+                SubscriptionServiceFactory::GetInstance(),
+                base::BindRepeating([](content::BrowserContext* bc)
+                                        -> std::unique_ptr<KeyedService> {
+                  return std::make_unique<MockSubscriptionService>();
+                })),
+            std::make_pair(
+                ResourceClassificationRunnerFactory::GetInstance(),
+                base::BindRepeating([](content::BrowserContext* bc)
+                                        -> std::unique_ptr<KeyedService> {
+                  return std::make_unique<MockResourceClassificationRunner>();
+                }))};
+  }
+
+  void SetUp() override {
+    ChromeRenderViewHostTestHarness::SetUp();
+
+    subscription_service_ = static_cast<MockSubscriptionService*>(
+        SubscriptionServiceFactory::GetForBrowserContext(profile()));
+    resource_classification_runner_ =
+        static_cast<MockResourceClassificationRunner*>(
+            ResourceClassificationRunnerFactory::GetForBrowserContext(
+                profile()));
+  }
+
+  void TearDown() override {
+    subscription_service_ = nullptr;
+    resource_classification_runner_ = nullptr;
+    ChromeRenderViewHostTestHarness::TearDown();
+  }
+
+  raw_ptr<MockSubscriptionService> subscription_service_;
+  raw_ptr<MockResourceClassificationRunner> resource_classification_runner_;
+};
+
+TEST_F(AdblockContentBrowserClientUnitTest,
+       WillInterceptWebSocketWhenFilteringEnabled) {
+  AdblockContentBrowserClient content_client;
+  subscription_service_->WillRequireFiltering(true);
+  EXPECT_TRUE(content_client.WillInterceptWebSocket(main_rfh()));
+}
+
+TEST_F(AdblockContentBrowserClientUnitTest,
+       WillNotInterceptWebSocketWhenFilteringDisabled) {
+  AdblockContentBrowserClient content_client;
+  subscription_service_->WillRequireFiltering(false);
+  EXPECT_FALSE(content_client.WillInterceptWebSocket(main_rfh()));
+}
+
+TEST_F(AdblockContentBrowserClientUnitTest,
+       RenderFrameHostDiesBeforeClassificationFinished) {
+  const auto kSocketUrl = GURL("wss://domain.com/test");
+  subscription_service_->WillRequireFiltering(true);
+  EXPECT_CALL(*subscription_service_, GetCurrentSnapshot()).WillOnce([]() {
+    SubscriptionService::Snapshot snapshot;
+    snapshot.push_back(std::make_unique<MockSubscriptionCollection>());
+    return snapshot;
+  });
+  CheckFilterMatchCallback classification_callback;
+  EXPECT_CALL(*resource_classification_runner_,
+              CheckRequestFilterMatchForWebSocket(_, kSocketUrl,
+                                                  main_rfh()->GetGlobalId(), _))
+      .WillOnce(MoveArg<3>(&classification_callback));
+
+  AdblockContentBrowserClient content_client;
+  base::MockCallback<content::ContentBrowserClient::WebSocketFactory>
+      web_socket_factory;
+  // The web_socket_factory callback will never be called because the
+  // associated RenderFrameHost will be dead.
+  EXPECT_CALL(web_socket_factory, Run(_, _, _, _, _)).Times(0);
+
+  const net::SiteForCookies site_for_cookies;
+  content_client.CreateWebSocket(main_rfh(), web_socket_factory.Get(),
+                                 kSocketUrl, site_for_cookies, absl::nullopt,
+                                 {});
+  // Tab is closed.
+  DeleteContents();
+
+  // Classification finishes now. It will not trigger a call to
+  // |web_socket_factory| because the RFH is dead.
+  std::move(classification_callback).Run(FilterMatchResult::kBlockRule);
+
+  task_environment()->RunUntilIdle();
+}
+
+TEST_F(AdblockContentBrowserClientUnitTest, WebSocketAllowed) {
+  subscription_service_->WillRequireFiltering(true);
+  const auto kSocketUrl = GURL("wss://domain.com/test");
+  EXPECT_CALL(*subscription_service_, GetCurrentSnapshot()).WillOnce([]() {
+    SubscriptionService::Snapshot snapshot;
+    snapshot.push_back(std::make_unique<MockSubscriptionCollection>());
+    return snapshot;
+  });
+  CheckFilterMatchCallback classification_callback;
+  EXPECT_CALL(*resource_classification_runner_,
+              CheckRequestFilterMatchForWebSocket(_, kSocketUrl,
+                                                  main_rfh()->GetGlobalId(), _))
+      .WillOnce(MoveArg<3>(&classification_callback));
+
+  AdblockContentBrowserClient content_client;
+  base::MockCallback<content::ContentBrowserClient::WebSocketFactory>
+      web_socket_factory;
+  // The web_socket_factory callback will be called to let the web socket
+  // continue connecting.
+  EXPECT_CALL(web_socket_factory, Run(kSocketUrl, _, _, _, _));
+
+  const net::SiteForCookies site_for_cookies;
+  content_client.CreateWebSocket(main_rfh(), web_socket_factory.Get(),
+                                 kSocketUrl, site_for_cookies, absl::nullopt,
+                                 {});
+
+  // Classification finishes now. It will trigger a call to |web_socket_factory|
+  std::move(classification_callback).Run(FilterMatchResult::kAllowRule);
+
+  task_environment()->RunUntilIdle();
+}
+
+TEST_F(AdblockContentBrowserClientUnitTest, WebSocketBlocked) {
+  subscription_service_->WillRequireFiltering(true);
+  const auto kSocketUrl = GURL("wss://domain.com/test");
+  EXPECT_CALL(*subscription_service_, GetCurrentSnapshot()).WillOnce([]() {
+    SubscriptionService::Snapshot snapshot;
+    snapshot.push_back(std::make_unique<MockSubscriptionCollection>());
+    return snapshot;
+  });
+  CheckFilterMatchCallback classification_callback;
+  EXPECT_CALL(*resource_classification_runner_,
+              CheckRequestFilterMatchForWebSocket(_, kSocketUrl,
+                                                  main_rfh()->GetGlobalId(), _))
+      .WillOnce(MoveArg<3>(&classification_callback));
+
+  AdblockContentBrowserClient content_client;
+  base::MockCallback<content::ContentBrowserClient::WebSocketFactory>
+      web_socket_factory;
+  // The web_socket_factory callback will not be called as to disallow
+  // connection.
+  EXPECT_CALL(web_socket_factory, Run(kSocketUrl, _, _, _, _)).Times(0);
+
+  const net::SiteForCookies site_for_cookies;
+  content_client.CreateWebSocket(main_rfh(), web_socket_factory.Get(),
+                                 kSocketUrl, site_for_cookies, absl::nullopt,
+                                 {});
+
+  // Classification finishes now.
+  std::move(classification_callback).Run(FilterMatchResult::kBlockRule);
+
+  task_environment()->RunUntilIdle();
+}
+
+}  // namespace adblock
diff --git a/chrome/browser/adblock/adblock_controller_factory.cc b/chrome/browser/adblock/adblock_controller_factory.cc
new file mode 100644
--- /dev/null
+++ b/chrome/browser/adblock/adblock_controller_factory.cc
@@ -0,0 +1,67 @@
+/*
+ * This file is part of eyeo Chromium SDK,
+ * Copyright (C) 2006-present eyeo GmbH
+ *
+ * eyeo Chromium SDK is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 3 as
+ * published by the Free Software Foundation.
+ *
+ * eyeo Chromium SDK is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with eyeo Chromium SDK.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+#include "chrome/browser/adblock/adblock_controller_factory.h"
+
+#include "chrome/browser/adblock/subscription_service_factory.h"
+#include "chrome/browser/browser_process.h"
+#include "chrome/browser/profiles/incognito_helpers.h"
+#include "chrome/browser/profiles/profile.h"
+#include "components/adblock/core/adblock_controller.h"
+
+namespace adblock {
+
+// static
+AdblockController* AdblockControllerFactory::GetForBrowserContext(
+    content::BrowserContext* context) {
+  return static_cast<AdblockController*>(
+      GetInstance()->GetServiceForBrowserContext(context, true));
+}
+
+// static
+AdblockControllerFactory* AdblockControllerFactory::GetInstance() {
+  static base::NoDestructor<AdblockControllerFactory> instance;
+  return instance.get();
+}
+
+AdblockControllerFactory::AdblockControllerFactory()
+    : AdblockControllerFactoryBase() {
+  DependsOn(SubscriptionServiceFactory::GetInstance());
+}
+
+AdblockControllerFactory::~AdblockControllerFactory() = default;
+
+SubscriptionService* AdblockControllerFactory::GetSubscriptionService(
+    content::BrowserContext* context) const {
+  return SubscriptionServiceFactory::GetForBrowserContext(context);
+}
+
+PrefService* AdblockControllerFactory::GetPrefs(
+    content::BrowserContext* context) const {
+  return Profile::FromBrowserContext(context)->GetOriginalProfile()->GetPrefs();
+}
+
+const std::string& AdblockControllerFactory::GetLocale() const {
+  return g_browser_process->GetApplicationLocale();
+}
+
+content::BrowserContext* AdblockControllerFactory::GetBrowserContextToUse(
+    content::BrowserContext* context) const {
+  return chrome::GetBrowserContextRedirectedInIncognito(context);
+}
+
+}  // namespace adblock
diff --git a/chrome/browser/adblock/adblock_controller_factory.h b/chrome/browser/adblock/adblock_controller_factory.h
new file mode 100644
--- /dev/null
+++ b/chrome/browser/adblock/adblock_controller_factory.h
@@ -0,0 +1,49 @@
+/*
+ * This file is part of eyeo Chromium SDK,
+ * Copyright (C) 2006-present eyeo GmbH
+ *
+ * eyeo Chromium SDK is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 3 as
+ * published by the Free Software Foundation.
+ *
+ * eyeo Chromium SDK is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with eyeo Chromium SDK.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+#ifndef CHROME_BROWSER_ADBLOCK_ADBLOCK_CONTROLLER_FACTORY_H_
+#define CHROME_BROWSER_ADBLOCK_ADBLOCK_CONTROLLER_FACTORY_H_
+
+#include "base/no_destructor.h"
+#include "components/adblock/content/browser/adblock_controller_factory_base.h"
+
+namespace adblock {
+
+class AdblockController;
+class AdblockControllerFactory : public AdblockControllerFactoryBase {
+ public:
+  static AdblockController* GetForBrowserContext(
+      content::BrowserContext* context);
+  static AdblockControllerFactory* GetInstance();
+
+ protected:
+  PrefService* GetPrefs(content::BrowserContext* context) const override;
+  const std::string& GetLocale() const override;
+  SubscriptionService* GetSubscriptionService(
+      content::BrowserContext* context) const override;
+
+ private:
+  friend class base::NoDestructor<AdblockControllerFactory>;
+  AdblockControllerFactory();
+  ~AdblockControllerFactory() override;
+  content::BrowserContext* GetBrowserContextToUse(
+      content::BrowserContext* context) const override;
+};
+
+}  // namespace adblock
+
+#endif  // CHROME_BROWSER_ADBLOCK_ADBLOCK_CONTROLLER_FACTORY_H_
diff --git a/chrome/browser/adblock/adblock_telemetry_service_factory.cc b/chrome/browser/adblock/adblock_telemetry_service_factory.cc
new file mode 100644
--- /dev/null
+++ b/chrome/browser/adblock/adblock_telemetry_service_factory.cc
@@ -0,0 +1,63 @@
+/*
+ * This file is part of eyeo Chromium SDK,
+ * Copyright (C) 2006-present eyeo GmbH
+ *
+ * eyeo Chromium SDK is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 3 as
+ * published by the Free Software Foundation.
+ *
+ * eyeo Chromium SDK is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with eyeo Chromium SDK.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+#include "chrome/browser/adblock/adblock_telemetry_service_factory.h"
+
+#include "base/no_destructor.h"
+#include "chrome/browser/adblock/adblock_controller_factory.h"
+#include "chrome/browser/adblock/subscription_service_factory.h"
+#include "chrome/browser/profiles/incognito_helpers.h"
+#include "chrome/browser/profiles/profile.h"
+#include "components/adblock/core/adblock_telemetry_service.h"
+
+namespace adblock {
+
+// static
+AdblockTelemetryService* AdblockTelemetryServiceFactory::GetForProfile(
+    Profile* profile) {
+  return static_cast<AdblockTelemetryService*>(
+      GetInstance()->GetServiceForBrowserContext(profile, true));
+}
+// static
+AdblockTelemetryServiceFactory* AdblockTelemetryServiceFactory::GetInstance() {
+  static base::NoDestructor<AdblockTelemetryServiceFactory> instance;
+  return instance.get();
+}
+
+AdblockTelemetryServiceFactory::AdblockTelemetryServiceFactory()
+    : AdblockTelemetryServiceFactoryBase() {
+  DependsOn(AdblockControllerFactory::GetInstance());
+}
+
+AdblockTelemetryServiceFactory::~AdblockTelemetryServiceFactory() = default;
+
+SubscriptionService* AdblockTelemetryServiceFactory::GetSubscriptionService(
+    content::BrowserContext* context) const {
+  return SubscriptionServiceFactory::GetForBrowserContext(context);
+}
+
+PrefService* AdblockTelemetryServiceFactory::GetPrefs(
+    content::BrowserContext* context) const {
+  return Profile::FromBrowserContext(context)->GetOriginalProfile()->GetPrefs();
+}
+
+content::BrowserContext* AdblockTelemetryServiceFactory::GetBrowserContextToUse(
+    content::BrowserContext* context) const {
+  return chrome::GetBrowserContextRedirectedInIncognito(context);
+}
+
+}  // namespace adblock
diff --git a/chrome/browser/adblock/adblock_telemetry_service_factory.h b/chrome/browser/adblock/adblock_telemetry_service_factory.h
new file mode 100644
--- /dev/null
+++ b/chrome/browser/adblock/adblock_telemetry_service_factory.h
@@ -0,0 +1,51 @@
+/*
+ * This file is part of eyeo Chromium SDK,
+ * Copyright (C) 2006-present eyeo GmbH
+ *
+ * eyeo Chromium SDK is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 3 as
+ * published by the Free Software Foundation.
+ *
+ * eyeo Chromium SDK is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with eyeo Chromium SDK.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+#ifndef CHROME_BROWSER_ADBLOCK_ADBLOCK_TELEMETRY_SERVICE_FACTORY_H_
+#define CHROME_BROWSER_ADBLOCK_ADBLOCK_TELEMETRY_SERVICE_FACTORY_H_
+
+#include "base/no_destructor.h"
+#include "components/adblock/content/browser/adblock_telemetry_service_factory_base.h"
+
+class Profile;
+
+namespace adblock {
+class AdblockTelemetryService;
+class AdblockTelemetryServiceFactory
+    : public AdblockTelemetryServiceFactoryBase {
+ public:
+  static AdblockTelemetryService* GetForProfile(Profile* profile);
+  static AdblockTelemetryServiceFactory* GetInstance();
+
+ protected:
+  PrefService* GetPrefs(content::BrowserContext* context) const override;
+  SubscriptionService* GetSubscriptionService(
+      content::BrowserContext* context) const override;
+
+ private:
+  friend class base::NoDestructor<AdblockTelemetryServiceFactory>;
+  AdblockTelemetryServiceFactory();
+  ~AdblockTelemetryServiceFactory() override;
+
+  // BrowserContextKeyedServiceFactory:
+  content::BrowserContext* GetBrowserContextToUse(
+      content::BrowserContext* context) const override;
+};
+
+}  // namespace adblock
+
+#endif  // CHROME_BROWSER_ADBLOCK_ADBLOCK_TELEMETRY_SERVICE_FACTORY_H_
diff --git a/chrome/browser/adblock/android/BUILD.gn b/chrome/browser/adblock/android/BUILD.gn
new file mode 100644
--- /dev/null
+++ b/chrome/browser/adblock/android/BUILD.gn
@@ -0,0 +1,68 @@
+# This file is part of eyeo Chromium SDK,
+# Copyright (C) 2006-present eyeo GmbH
+# eyeo Chromium SDK is free software: you can redistribute it and/or modify
+# it under the terms of the GNU General Public License version 3 as
+# published by the Free Software Foundation.
+# eyeo Chromium SDK is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+# You should have received a copy of the GNU General Public License
+# along with eyeo Chromium SDK.  If not, see <http://www.gnu.org/licenses/>.
+
+
+import("//build/config/android/rules.gni")
+
+android_library("adblock_java_tests") {
+  testonly = true
+
+  sources = [
+    "javatests/src/org/chromium/chrome/browser/adblock/AdblockControllerTest.java",
+    "javatests/src/org/chromium/chrome/browser/adblock/FilteringConfigurationTest.java",
+    "javatests/src/org/chromium/chrome/browser/adblock/ResourceClassificationNotifierTest.java",
+    "javatests/src/org/chromium/chrome/browser/adblock/TestPagesCircumventionTest.java",
+    "javatests/src/org/chromium/chrome/browser/adblock/TestPagesCspTest.java",
+    "javatests/src/org/chromium/chrome/browser/adblock/TestPagesElemhideEmuInvTest.java",
+    "javatests/src/org/chromium/chrome/browser/adblock/TestPagesElemhideEmuTest.java",
+    "javatests/src/org/chromium/chrome/browser/adblock/TestPagesElemhideTest.java",
+    "javatests/src/org/chromium/chrome/browser/adblock/TestPagesExceptionTest.java",
+    "javatests/src/org/chromium/chrome/browser/adblock/TestPagesFilterTest.java",
+    "javatests/src/org/chromium/chrome/browser/adblock/TestPagesHeaderFilterTest.java",
+    "javatests/src/org/chromium/chrome/browser/adblock/TestPagesHelper.java",
+    "javatests/src/org/chromium/chrome/browser/adblock/TestPagesRewriteTest.java",
+    "javatests/src/org/chromium/chrome/browser/adblock/TestPagesSiteKeyTest.java",
+    "javatests/src/org/chromium/chrome/browser/adblock/TestPagesSnippetsTest.java",
+    "javatests/src/org/chromium/chrome/browser/adblock/TestPagesWebsocketTest.java",
+  ]
+
+
+  deps = [
+    "//base:base_java",
+    "//base:base_java_test_support",
+    "//chrome/android:chrome_java",
+    "//chrome/browser/flags:java",
+    "//chrome/browser/settings:test_support_java",
+    "//chrome/browser/tab:java",
+    "//chrome/browser/tabmodel:java",
+    "//chrome/test/android:chrome_java_integration_test_support",
+    "//chrome/test/android:chrome_java_test_support_common",
+    "//components/adblock/android:adblock_controller_java",
+    "//components/adblock/android:adblock_java_tests_base",
+    "//components/infobars/android:java",
+    "//components/infobars/core:infobar_enums_java",
+    "//components/messages/android/test:test_support_java",
+    "//content/public/android:content_full_java",
+    "//content/public/android:content_main_dex_java",
+    "//content/public/test/android:content_java_test_support",
+    "//net/android:net_java_test_support",
+    "//third_party/androidx:androidx_fragment_fragment_java",
+    "//third_party/androidx:androidx_test_monitor_java",
+    "//third_party/androidx:androidx_test_runner_java",
+    "//third_party/hamcrest:hamcrest_core_java",
+    "//third_party/hamcrest:hamcrest_library_java",
+    "//third_party/junit:junit",
+    "//ui/android:ui_no_recycler_view_java",
+    "//url:gurl_java",
+  ]
+
+}
diff --git a/chrome/browser/adblock/content_security_policy_injector_factory.cc b/chrome/browser/adblock/content_security_policy_injector_factory.cc
new file mode 100644
--- /dev/null
+++ b/chrome/browser/adblock/content_security_policy_injector_factory.cc
@@ -0,0 +1,69 @@
+/*
+ * This file is part of eyeo Chromium SDK,
+ * Copyright (C) 2006-present eyeo GmbH
+ *
+ * eyeo Chromium SDK is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 3 as
+ * published by the Free Software Foundation.
+ *
+ * eyeo Chromium SDK is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with eyeo Chromium SDK.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+#include "chrome/browser/adblock/content_security_policy_injector_factory.h"
+
+#include <memory>
+
+#include "chrome/browser/adblock/subscription_service_factory.h"
+#include "chrome/browser/profiles/incognito_helpers.h"
+#include "chrome/browser/profiles/profile.h"
+#include "components/adblock/content/browser/content_security_policy_injector_impl.h"
+#include "components/adblock/content/browser/frame_hierarchy_builder.h"
+#include "components/keyed_service/content/browser_context_dependency_manager.h"
+#include "content/public/browser/browser_context.h"
+
+namespace adblock {
+
+// static
+ContentSecurityPolicyInjector*
+ContentSecurityPolicyInjectorFactory::GetForBrowserContext(
+    content::BrowserContext* context) {
+  return static_cast<ContentSecurityPolicyInjector*>(
+      GetInstance()->GetServiceForBrowserContext(context, true));
+}
+// static
+ContentSecurityPolicyInjectorFactory*
+ContentSecurityPolicyInjectorFactory::GetInstance() {
+  static base::NoDestructor<ContentSecurityPolicyInjectorFactory> instance;
+  return instance.get();
+}
+
+ContentSecurityPolicyInjectorFactory::ContentSecurityPolicyInjectorFactory()
+    : BrowserContextKeyedServiceFactory(
+          "ContentSecurityPolicyInjector",
+          BrowserContextDependencyManager::GetInstance()) {
+  DependsOn(SubscriptionServiceFactory::GetInstance());
+}
+
+ContentSecurityPolicyInjectorFactory::~ContentSecurityPolicyInjectorFactory() =
+    default;
+
+KeyedService* ContentSecurityPolicyInjectorFactory::BuildServiceInstanceFor(
+    content::BrowserContext* context) const {
+  return new ContentSecurityPolicyInjectorImpl(
+      SubscriptionServiceFactory::GetForBrowserContext(context),
+      std::make_unique<FrameHierarchyBuilder>());
+}
+
+content::BrowserContext*
+ContentSecurityPolicyInjectorFactory::GetBrowserContextToUse(
+    content::BrowserContext* context) const {
+  return chrome::GetBrowserContextRedirectedInIncognito(context);
+}
+
+}  // namespace adblock
diff --git a/chrome/browser/adblock/content_security_policy_injector_factory.h b/chrome/browser/adblock/content_security_policy_injector_factory.h
new file mode 100644
--- /dev/null
+++ b/chrome/browser/adblock/content_security_policy_injector_factory.h
@@ -0,0 +1,49 @@
+/*
+ * This file is part of eyeo Chromium SDK,
+ * Copyright (C) 2006-present eyeo GmbH
+ *
+ * eyeo Chromium SDK is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 3 as
+ * published by the Free Software Foundation.
+ *
+ * eyeo Chromium SDK is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with eyeo Chromium SDK.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+#ifndef CHROME_BROWSER_ADBLOCK_CONTENT_SECURITY_POLICY_INJECTOR_FACTORY_H_
+#define CHROME_BROWSER_ADBLOCK_CONTENT_SECURITY_POLICY_INJECTOR_FACTORY_H_
+
+#include "base/no_destructor.h"
+#include "components/keyed_service/content/browser_context_keyed_service_factory.h"
+#include "content/public/browser/browser_context.h"
+
+namespace adblock {
+
+class ContentSecurityPolicyInjector;
+class ContentSecurityPolicyInjectorFactory
+    : public BrowserContextKeyedServiceFactory {
+ public:
+  static ContentSecurityPolicyInjector* GetForBrowserContext(
+      content::BrowserContext* context);
+  static ContentSecurityPolicyInjectorFactory* GetInstance();
+
+ private:
+  friend class base::NoDestructor<ContentSecurityPolicyInjectorFactory>;
+  ContentSecurityPolicyInjectorFactory();
+  ~ContentSecurityPolicyInjectorFactory() override;
+
+  // BrowserContextKeyedServiceFactory:
+  KeyedService* BuildServiceInstanceFor(
+      content::BrowserContext* context) const override;
+  content::BrowserContext* GetBrowserContextToUse(
+      content::BrowserContext* context) const override;
+};
+
+}  // namespace adblock
+
+#endif  // CHROME_BROWSER_ADBLOCK_CONTENT_SECURITY_POLICY_INJECTOR_FACTORY_H_
diff --git a/chrome/browser/adblock/element_hider_factory.cc b/chrome/browser/adblock/element_hider_factory.cc
new file mode 100644
--- /dev/null
+++ b/chrome/browser/adblock/element_hider_factory.cc
@@ -0,0 +1,63 @@
+/*
+ * This file is part of eyeo Chromium SDK,
+ * Copyright (C) 2006-present eyeo GmbH
+ *
+ * eyeo Chromium SDK is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 3 as
+ * published by the Free Software Foundation.
+ *
+ * eyeo Chromium SDK is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with eyeo Chromium SDK.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+#include "chrome/browser/adblock/element_hider_factory.h"
+
+#include <memory>
+
+#include "chrome/browser/adblock/subscription_service_factory.h"
+#include "chrome/browser/profiles/incognito_helpers.h"
+#include "chrome/browser/profiles/profile.h"
+#include "components/adblock/content/browser/element_hider_impl.h"
+#include "components/keyed_service/content/browser_context_dependency_manager.h"
+#include "content/public/browser/browser_context.h"
+
+namespace adblock {
+
+// static
+ElementHider* ElementHiderFactory::GetForBrowserContext(
+    content::BrowserContext* context) {
+  return static_cast<ElementHider*>(
+      GetInstance()->GetServiceForBrowserContext(context, true));
+}
+// static
+ElementHiderFactory* ElementHiderFactory::GetInstance() {
+  static base::NoDestructor<ElementHiderFactory> instance;
+  return instance.get();
+}
+
+ElementHiderFactory::ElementHiderFactory()
+    : BrowserContextKeyedServiceFactory(
+          "ElementHider",
+          BrowserContextDependencyManager::GetInstance()) {
+  DependsOn(adblock::SubscriptionServiceFactory::GetInstance());
+}
+
+ElementHiderFactory::~ElementHiderFactory() = default;
+
+KeyedService* ElementHiderFactory::BuildServiceInstanceFor(
+    content::BrowserContext* context) const {
+  return new ElementHiderImpl(
+      adblock::SubscriptionServiceFactory::GetForBrowserContext(context));
+}
+
+content::BrowserContext* ElementHiderFactory::GetBrowserContextToUse(
+    content::BrowserContext* context) const {
+  return chrome::GetBrowserContextRedirectedInIncognito(context);
+}
+
+}  // namespace adblock
diff --git a/chrome/browser/adblock/element_hider_factory.h b/chrome/browser/adblock/element_hider_factory.h
new file mode 100644
--- /dev/null
+++ b/chrome/browser/adblock/element_hider_factory.h
@@ -0,0 +1,47 @@
+/*
+ * This file is part of eyeo Chromium SDK,
+ * Copyright (C) 2006-present eyeo GmbH
+ *
+ * eyeo Chromium SDK is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 3 as
+ * published by the Free Software Foundation.
+ *
+ * eyeo Chromium SDK is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with eyeo Chromium SDK.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+#ifndef CHROME_BROWSER_ADBLOCK_ELEMENT_HIDER_FACTORY_H_
+#define CHROME_BROWSER_ADBLOCK_ELEMENT_HIDER_FACTORY_H_
+
+#include "base/no_destructor.h"
+#include "components/keyed_service/content/browser_context_keyed_service_factory.h"
+#include "content/public/browser/browser_context.h"
+
+namespace adblock {
+
+class ElementHider;
+class ElementHiderFactory : public BrowserContextKeyedServiceFactory {
+ public:
+  static ElementHider* GetForBrowserContext(content::BrowserContext* context);
+  static ElementHiderFactory* GetInstance();
+
+ private:
+  friend class base::NoDestructor<ElementHiderFactory>;
+  ElementHiderFactory();
+  ~ElementHiderFactory() override;
+
+  // BrowserContextKeyedServiceFactory:
+  KeyedService* BuildServiceInstanceFor(
+      content::BrowserContext* context) const override;
+  content::BrowserContext* GetBrowserContextToUse(
+      content::BrowserContext* context) const override;
+};
+
+}  // namespace adblock
+
+#endif  // CHROME_BROWSER_ADBLOCK_ELEMENT_HIDER_FACTORY_H_
diff --git a/chrome/browser/adblock/resource_classification_runner_factory.cc b/chrome/browser/adblock/resource_classification_runner_factory.cc
new file mode 100644
--- /dev/null
+++ b/chrome/browser/adblock/resource_classification_runner_factory.cc
@@ -0,0 +1,71 @@
+/*
+ * This file is part of eyeo Chromium SDK,
+ * Copyright (C) 2006-present eyeo GmbH
+ *
+ * eyeo Chromium SDK is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 3 as
+ * published by the Free Software Foundation.
+ *
+ * eyeo Chromium SDK is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with eyeo Chromium SDK.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+#include "chrome/browser/adblock/resource_classification_runner_factory.h"
+
+#include <memory>
+
+#include "chrome/browser/adblock/sitekey_storage_factory.h"
+#include "chrome/browser/profiles/incognito_helpers.h"
+#include "chrome/browser/profiles/profile.h"
+#include "components/adblock/content/browser/frame_hierarchy_builder.h"
+#include "components/adblock/content/browser/resource_classification_runner_impl.h"
+#include "components/adblock/core/classifier/resource_classifier_impl.h"
+#include "components/keyed_service/content/browser_context_dependency_manager.h"
+#include "content/public/browser/browser_context.h"
+
+namespace adblock {
+
+// static
+ResourceClassificationRunner*
+ResourceClassificationRunnerFactory::GetForBrowserContext(
+    content::BrowserContext* context) {
+  return static_cast<ResourceClassificationRunner*>(
+      GetInstance()->GetServiceForBrowserContext(context, true));
+}
+// static
+ResourceClassificationRunnerFactory*
+ResourceClassificationRunnerFactory::GetInstance() {
+  static base::NoDestructor<ResourceClassificationRunnerFactory> instance;
+  return instance.get();
+}
+
+ResourceClassificationRunnerFactory::ResourceClassificationRunnerFactory()
+    : BrowserContextKeyedServiceFactory(
+          "ResourceClassificationRunner",
+          BrowserContextDependencyManager::GetInstance()) {
+  DependsOn(SitekeyStorageFactory::GetInstance());
+}
+
+ResourceClassificationRunnerFactory::~ResourceClassificationRunnerFactory() =
+    default;
+
+KeyedService* ResourceClassificationRunnerFactory::BuildServiceInstanceFor(
+    content::BrowserContext* context) const {
+  return new ResourceClassificationRunnerImpl(
+      base::MakeRefCounted<ResourceClassifierImpl>(),
+      std::make_unique<FrameHierarchyBuilder>(),
+      SitekeyStorageFactory::GetForBrowserContext(context));
+}
+
+content::BrowserContext*
+ResourceClassificationRunnerFactory::GetBrowserContextToUse(
+    content::BrowserContext* context) const {
+  return chrome::GetBrowserContextRedirectedInIncognito(context);
+}
+
+}  // namespace adblock
diff --git a/chrome/browser/adblock/resource_classification_runner_factory.h b/chrome/browser/adblock/resource_classification_runner_factory.h
new file mode 100644
--- /dev/null
+++ b/chrome/browser/adblock/resource_classification_runner_factory.h
@@ -0,0 +1,49 @@
+/*
+ * This file is part of eyeo Chromium SDK,
+ * Copyright (C) 2006-present eyeo GmbH
+ *
+ * eyeo Chromium SDK is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 3 as
+ * published by the Free Software Foundation.
+ *
+ * eyeo Chromium SDK is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with eyeo Chromium SDK.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+#ifndef CHROME_BROWSER_ADBLOCK_RESOURCE_CLASSIFICATION_RUNNER_FACTORY_H_
+#define CHROME_BROWSER_ADBLOCK_RESOURCE_CLASSIFICATION_RUNNER_FACTORY_H_
+
+#include "base/no_destructor.h"
+#include "components/keyed_service/content/browser_context_keyed_service_factory.h"
+#include "content/public/browser/browser_context.h"
+
+namespace adblock {
+
+class ResourceClassificationRunner;
+class ResourceClassificationRunnerFactory
+    : public BrowserContextKeyedServiceFactory {
+ public:
+  static ResourceClassificationRunner* GetForBrowserContext(
+      content::BrowserContext* context);
+  static ResourceClassificationRunnerFactory* GetInstance();
+
+ private:
+  friend class base::NoDestructor<ResourceClassificationRunnerFactory>;
+  ResourceClassificationRunnerFactory();
+  ~ResourceClassificationRunnerFactory() override;
+
+  // BrowserContextKeyedServiceFactory:
+  KeyedService* BuildServiceInstanceFor(
+      content::BrowserContext* context) const override;
+  content::BrowserContext* GetBrowserContextToUse(
+      content::BrowserContext* context) const override;
+};
+
+}  // namespace adblock
+
+#endif  // CHROME_BROWSER_ADBLOCK_RESOURCE_CLASSIFICATION_RUNNER_FACTORY_H_
diff --git a/chrome/browser/adblock/session_stats_factory.cc b/chrome/browser/adblock/session_stats_factory.cc
new file mode 100644
--- /dev/null
+++ b/chrome/browser/adblock/session_stats_factory.cc
@@ -0,0 +1,64 @@
+/*
+ * This file is part of eyeo Chromium SDK,
+ * Copyright (C) 2006-present eyeo GmbH
+ *
+ * eyeo Chromium SDK is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 3 as
+ * published by the Free Software Foundation.
+ *
+ * eyeo Chromium SDK is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with eyeo Chromium SDK.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+#include "chrome/browser/adblock/session_stats_factory.h"
+
+#include <memory>
+
+#include "chrome/browser/adblock/resource_classification_runner_factory.h"
+#include "chrome/browser/profiles/incognito_helpers.h"
+#include "chrome/browser/profiles/profile.h"
+#include "components/adblock/content/browser/session_stats_impl.h"
+#include "components/keyed_service/content/browser_context_dependency_manager.h"
+#include "content/public/browser/browser_context.h"
+
+namespace adblock {
+
+// static
+SessionStats* SessionStatsFactory::GetForBrowserContext(
+    content::BrowserContext* context) {
+  return static_cast<SessionStats*>(
+      GetInstance()->GetServiceForBrowserContext(context, true));
+}
+
+// static
+SessionStatsFactory* SessionStatsFactory::GetInstance() {
+  static base::NoDestructor<SessionStatsFactory> instance;
+  return instance.get();
+}
+
+SessionStatsFactory::SessionStatsFactory()
+    : BrowserContextKeyedServiceFactory(
+          "SessionStats",
+          BrowserContextDependencyManager::GetInstance()) {
+  DependsOn(ResourceClassificationRunnerFactory::GetInstance());
+}
+
+SessionStatsFactory::~SessionStatsFactory() = default;
+
+KeyedService* SessionStatsFactory::BuildServiceInstanceFor(
+    content::BrowserContext* context) const {
+  return new SessionStatsImpl(
+      ResourceClassificationRunnerFactory::GetForBrowserContext(context));
+}
+
+content::BrowserContext* SessionStatsFactory::GetBrowserContextToUse(
+    content::BrowserContext* context) const {
+  return chrome::GetBrowserContextRedirectedInIncognito(context);
+}
+
+}  // namespace adblock
diff --git a/chrome/browser/adblock/session_stats_factory.h b/chrome/browser/adblock/session_stats_factory.h
new file mode 100644
--- /dev/null
+++ b/chrome/browser/adblock/session_stats_factory.h
@@ -0,0 +1,47 @@
+/*
+ * This file is part of eyeo Chromium SDK,
+ * Copyright (C) 2006-present eyeo GmbH
+ *
+ * eyeo Chromium SDK is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 3 as
+ * published by the Free Software Foundation.
+ *
+ * eyeo Chromium SDK is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with eyeo Chromium SDK.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+#ifndef CHROME_BROWSER_ADBLOCK_SESSION_STATS_FACTORY_H_
+#define CHROME_BROWSER_ADBLOCK_SESSION_STATS_FACTORY_H_
+
+#include "base/no_destructor.h"
+#include "components/keyed_service/content/browser_context_keyed_service_factory.h"
+#include "content/public/browser/browser_context.h"
+
+namespace adblock {
+
+class SessionStats;
+class SessionStatsFactory : public BrowserContextKeyedServiceFactory {
+ public:
+  static SessionStats* GetForBrowserContext(content::BrowserContext* context);
+  static SessionStatsFactory* GetInstance();
+
+ private:
+  friend class base::NoDestructor<SessionStatsFactory>;
+  SessionStatsFactory();
+  ~SessionStatsFactory() override;
+
+  // BrowserContextKeyedServiceFactory:
+  KeyedService* BuildServiceInstanceFor(
+      content::BrowserContext* context) const override;
+  content::BrowserContext* GetBrowserContextToUse(
+      content::BrowserContext* context) const override;
+};
+
+}  // namespace adblock
+
+#endif  // CHROME_BROWSER_ADBLOCK_SESSION_STATS_FACTORY_H_
diff --git a/chrome/browser/adblock/sitekey_storage_factory.cc b/chrome/browser/adblock/sitekey_storage_factory.cc
new file mode 100644
--- /dev/null
+++ b/chrome/browser/adblock/sitekey_storage_factory.cc
@@ -0,0 +1,59 @@
+/*
+ * This file is part of eyeo Chromium SDK,
+ * Copyright (C) 2006-present eyeo GmbH
+ *
+ * eyeo Chromium SDK is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 3 as
+ * published by the Free Software Foundation.
+ *
+ * eyeo Chromium SDK is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with eyeo Chromium SDK.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+#include "chrome/browser/adblock/sitekey_storage_factory.h"
+
+#include <memory>
+
+#include "chrome/browser/profiles/incognito_helpers.h"
+#include "chrome/browser/profiles/profile.h"
+#include "components/adblock/core/sitekey_storage_impl.h"
+#include "components/keyed_service/content/browser_context_dependency_manager.h"
+#include "content/public/browser/browser_context.h"
+
+namespace adblock {
+
+// static
+SitekeyStorage* SitekeyStorageFactory::GetForBrowserContext(
+    content::BrowserContext* context) {
+  return static_cast<SitekeyStorage*>(
+      GetInstance()->GetServiceForBrowserContext(context, true));
+}
+// static
+SitekeyStorageFactory* SitekeyStorageFactory::GetInstance() {
+  static base::NoDestructor<SitekeyStorageFactory> instance;
+  return instance.get();
+}
+
+SitekeyStorageFactory::SitekeyStorageFactory()
+    : BrowserContextKeyedServiceFactory(
+          "SitekeyStorage",
+          BrowserContextDependencyManager::GetInstance()) {}
+
+SitekeyStorageFactory::~SitekeyStorageFactory() = default;
+
+KeyedService* SitekeyStorageFactory::BuildServiceInstanceFor(
+    content::BrowserContext* context) const {
+  return new SitekeyStorageImpl();
+}
+
+content::BrowserContext* SitekeyStorageFactory::GetBrowserContextToUse(
+    content::BrowserContext* context) const {
+  return chrome::GetBrowserContextRedirectedInIncognito(context);
+}
+
+}  // namespace adblock
diff --git a/chrome/browser/adblock/sitekey_storage_factory.h b/chrome/browser/adblock/sitekey_storage_factory.h
new file mode 100644
--- /dev/null
+++ b/chrome/browser/adblock/sitekey_storage_factory.h
@@ -0,0 +1,47 @@
+/*
+ * This file is part of eyeo Chromium SDK,
+ * Copyright (C) 2006-present eyeo GmbH
+ *
+ * eyeo Chromium SDK is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 3 as
+ * published by the Free Software Foundation.
+ *
+ * eyeo Chromium SDK is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with eyeo Chromium SDK.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+#ifndef CHROME_BROWSER_ADBLOCK_SITEKEY_STORAGE_FACTORY_H_
+#define CHROME_BROWSER_ADBLOCK_SITEKEY_STORAGE_FACTORY_H_
+
+#include "base/no_destructor.h"
+#include "components/keyed_service/content/browser_context_keyed_service_factory.h"
+#include "content/public/browser/browser_context.h"
+
+namespace adblock {
+
+class SitekeyStorage;
+class SitekeyStorageFactory : public BrowserContextKeyedServiceFactory {
+ public:
+  static SitekeyStorage* GetForBrowserContext(content::BrowserContext* context);
+  static SitekeyStorageFactory* GetInstance();
+
+ private:
+  friend class base::NoDestructor<SitekeyStorageFactory>;
+  SitekeyStorageFactory();
+  ~SitekeyStorageFactory() override;
+
+  // BrowserContextKeyedServiceFactory:
+  KeyedService* BuildServiceInstanceFor(
+      content::BrowserContext* context) const override;
+  content::BrowserContext* GetBrowserContextToUse(
+      content::BrowserContext* context) const override;
+};
+
+}  // namespace adblock
+
+#endif  // CHROME_BROWSER_ADBLOCK_SITEKEY_STORAGE_FACTORY_H_
diff --git a/chrome/browser/adblock/subscription_persistent_metadata_factory.cc b/chrome/browser/adblock/subscription_persistent_metadata_factory.cc
new file mode 100644
--- /dev/null
+++ b/chrome/browser/adblock/subscription_persistent_metadata_factory.cc
@@ -0,0 +1,63 @@
+/*
+ * This file is part of eyeo Chromium SDK,
+ * Copyright (C) 2006-present eyeo GmbH
+ *
+ * eyeo Chromium SDK is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 3 as
+ * published by the Free Software Foundation.
+ *
+ * eyeo Chromium SDK is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with eyeo Chromium SDK.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+#include "chrome/browser/adblock/subscription_persistent_metadata_factory.h"
+
+#include <memory>
+
+#include "chrome/browser/profiles/incognito_helpers.h"
+#include "chrome/browser/profiles/profile.h"
+#include "components/adblock/core/subscription/subscription_persistent_metadata_impl.h"
+#include "components/keyed_service/content/browser_context_dependency_manager.h"
+#include "content/public/browser/browser_context.h"
+
+namespace adblock {
+
+// static
+SubscriptionPersistentMetadata*
+SubscriptionPersistentMetadataFactory::GetForBrowserContext(
+    content::BrowserContext* context) {
+  return static_cast<SubscriptionPersistentMetadata*>(
+      GetInstance()->GetServiceForBrowserContext(context, true));
+}
+// static
+SubscriptionPersistentMetadataFactory*
+SubscriptionPersistentMetadataFactory::GetInstance() {
+  static base::NoDestructor<SubscriptionPersistentMetadataFactory> instance;
+  return instance.get();
+}
+
+SubscriptionPersistentMetadataFactory::SubscriptionPersistentMetadataFactory()
+    : BrowserContextKeyedServiceFactory(
+          "AdblockSubscriptionPersistentMetadata",
+          BrowserContextDependencyManager::GetInstance()) {}
+SubscriptionPersistentMetadataFactory::
+    ~SubscriptionPersistentMetadataFactory() = default;
+
+KeyedService* SubscriptionPersistentMetadataFactory::BuildServiceInstanceFor(
+    content::BrowserContext* context) const {
+  return new SubscriptionPersistentMetadataImpl(
+      Profile::FromBrowserContext(context)->GetOriginalProfile()->GetPrefs());
+}
+
+content::BrowserContext*
+SubscriptionPersistentMetadataFactory::GetBrowserContextToUse(
+    content::BrowserContext* context) const {
+  return chrome::GetBrowserContextRedirectedInIncognito(context);
+}
+
+}  // namespace adblock
diff --git a/chrome/browser/adblock/subscription_persistent_metadata_factory.h b/chrome/browser/adblock/subscription_persistent_metadata_factory.h
new file mode 100644
--- /dev/null
+++ b/chrome/browser/adblock/subscription_persistent_metadata_factory.h
@@ -0,0 +1,49 @@
+/*
+ * This file is part of eyeo Chromium SDK,
+ * Copyright (C) 2006-present eyeo GmbH
+ *
+ * eyeo Chromium SDK is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 3 as
+ * published by the Free Software Foundation.
+ *
+ * eyeo Chromium SDK is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with eyeo Chromium SDK.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+#ifndef CHROME_BROWSER_ADBLOCK_SUBSCRIPTION_PERSISTENT_METADATA_FACTORY_H_
+#define CHROME_BROWSER_ADBLOCK_SUBSCRIPTION_PERSISTENT_METADATA_FACTORY_H_
+
+#include "base/no_destructor.h"
+#include "components/keyed_service/content/browser_context_keyed_service_factory.h"
+#include "content/public/browser/browser_context.h"
+
+namespace adblock {
+
+class SubscriptionPersistentMetadata;
+class SubscriptionPersistentMetadataFactory
+    : public BrowserContextKeyedServiceFactory {
+ public:
+  static SubscriptionPersistentMetadata* GetForBrowserContext(
+      content::BrowserContext* context);
+  static SubscriptionPersistentMetadataFactory* GetInstance();
+
+ private:
+  friend class base::NoDestructor<SubscriptionPersistentMetadataFactory>;
+  SubscriptionPersistentMetadataFactory();
+  ~SubscriptionPersistentMetadataFactory() override;
+
+  // BrowserContextKeyedServiceFactory:
+  KeyedService* BuildServiceInstanceFor(
+      content::BrowserContext* context) const override;
+  content::BrowserContext* GetBrowserContextToUse(
+      content::BrowserContext* context) const override;
+};
+
+}  // namespace adblock
+
+#endif  // CHROME_BROWSER_ADBLOCK_SUBSCRIPTION_PERSISTENT_METADATA_FACTORY_H_
diff --git a/chrome/browser/adblock/subscription_service_factory.cc b/chrome/browser/adblock/subscription_service_factory.cc
new file mode 100644
--- /dev/null
+++ b/chrome/browser/adblock/subscription_service_factory.cc
@@ -0,0 +1,66 @@
+/*
+ * This file is part of eyeo Chromium SDK,
+ * Copyright (C) 2006-present eyeo GmbH
+ *
+ * eyeo Chromium SDK is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 3 as
+ * published by the Free Software Foundation.
+ *
+ * eyeo Chromium SDK is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with eyeo Chromium SDK.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+#include "chrome/browser/adblock/subscription_service_factory.h"
+
+#include <memory>
+
+#include "chrome/browser/adblock/subscription_persistent_metadata_factory.h"
+#include "chrome/browser/profiles/incognito_helpers.h"
+#include "chrome/browser/profiles/profile.h"
+#include "components/adblock/core/subscription/subscription_service.h"
+#include "components/keyed_service/content/browser_context_dependency_manager.h"
+#include "content/public/browser/browser_context.h"
+
+namespace adblock {
+
+// static
+SubscriptionService* SubscriptionServiceFactory::GetForBrowserContext(
+    content::BrowserContext* context) {
+  return static_cast<SubscriptionService*>(
+      GetInstance()->GetServiceForBrowserContext(context, true));
+}
+// static
+SubscriptionServiceFactory* SubscriptionServiceFactory::GetInstance() {
+  static base::NoDestructor<SubscriptionServiceFactory> instance;
+  return instance.get();
+}
+
+SubscriptionServiceFactory::SubscriptionServiceFactory()
+    : SubscriptionServiceFactoryBase() {
+  DependsOn(SubscriptionPersistentMetadataFactory::GetInstance());
+}
+
+SubscriptionServiceFactory::~SubscriptionServiceFactory() = default;
+
+SubscriptionPersistentMetadata*
+SubscriptionServiceFactory::GetSubscriptionPersistentMetadata(
+    content::BrowserContext* context) const {
+  return SubscriptionPersistentMetadataFactory::GetForBrowserContext(context);
+}
+
+PrefService* SubscriptionServiceFactory::GetPrefs(
+    content::BrowserContext* context) const {
+  return Profile::FromBrowserContext(context)->GetOriginalProfile()->GetPrefs();
+}
+
+content::BrowserContext* SubscriptionServiceFactory::GetBrowserContextToUse(
+    content::BrowserContext* context) const {
+  return chrome::GetBrowserContextRedirectedInIncognito(context);
+}
+
+}  // namespace adblock
diff --git a/chrome/browser/adblock/subscription_service_factory.h b/chrome/browser/adblock/subscription_service_factory.h
new file mode 100644
--- /dev/null
+++ b/chrome/browser/adblock/subscription_service_factory.h
@@ -0,0 +1,50 @@
+/*
+ * This file is part of eyeo Chromium SDK,
+ * Copyright (C) 2006-present eyeo GmbH
+ *
+ * eyeo Chromium SDK is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 3 as
+ * published by the Free Software Foundation.
+ *
+ * eyeo Chromium SDK is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with eyeo Chromium SDK.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+#ifndef CHROME_BROWSER_ADBLOCK_SUBSCRIPTION_SERVICE_FACTORY_H_
+#define CHROME_BROWSER_ADBLOCK_SUBSCRIPTION_SERVICE_FACTORY_H_
+
+#include "base/no_destructor.h"
+#include "components/adblock/content/browser/subscription_service_factory_base.h"
+#include "content/public/browser/browser_context.h"
+
+namespace adblock {
+
+class SubscriptionService;
+class SubscriptionServiceFactory : public SubscriptionServiceFactoryBase {
+ public:
+  static SubscriptionService* GetForBrowserContext(
+      content::BrowserContext* context);
+  static SubscriptionServiceFactory* GetInstance();
+
+ protected:
+  PrefService* GetPrefs(content::BrowserContext* context) const override;
+  SubscriptionPersistentMetadata* GetSubscriptionPersistentMetadata(
+      content::BrowserContext* context) const override;
+
+ private:
+  friend class base::NoDestructor<SubscriptionServiceFactory>;
+  SubscriptionServiceFactory();
+  ~SubscriptionServiceFactory() override;
+
+  content::BrowserContext* GetBrowserContextToUse(
+      content::BrowserContext* context) const override;
+};
+
+}  // namespace adblock
+
+#endif  // CHROME_BROWSER_ADBLOCK_SUBSCRIPTION_SERVICE_FACTORY_H_
diff --git a/chrome/browser/chrome_browser_interface_binders.cc b/chrome/browser/chrome_browser_interface_binders.cc
--- a/chrome/browser/chrome_browser_interface_binders.cc
+++ b/chrome/browser/chrome_browser_interface_binders.cc
@@ -1,6 +1,10 @@
 // Copyright 2019 The Chromium Authors
 // Use of this source code is governed by a BSD-style license that can be
 // found in the LICENSE file.
+//
+// This source code is a part of eyeo Chromium SDK.
+// Use of this source code is governed by the GPLv3 that can be found in the
+// components/adblock/LICENSE file.
 
 #include "chrome/browser/chrome_browser_interface_binders.h"
 
@@ -38,6 +42,7 @@
 #include "chrome/browser/ui/search_engines/search_engine_tab_helper.h"
 #include "chrome/browser/ui/side_panel/companion/companion_utils.h"
 #include "chrome/browser/ui/ui_features.h"
+#include "chrome/browser/ui/webui/adblock_internals/adblock_internals_ui.h"
 #include "chrome/browser/ui/webui/browsing_topics/browsing_topics_internals_ui.h"
 #include "chrome/browser/ui/webui/engagement/site_engagement_ui.h"
 #include "chrome/browser/ui/webui/internals/internals_ui.h"
@@ -1107,6 +1112,10 @@ void PopulateChromeWebUIFrameBinders(
       media::mojom::MediaEngagementScoreDetailsProvider, MediaEngagementUI>(
       map);
 
+  RegisterWebUIControllerInterfaceBinder<
+      ::mojom::adblock_internals::AdblockInternalsPageHandler,
+      AdblockInternalsUI>(map);
+
   RegisterWebUIControllerInterfaceBinder<browsing_topics::mojom::PageHandler,
                                          BrowsingTopicsInternalsUI>(map);
 
diff --git a/chrome/browser/preferences/BUILD.gn b/chrome/browser/preferences/BUILD.gn
--- a/chrome/browser/preferences/BUILD.gn
+++ b/chrome/browser/preferences/BUILD.gn
@@ -1,6 +1,10 @@
 # Copyright 2019 The Chromium Authors
 # Use of this source code is governed by a BSD-style license that can be
 # found in the LICENSE file.
+#
+# This source code is a part of eyeo Chromium SDK.
+# Use of this source code is governed by the GPLv3 that can be found in the components/adblock/LICENSE file.
+
 
 import("//build/config/android/rules.gni")
 import("//third_party/jni_zero/jni_zero.gni")
@@ -40,6 +44,7 @@ java_cpp_strings("java_pref_names_srcjar") {
   sources = [
     "//chrome/browser/enterprise/reporting/prefs.cc",
     "//chrome/common/pref_names.h",
+    "//components/adblock/core/common/adblock_prefs.cc",
     "//components/autofill/core/common/autofill_prefs.h",
     "//components/commerce/core/pref_names.h",
     "//components/dom_distiller/core/pref_names.h",
diff --git a/chrome/browser/prefs/chrome_pref_service_factory.cc b/chrome/browser/prefs/chrome_pref_service_factory.cc
--- a/chrome/browser/prefs/chrome_pref_service_factory.cc
+++ b/chrome/browser/prefs/chrome_pref_service_factory.cc
@@ -1,6 +1,10 @@
 // Copyright 2012 The Chromium Authors
 // Use of this source code is governed by a BSD-style license that can be
 // found in the LICENSE file.
+//
+// This source code is a part of eyeo Chromium SDK.
+// Use of this source code is governed by the GPLv3 that can be found in the
+// components/adblock/LICENSE file.
 
 #include "chrome/browser/prefs/chrome_pref_service_factory.h"
 
@@ -40,6 +44,7 @@
 #include "chrome/grit/branded_strings.h"
 #include "chrome/grit/browser_resources.h"
 #include "chrome/grit/generated_resources.h"
+#include "components/adblock/core/common/adblock_prefs.h"
 #include "components/component_updater/pref_names.h"
 #include "components/policy/core/browser/configuration_policy_pref_store.h"
 #include "components/pref_registry/pref_registry_syncable.h"
@@ -185,6 +190,12 @@ const prefs::TrackedPreferenceMetadata kTrackedPrefs[] = {
     {33, prefs::kGoogleServicesLastSignedInUsername,
      EnforcementLevel::ENFORCE_ON_LOAD, PrefTrackingStrategy::ATOMIC,
      ValueType::PERSONAL},
+    {100, adblock::common::prefs::kSubscriptionSignatures,
+     EnforcementLevel::ENFORCE_ON_LOAD, PrefTrackingStrategy::SPLIT,
+     ValueType::IMPERSONAL},
+    {101, adblock::common::prefs::kLastUsedSchemaVersion,
+     EnforcementLevel::ENFORCE_ON_LOAD, PrefTrackingStrategy::ATOMIC,
+     ValueType::IMPERSONAL},
 
     // See note at top, new items added here also need to be added to
     // histograms.xml's TrackedPreference enum.
diff --git a/chrome/browser/profiles/chrome_browser_main_extra_parts_profiles.cc b/chrome/browser/profiles/chrome_browser_main_extra_parts_profiles.cc
--- a/chrome/browser/profiles/chrome_browser_main_extra_parts_profiles.cc
+++ b/chrome/browser/profiles/chrome_browser_main_extra_parts_profiles.cc
@@ -1,6 +1,10 @@
 // Copyright 2013 The Chromium Authors
 // Use of this source code is governed by a BSD-style license that can be
 // found in the LICENSE file.
+//
+// This source code is a part of eyeo Chromium SDK.
+// Use of this source code is governed by the GPLv3 that can be found in the
+// components/adblock/LICENSE file.
 
 #include "chrome/browser/profiles/chrome_browser_main_extra_parts_profiles.h"
 
@@ -13,6 +17,15 @@
 #include "chrome/browser/accessibility/accessibility_labels_service_factory.h"
 #include "chrome/browser/accessibility/page_colors_factory.h"
 #include "chrome/browser/affiliations/affiliation_service_factory.h"
+#include "chrome/browser/adblock/adblock_controller_factory.h"
+#include "chrome/browser/adblock/adblock_telemetry_service_factory.h"
+#include "chrome/browser/adblock/content_security_policy_injector_factory.h"
+#include "chrome/browser/adblock/element_hider_factory.h"
+#include "chrome/browser/adblock/resource_classification_runner_factory.h"
+#include "chrome/browser/adblock/session_stats_factory.h"
+#include "chrome/browser/adblock/sitekey_storage_factory.h"
+#include "chrome/browser/adblock/subscription_persistent_metadata_factory.h"
+#include "chrome/browser/adblock/subscription_service_factory.h"
 #include "chrome/browser/autocomplete/autocomplete_classifier_factory.h"
 #include "chrome/browser/autocomplete/document_suggestions_service_factory.h"
 #include "chrome/browser/autocomplete/in_memory_url_index_factory.h"
@@ -267,6 +280,8 @@
 #include "chrome/browser/signin/signin_manager_android_factory.h"
 #include "components/commerce/core/commerce_feature_list.h"
 #include "components/commerce/core/proto/merchant_signal_db_content.pb.h"
+
+
 #else
 #include "chrome/browser/accessibility/live_caption/live_caption_controller_factory.h"
 #include "chrome/browser/accessibility/live_translate_controller_factory.h"
@@ -823,8 +838,19 @@ void ChromeBrowserMainExtraPartsProfiles::
   // Makes manual testing possible.
   FakeSmartCardDeviceServiceFactory::GetInstance();
 #endif
+  adblock::AdblockControllerFactory::GetInstance();
+  adblock::AdblockTelemetryServiceFactory::GetInstance();
+  adblock::ContentSecurityPolicyInjectorFactory::GetInstance();
+  adblock::ElementHiderFactory::GetInstance();
+  adblock::ResourceClassificationRunnerFactory::GetInstance();
+  adblock::SessionStatsFactory::GetInstance();
+  adblock::SitekeyStorageFactory::GetInstance();
+  adblock::SubscriptionPersistentMetadataFactory::GetInstance();
+  adblock::SubscriptionServiceFactory::GetInstance();
 #if BUILDFLAG(IS_ANDROID)
   FastCheckoutCapabilitiesFetcherFactory::GetInstance();
+
+
 #endif
   FaviconServiceFactory::GetInstance();
   feature_engagement::TrackerFactory::GetInstance();
diff --git a/chrome/browser/resources/BUILD.gn b/chrome/browser/resources/BUILD.gn
--- a/chrome/browser/resources/BUILD.gn
+++ b/chrome/browser/resources/BUILD.gn
@@ -1,6 +1,9 @@
 # Copyright 2014 The Chromium Authors
 # Use of this source code is governed by a BSD-style license that can be
 # found in the LICENSE file.
+#
+# This source code is a part of eyeo Chromium SDK.
+# Use of this source code is governed by the GPLv3 that can be found in the components/adblock/LICENSE file.
 
 import("//build/config/chromeos/ui_mode.gni")
 import("//chrome/browser/buildflags.gni")
@@ -249,6 +252,7 @@ if (!is_android) {
 group("dev_ui_resources") {
   public_deps = [
     "accessibility:resources",
+    "adblock_internals:resources",
     "bluetooth_internals:resources",
     "browsing_topics:resources",
     "components:resources",
@@ -307,6 +311,7 @@ repack("dev_ui_paks") {
 
   sources = [
     "$root_gen_dir/chrome/accessibility_resources.pak",
+    "$root_gen_dir/chrome/adblock_internals_resources.pak",
     "$root_gen_dir/chrome/bluetooth_internals_resources.pak",
     "$root_gen_dir/chrome/browsing_topics_internals_resources.pak",
     "$root_gen_dir/chrome/components_resources.pak",
diff --git a/chrome/browser/resources/adblock_internals/BUILD.gn b/chrome/browser/resources/adblock_internals/BUILD.gn
new file mode 100644
--- /dev/null
+++ b/chrome/browser/resources/adblock_internals/BUILD.gn
@@ -0,0 +1,29 @@
+#
+# This file is part of eyeo Chromium SDK,
+# Copyright (C) 2006-present eyeo GmbH
+#
+# eyeo Chromium SDK is free software: you can redistribute it and/or modify
+# it under the terms of the GNU General Public License version 3 as
+# published by the Free Software Foundation.
+#
+# eyeo Chromium SDK is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+#
+# You should have received a copy of the GNU General Public License
+# along with eyeo Chromium SDK.  If not, see <http://www.gnu.org/licenses/>.
+
+import("//ui/webui/resources/tools/build_webui.gni")
+
+build_webui("build") {
+  grd_prefix = "adblock_internals"
+  static_files = [ "adblock_internals.html" ]
+  non_web_component_files = [ "adblock_internals.ts" ]
+  mojo_files_deps = [ "//chrome/browser/ui/webui/adblock_internals:mojo_bindings_ts__generator" ]
+  mojo_files = [ "$root_gen_dir/chrome/browser/ui/webui/adblock_internals/adblock_internals.mojom-webui.ts" ]
+  ts_deps = [
+    "//ui/webui/resources/js:build_ts",
+    "//ui/webui/resources/mojo:build_ts",
+  ]
+}
diff --git a/chrome/browser/resources/adblock_internals/adblock_internals.html b/chrome/browser/resources/adblock_internals/adblock_internals.html
new file mode 100644
--- /dev/null
+++ b/chrome/browser/resources/adblock_internals/adblock_internals.html
@@ -0,0 +1,38 @@
+<!--
+  This file is part of eyeo Chromium SDK,
+  Copyright (C) 2006-present eyeo GmbH
+
+  eyeo Chromium SDK is free software: you can redistribute it and/or modify
+  it under the terms of the GNU General Public License version 3 as
+  published by the Free Software Foundation.
+
+  eyeo Chromium SDK is distributed in the hope that it will be useful,
+  but WITHOUT ANY WARRANTY; without even the implied warranty of
+  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+  GNU General Public License for more details.
+
+  You should have received a copy of the GNU General Public License
+  along with eyeo Chromium SDK.  If not, see <http://www.gnu.org/licenses/>.
+-->
+
+<!DOCTYPE HTML>
+<html lang="en">
+
+<head>
+  <meta charset="utf-8">
+  <meta name="viewport" content="width=device-width, initial-scale=1">
+  <title>Ad-Filtering Internals</title>
+  <script type="module" src="adblock_internals.js"></script>
+</head>
+
+<body>
+  <button id="download-button">Download</button>
+  <button id="copy-button">Copy to Clipboard</button>
+  <button id="refresh">Refresh</button>
+
+  <hr>
+
+  <pre id="content" style="white-space: pre-wrap;"></pre>
+</body>
+
+</html>
diff --git a/chrome/browser/resources/adblock_internals/adblock_internals.ts b/chrome/browser/resources/adblock_internals/adblock_internals.ts
new file mode 100644
--- /dev/null
+++ b/chrome/browser/resources/adblock_internals/adblock_internals.ts
@@ -0,0 +1,43 @@
+// This file is part of eyeo Chromium SDK,
+// Copyright (C) 2006-present eyeo GmbH
+//
+// eyeo Chromium SDK is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License version 3 as
+// published by the Free Software Foundation.
+//
+// eyeo Chromium SDK is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with eyeo Chromium SDK.  If not, see <http://www.gnu.org/licenses/>.
+
+import {getRequiredElement} from 'chrome://resources/js/util.js';
+import {AdblockInternalsPageHandler} from './adblock_internals.mojom-webui.js';
+
+async function debugInfo(): Promise<string> {
+  const info = await AdblockInternalsPageHandler.getRemote().getDebugInfo();
+  return info.debugInfo;
+}
+
+async function refresh() {
+  getRequiredElement('content').innerText = await debugInfo();
+}
+
+getRequiredElement('copy-button').addEventListener('click', async () => {
+  navigator.clipboard.writeText(await debugInfo());
+});
+
+getRequiredElement('download-button').addEventListener('click', async () => {
+  const url = URL.createObjectURL(new Blob([await debugInfo()], {type: 'text/plain'}));
+  const a = document.createElement('a');
+  a.href = url;
+  a.download = 'adblock-internals.txt';
+  a.click();
+  URL.revokeObjectURL(url);
+});
+
+getRequiredElement('refresh').addEventListener('click', refresh);
+
+document.addEventListener('DOMContentLoaded', refresh);
diff --git a/chrome/browser/safe_browsing/safe_browsing_blocking_page_test.cc b/chrome/browser/safe_browsing/safe_browsing_blocking_page_test.cc
--- a/chrome/browser/safe_browsing/safe_browsing_blocking_page_test.cc
+++ b/chrome/browser/safe_browsing/safe_browsing_blocking_page_test.cc
@@ -5,6 +5,10 @@
 // This test creates a fake safebrowsing service, where we can inject known-
 // threat urls.  It then uses a real browser to go to these urls, and sends
 // "goback" or "proceed" commands and verifies they work.
+//
+// This source code is a part of eyeo Chromium SDK.
+// Use of this source code is governed by the GPLv3 that can be found in the
+// components/adblock/LICENSE file.
 
 #include <algorithm>
 #include <map>
@@ -66,6 +70,7 @@
 #include "chrome/common/url_constants.h"
 #include "chrome/test/base/in_process_browser_test.h"
 #include "chrome/test/base/ui_test_utils.h"
+#include "components/adblock/core/features.h"
 #include "components/google/core/common/google_util.h"
 #include "components/grit/components_resources.h"
 #include "components/omnibox/browser/omnibox_prefs.h"
@@ -665,6 +670,8 @@ class SafeBrowsingBlockingPageBrowserTest
         {tag_and_attribute, add_warning_shown_timestamp_csbrrs,
          create_warning_shown_csbrrs},
         {});
+    scoped_feature_list_.InitWithFeaturesAndParameters(
+        {tag_and_attribute}, {adblock::kAdblockPlusFeature});
   }
 
   SafeBrowsingBlockingPageBrowserTest(
diff --git a/chrome/browser/subresource_filter/subresource_filter_browser_test_harness.cc b/chrome/browser/subresource_filter/subresource_filter_browser_test_harness.cc
--- a/chrome/browser/subresource_filter/subresource_filter_browser_test_harness.cc
+++ b/chrome/browser/subresource_filter/subresource_filter_browser_test_harness.cc
@@ -1,6 +1,10 @@
 // Copyright 2017 The Chromium Authors
 // Use of this source code is governed by a BSD-style license that can be
 // found in the LICENSE file.
+//
+// This source code is a part of eyeo Chromium SDK.
+// Use of this source code is governed by the GPLv3 that can be found in the
+// components/adblock/LICENSE file.
 
 #include "chrome/browser/subresource_filter/subresource_filter_browser_test_harness.h"
 
@@ -22,6 +26,7 @@
 #include "chrome/common/chrome_features.h"
 #include "chrome/common/chrome_paths.h"
 #include "chrome/test/base/chrome_test_utils.h"
+#include "components/adblock/core/features.h"
 #include "components/blocked_content/safe_browsing_triggered_popup_blocker.h"
 #include "components/content_settings/browser/page_specific_content_settings.h"
 #include "components/safe_browsing/core/browser/db/v4_protocol_manager_util.h"
@@ -70,7 +75,8 @@ MockSubresourceFilterObserver::~MockSubresourceFilterObserver() = default;
 SubresourceFilterBrowserTest::SubresourceFilterBrowserTest() {
   scoped_feature_list_.InitWithFeatures(
       /*enabled_features=*/{kAdTagging},
-      /*disabled_features=*/{features::kHttpsUpgrades});
+      /*disabled_features=*/{features::kHttpsUpgrades,
+                             adblock::kAdblockPlusFeature});
 }
 
 SubresourceFilterBrowserTest::~SubresourceFilterBrowserTest() = default;
diff --git a/chrome/browser/ui/BUILD.gn b/chrome/browser/ui/BUILD.gn
--- a/chrome/browser/ui/BUILD.gn
+++ b/chrome/browser/ui/BUILD.gn
@@ -1,6 +1,10 @@
 # Copyright 2014 The Chromium Authors
 # Use of this source code is governed by a BSD-style license that can be
 # found in the LICENSE file.
+#
+# This source code is a part of eyeo Chromium SDK.
+# Use of this source code is governed by the GPLv3 that can be found in the components/adblock/LICENSE file.
+
 
 import("//build/config/buildflags_paint_preview.gni")
 import("//build/config/chromeos/ui_mode.gni")
@@ -252,6 +256,10 @@ static_library("ui") {
     "webui/about/about_ui.h",
     "webui/accessibility/accessibility_ui.cc",
     "webui/accessibility/accessibility_ui.h",
+    "webui/adblock_internals/adblock_internals_page_handler_impl.cc",
+    "webui/adblock_internals/adblock_internals_page_handler_impl.h",
+    "webui/adblock_internals/adblock_internals_ui.cc",
+    "webui/adblock_internals/adblock_internals_ui.h",
     "webui/autofill_and_password_manager_internals/autofill_internals_ui.cc",
     "webui/autofill_and_password_manager_internals/autofill_internals_ui.h",
     "webui/autofill_and_password_manager_internals/internals_ui_handler.cc",
@@ -468,6 +476,7 @@ static_library("ui") {
     "//chrome/browser/ui/webui",
     "//chrome/browser/ui/webui/data_sharing_internals:mojo_bindings",
     "//chrome/browser/ui/webui/location_internals:mojo_bindings",
+    "//chrome/browser/ui/webui/adblock_internals:mojo_bindings",
     "//chrome/browser/ui/webui/omnibox:mojo_bindings",
     "//chrome/browser/ui/webui/privacy_sandbox:mojo_bindings",
     "//chrome/browser/ui/webui/segmentation_internals:mojo_bindings",
@@ -484,6 +493,7 @@ static_library("ui") {
     "//components/access_code_cast/common:metrics",
     "//components/account_id",
     "//components/affiliations/core/browser:affiliations",
+    "//components/adblock/content:browser",
     "//components/autofill/content/browser",
     "//components/autofill/content/browser:risk_proto",
     "//components/autofill/core/browser",
diff --git a/chrome/browser/ui/prefs/pref_watcher.cc b/chrome/browser/ui/prefs/pref_watcher.cc
--- a/chrome/browser/ui/prefs/pref_watcher.cc
+++ b/chrome/browser/ui/prefs/pref_watcher.cc
@@ -2,6 +2,10 @@
 // Use of this source code is governed by a BSD-style license that can be
 // found in the LICENSE file.
 
+// This source code is a part of eyeo Chromium SDK.
+// Use of this source code is governed by the GPLv3 that can be found in the
+// components/adblock/LICENSE file.
+
 #include "chrome/browser/ui/prefs/pref_watcher.h"
 
 #include "base/functional/bind.h"
@@ -13,6 +17,7 @@
 #include "chrome/browser/renderer_preferences_util.h"
 #include "chrome/browser/ui/prefs/prefs_tab_helper.h"
 #include "chrome/common/pref_names.h"
+#include "components/adblock/core/common/adblock_prefs.h"
 #include "components/language/core/browser/pref_names.h"
 #include "components/live_caption/pref_names.h"
 #include "components/privacy_sandbox/tracking_protection_settings.h"
@@ -69,6 +74,14 @@ const char* const kWebPrefsToObserve[] = {
 #else
     prefs::kAccessibilityFocusHighlightEnabled,
 #endif
+
+    adblock::common::prefs::kAdblockAllowedDomainsLegacy,
+    adblock::common::prefs::kAdblockCustomFiltersLegacy,
+    adblock::common::prefs::kAdblockCustomSubscriptionsLegacy,
+    adblock::common::prefs::kAdblockSubscriptionsLegacy,
+    adblock::common::prefs::kEnableAcceptableAdsLegacy,
+    adblock::common::prefs::kEnableAdblockLegacy,
+
 };
 
 const int kWebPrefsToObserveLength = std::size(kWebPrefsToObserve);
diff --git a/chrome/browser/ui/tab_helpers.cc b/chrome/browser/ui/tab_helpers.cc
--- a/chrome/browser/ui/tab_helpers.cc
+++ b/chrome/browser/ui/tab_helpers.cc
@@ -1,6 +1,10 @@
 // Copyright 2014 The Chromium Authors
 // Use of this source code is governed by a BSD-style license that can be
 // found in the LICENSE file.
+//
+// This source code is a part of eyeo Chromium SDK.
+// Use of this source code is governed by the GPLv3 that can be found in the
+// components/adblock/LICENSE file.
 
 #include "chrome/browser/ui/tab_helpers.h"
 
@@ -13,6 +17,9 @@
 #include "base/trace_event/trace_event.h"
 #include "build/build_config.h"
 #include "build/chromeos_buildflags.h"
+#include "chrome/browser/adblock/element_hider_factory.h"
+#include "chrome/browser/adblock/sitekey_storage_factory.h"
+#include "chrome/browser/adblock/subscription_service_factory.h"
 #include "chrome/browser/bookmarks/bookmark_model_factory.h"
 #include "chrome/browser/breadcrumbs/breadcrumb_manager_tab_helper.h"
 #include "chrome/browser/browser_process.h"
@@ -115,6 +122,7 @@
 #include "chrome/common/chrome_features.h"
 #include "chrome/common/chrome_isolated_world_ids.h"
 #include "chrome/common/chrome_switches.h"
+#include "components/adblock/content/browser/adblock_webcontents_observer.h"
 #include "components/autofill/content/browser/content_autofill_client.h"
 #include "components/autofill/content/browser/content_autofill_driver_factory.h"
 #include "components/autofill/core/browser/browser_autofill_manager.h"
@@ -371,6 +379,16 @@ void TabHelpers::AttachTabHelpers(WebContents* web_contents) {
                                                    optimization_guide_decider);
     }
   }
+
+  AdblockWebContentObserver::CreateForWebContents(
+      web_contents,
+      adblock::SubscriptionServiceFactory::GetForBrowserContext(
+          web_contents->GetBrowserContext()),
+      adblock::ElementHiderFactory::GetForBrowserContext(
+          web_contents->GetBrowserContext()),
+      adblock::SitekeyStorageFactory::GetForBrowserContext(
+          web_contents->GetBrowserContext()),
+      std::make_unique<adblock::FrameHierarchyBuilder>());
   autofill::AutofillClientProvider& autofill_client_provider =
       autofill::AutofillClientProviderFactory::GetForProfile(profile);
   autofill_client_provider.CreateClientForWebContents(web_contents);
diff --git a/chrome/browser/ui/webui/adblock_internals/BUILD.gn b/chrome/browser/ui/webui/adblock_internals/BUILD.gn
new file mode 100644
--- /dev/null
+++ b/chrome/browser/ui/webui/adblock_internals/BUILD.gn
@@ -0,0 +1,23 @@
+#
+# This file is part of eyeo Chromium SDK,
+# Copyright (C) 2006-present eyeo GmbH
+#
+# eyeo Chromium SDK is free software: you can redistribute it and/or modify
+# it under the terms of the GNU General Public License version 3 as
+# published by the Free Software Foundation.
+#
+# eyeo Chromium SDK is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+#
+# You should have received a copy of the GNU General Public License
+# along with eyeo Chromium SDK.  If not, see <http://www.gnu.org/licenses/>.
+
+import("//mojo/public/tools/bindings/mojom.gni")
+
+mojom("mojo_bindings") {
+  sources = [ "adblock_internals.mojom" ]
+  webui_module_path = "/"
+  #use_typescript_sources = true
+}
diff --git a/chrome/browser/ui/webui/adblock_internals/adblock_internals.mojom b/chrome/browser/ui/webui/adblock_internals/adblock_internals.mojom
new file mode 100644
--- /dev/null
+++ b/chrome/browser/ui/webui/adblock_internals/adblock_internals.mojom
@@ -0,0 +1,20 @@
+// This file is part of eyeo Chromium SDK,
+// Copyright (C) 2006-present eyeo GmbH
+//
+// eyeo Chromium SDK is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License version 3 as
+// published by the Free Software Foundation.
+//
+// eyeo Chromium SDK is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with eyeo Chromium SDK.  If not, see <http://www.gnu.org/licenses/>.
+
+module mojom.adblock_internals;
+
+interface AdblockInternalsPageHandler {
+  GetDebugInfo() => (string debug_info);
+};
diff --git a/chrome/browser/ui/webui/adblock_internals/adblock_internals_page_handler_impl.cc b/chrome/browser/ui/webui/adblock_internals/adblock_internals_page_handler_impl.cc
new file mode 100644
--- /dev/null
+++ b/chrome/browser/ui/webui/adblock_internals/adblock_internals_page_handler_impl.cc
@@ -0,0 +1,115 @@
+/*
+ * This file is part of eyeo Chromium SDK,
+ * Copyright (C) 2006-present eyeo GmbH
+ *
+ * eyeo Chromium SDK is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 3 as
+ * published by the Free Software Foundation.
+ *
+ * eyeo Chromium SDK is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with eyeo Chromium SDK.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+#include "chrome/browser/ui/webui/adblock_internals/adblock_internals_page_handler_impl.h"
+
+#include "base/time/time_to_iso8601.h"
+#include "chrome/browser/adblock/adblock_telemetry_service_factory.h"
+#include "chrome/browser/adblock/session_stats_factory.h"
+#include "chrome/browser/adblock/subscription_service_factory.h"
+#include "components/adblock/core/adblock_telemetry_service.h"
+#include "components/adblock/core/session_stats.h"
+#include "components/adblock/core/subscription/subscription_config.h"
+#include "components/adblock/core/subscription/subscription_service.h"
+
+namespace {
+
+std::string SubscriptionInstallationStateToString(
+    adblock::Subscription::InstallationState state) {
+  using State = adblock::Subscription::InstallationState;
+  switch (state) {
+    case State::Installed:
+      return "Installed";
+    case State::Installing:
+      return "Installing";
+    case State::Preloaded:
+      return "Preloaded";
+    case State::Unknown:
+      return "Unknown";
+  }
+  NOTREACHED();
+  return "";
+}
+
+std::string DebugLine(std::string name, std::string value, int level) {
+  return std::string(2 * level, ' ') + name + ": " + value + '\n';
+}
+
+std::string DebugLine(std::string name, int value, int level) {
+  return DebugLine(name, std::to_string(value), level);
+}
+
+}  // namespace
+
+AdblockInternalsPageHandlerImpl::AdblockInternalsPageHandlerImpl(
+    Profile* profile,
+    mojo::PendingReceiver<mojom::adblock_internals::AdblockInternalsPageHandler>
+        receiver)
+    : profile_(profile), receiver_(this, std::move(receiver)) {}
+
+AdblockInternalsPageHandlerImpl::~AdblockInternalsPageHandlerImpl() = default;
+
+void AdblockInternalsPageHandlerImpl::GetDebugInfo(
+    GetDebugInfoCallback callback) {
+  CHECK(profile_);
+  auto* service =
+      adblock::SubscriptionServiceFactory::GetForBrowserContext(profile_);
+  auto* stats = adblock::SessionStatsFactory::GetForBrowserContext(profile_);
+  auto allowed = stats->GetSessionAllowedAdsCount();
+  auto blocked = stats->GetSessionBlockedAdsCount();
+  std::string content;
+  for (auto* config : service->GetInstalledFilteringConfigurations()) {
+    content += DebugLine("Configuration", config->GetName(), 0);
+    content += DebugLine("Enabled", config->IsEnabled(), 1);
+    for (const auto& it : config->GetAllowedDomains()) {
+      content += DebugLine("Allowed domain", it, 1);
+    }
+    for (const auto& it : config->GetCustomFilters()) {
+      content += DebugLine("Custom filter", it, 1);
+    }
+    for (auto it : service->GetCurrentSubscriptions(config)) {
+      auto url = it->GetSourceUrl();
+      content += DebugLine("Subscription", url.spec(), 1);
+      content += DebugLine(
+          "State",
+          SubscriptionInstallationStateToString(it->GetInstallationState()), 2);
+      content += DebugLine("Title", it->GetTitle(), 2);
+      content += DebugLine("Version", it->GetCurrentVersion(), 2);
+      content += DebugLine("Last update",
+                           base::TimeToISO8601(it->GetInstallationTime()), 2);
+      content += DebugLine("Total allowed", allowed[url], 2);
+      content += DebugLine("Total blocked", blocked[url], 2);
+    }
+  }
+
+  auto* telemetry_service =
+      adblock::AdblockTelemetryServiceFactory::GetForProfile(profile_);
+  telemetry_service->GetTopicProvidersDebugInfo(base::BindOnce(
+      &AdblockInternalsPageHandlerImpl::OnTelemetryServiceInfoArrived,
+      std::move(callback), std::move(content)));
+}
+
+void AdblockInternalsPageHandlerImpl::OnTelemetryServiceInfoArrived(
+    GetDebugInfoCallback callback,
+    std::string content,
+    std::vector<std::string> topic_provider_content) {
+  for (auto& topic_provider_debug_info : topic_provider_content) {
+    content +=
+        DebugLine("Eyeometry topic provider", topic_provider_debug_info, 0);
+  }
+  std::move(callback).Run(std::move(content));
+}
diff --git a/chrome/browser/ui/webui/adblock_internals/adblock_internals_page_handler_impl.h b/chrome/browser/ui/webui/adblock_internals/adblock_internals_page_handler_impl.h
new file mode 100644
--- /dev/null
+++ b/chrome/browser/ui/webui/adblock_internals/adblock_internals_page_handler_impl.h
@@ -0,0 +1,51 @@
+/*
+ * This file is part of eyeo Chromium SDK,
+ * Copyright (C) 2006-present eyeo GmbH
+ *
+ * eyeo Chromium SDK is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 3 as
+ * published by the Free Software Foundation.
+ *
+ * eyeo Chromium SDK is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with eyeo Chromium SDK.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+#ifndef CHROME_BROWSER_UI_WEBUI_ADBLOCK_INTERNALS_ADBLOCK_INTERNALS_PAGE_HANDLER_IMPL_H_
+#define CHROME_BROWSER_UI_WEBUI_ADBLOCK_INTERNALS_ADBLOCK_INTERNALS_PAGE_HANDLER_IMPL_H_
+
+#include "base/memory/raw_ptr.h"
+#include "chrome/browser/profiles/profile.h"
+#include "chrome/browser/ui/webui/adblock_internals/adblock_internals.mojom.h"
+#include "mojo/public/cpp/bindings/receiver.h"
+
+class AdblockInternalsPageHandlerImpl
+    : public mojom::adblock_internals::AdblockInternalsPageHandler {
+ public:
+  explicit AdblockInternalsPageHandlerImpl(
+      Profile* profile,
+      mojo::PendingReceiver<
+          mojom::adblock_internals::AdblockInternalsPageHandler> receiver);
+  AdblockInternalsPageHandlerImpl(const AdblockInternalsPageHandlerImpl&) =
+      delete;
+  AdblockInternalsPageHandlerImpl& operator=(
+      const AdblockInternalsPageHandlerImpl&) = delete;
+  ~AdblockInternalsPageHandlerImpl() override;
+
+  // mojom::adblock_internals::AdblockInternalsPageHandler:
+  void GetDebugInfo(GetDebugInfoCallback callback) override;
+
+ private:
+  static void OnTelemetryServiceInfoArrived(
+      GetDebugInfoCallback callback,
+      std::string content,
+      std::vector<std::string> topic_provider_content);
+  raw_ptr<Profile> profile_;
+  mojo::Receiver<mojom::adblock_internals::AdblockInternalsPageHandler>
+      receiver_;
+};
+#endif  // CHROME_BROWSER_UI_WEBUI_ADBLOCK_INTERNALS_ADBLOCK_INTERNALS_PAGE_HANDLER_IMPL_H_
diff --git a/chrome/browser/ui/webui/adblock_internals/adblock_internals_ui.cc b/chrome/browser/ui/webui/adblock_internals/adblock_internals_ui.cc
new file mode 100644
--- /dev/null
+++ b/chrome/browser/ui/webui/adblock_internals/adblock_internals_ui.cc
@@ -0,0 +1,47 @@
+/*                                                                            \
+ * This file is part of eyeo Chromium SDK,                                    \
+ * Copyright (C) 2006-present eyeo GmbH                                       \
+ *                                                                            \
+ * eyeo Chromium SDK is free software: you can redistribute it and/or modify  \
+ * it under the terms of the GNU General Public License version 3 as          \
+ * published by the Free Software Foundation.                                 \
+ *                                                                            \
+ * eyeo Chromium SDK is distributed in the hope that it will be useful,       \
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of             \
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the              \
+ * GNU General Public License for more details.                               \
+ *                                                                            \
+ * You should have received a copy of the GNU General Public License          \
+ * along with eyeo Chromium SDK.  If not, see <http://www.gnu.org/licenses/>. \
+ */
+
+#include "chrome/browser/ui/webui/adblock_internals/adblock_internals_ui.h"
+
+#include "chrome/browser/profiles/profile.h"
+#include "chrome/browser/ui/webui/adblock_internals/adblock_internals_page_handler_impl.h"
+#include "chrome/browser/ui/webui/webui_util.h"
+#include "chrome/common/url_constants.h"
+#include "chrome/grit/adblock_internals_resources.h"
+#include "chrome/grit/adblock_internals_resources_map.h"
+#include "content/public/browser/web_ui_data_source.h"
+
+AdblockInternalsUI::AdblockInternalsUI(content::WebUI* web_ui)
+    : ui::MojoWebUIController(web_ui), profile_(Profile::FromWebUI(web_ui)) {
+  content::WebUIDataSource* source = content::WebUIDataSource::CreateAndAdd(
+      profile_, chrome::kChromeUIAdblockInternalsHost);
+  webui::SetupWebUIDataSource(source,
+                              base::make_span(kAdblockInternalsResources,
+                                              kAdblockInternalsResourcesSize),
+                              IDR_ADBLOCK_INTERNALS_ADBLOCK_INTERNALS_HTML);
+}
+
+AdblockInternalsUI::~AdblockInternalsUI() = default;
+
+WEB_UI_CONTROLLER_TYPE_IMPL(AdblockInternalsUI)
+
+void AdblockInternalsUI::BindInterface(
+    mojo::PendingReceiver<mojom::adblock_internals::AdblockInternalsPageHandler>
+        receiver) {
+  handler_ = std::make_unique<AdblockInternalsPageHandlerImpl>(
+      profile_, std::move(receiver));
+}
diff --git a/chrome/browser/ui/webui/adblock_internals/adblock_internals_ui.h b/chrome/browser/ui/webui/adblock_internals/adblock_internals_ui.h
new file mode 100644
--- /dev/null
+++ b/chrome/browser/ui/webui/adblock_internals/adblock_internals_ui.h
@@ -0,0 +1,48 @@
+/*
+ * This file is part of eyeo Chromium SDK,
+ * Copyright (C) 2006-present eyeo GmbH
+ *
+ * eyeo Chromium SDK is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 3 as
+ * published by the Free Software Foundation.
+ *
+ * eyeo Chromium SDK is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with eyeo Chromium SDK.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+#ifndef CHROME_BROWSER_UI_WEBUI_ADBLOCK_INTERNALS_ADBLOCK_INTERNALS_UI_H_
+#define CHROME_BROWSER_UI_WEBUI_ADBLOCK_INTERNALS_ADBLOCK_INTERNALS_UI_H_
+
+#include "chrome/browser/ui/webui/adblock_internals/adblock_internals.mojom.h"
+#include "mojo/public/cpp/bindings/pending_receiver.h"
+#include "ui/webui/mojo_web_ui_controller.h"
+
+class Profile;
+
+class AdblockInternalsUI : public ui::MojoWebUIController {
+ public:
+  explicit AdblockInternalsUI(content::WebUI* web_ui);
+
+  AdblockInternalsUI(const AdblockInternalsUI&) = delete;
+  AdblockInternalsUI& operator=(const AdblockInternalsUI&) = delete;
+
+  ~AdblockInternalsUI() override;
+
+  void BindInterface(
+      mojo::PendingReceiver<
+          mojom::adblock_internals::AdblockInternalsPageHandler> receiver);
+
+ private:
+  WEB_UI_CONTROLLER_TYPE_DECL();
+
+  raw_ptr<Profile> profile_;
+  std::unique_ptr<mojom::adblock_internals::AdblockInternalsPageHandler>
+      handler_;
+};
+
+#endif  // CHROME_BROWSER_UI_WEBUI_ADBLOCK_INTERNALS_ADBLOCK_INTERNALS_UI_H_
diff --git a/chrome/browser/ui/webui/chrome_web_ui_controller_factory.cc b/chrome/browser/ui/webui/chrome_web_ui_controller_factory.cc
--- a/chrome/browser/ui/webui/chrome_web_ui_controller_factory.cc
+++ b/chrome/browser/ui/webui/chrome_web_ui_controller_factory.cc
@@ -1,6 +1,10 @@
 // Copyright 2012 The Chromium Authors
 // Use of this source code is governed by a BSD-style license that can be
 // found in the LICENSE file.
+//
+// This source code is a part of eyeo Chromium SDK.
+// Use of this source code is governed by the GPLv3 that can be found in the
+// components/adblock/LICENSE file.
 
 #include "chrome/browser/ui/webui/chrome_web_ui_controller_factory.h"
 
@@ -31,6 +35,7 @@
 #include "chrome/browser/profiles/profile.h"
 #include "chrome/browser/safe_browsing/chrome_safe_browsing_local_state_delegate.h"
 #include "chrome/browser/ui/webui/about/about_ui.h"
+#include "chrome/browser/ui/webui/adblock_internals/adblock_internals_ui.h"
 #include "chrome/browser/ui/webui/components/components_ui.h"
 #include "chrome/browser/ui/webui/constrained_web_dialog_ui.h"
 #include "chrome/browser/ui/webui/crashes_ui.h"
@@ -478,6 +483,9 @@ WebUIFactoryFunction GetWebUIFactoryFunction(WebUI* web_ui,
     return &NewWebUI<UsbInternalsUI>;
   if (url.host_piece() == chrome::kChromeUIUserActionsHost)
     return &NewWebUI<UserActionsUI>;
+  if (url.host_piece() == chrome::kChromeUIAdblockInternalsHost) {
+    return &NewWebUI<AdblockInternalsUI>;
+  }
   if (url.host_piece() == chrome::kChromeUIVersionHost)
     return &NewWebUI<VersionUI>;
 #if BUILDFLAG(IS_ANDROID)
diff --git a/chrome/common/BUILD.gn b/chrome/common/BUILD.gn
--- a/chrome/common/BUILD.gn
+++ b/chrome/common/BUILD.gn
@@ -1,6 +1,9 @@
 # Copyright 2014 The Chromium Authors
 # Use of this source code is governed by a BSD-style license that can be
 # found in the LICENSE file.
+#
+# This source code is a part of eyeo Chromium SDK.
+# Use of this source code is governed by the GPLv3 that can be found in the components/adblock/LICENSE file.
 
 import("//build/buildflag_header.gni")
 import("//build/config/chrome_build.gni")
diff --git a/chrome/common/webui_url_constants.cc b/chrome/common/webui_url_constants.cc
--- a/chrome/common/webui_url_constants.cc
+++ b/chrome/common/webui_url_constants.cc
@@ -1,6 +1,10 @@
 // Copyright 2017 The Chromium Authors
 // Use of this source code is governed by a BSD-style license that can be
 // found in the LICENSE file.
+//
+// This source code is a part of eyeo Chromium SDK.
+// Use of this source code is governed by the GPLv3 that can be found in the
+// components/adblock/LICENSE file.
 
 #include "chrome/common/webui_url_constants.h"
 
@@ -31,6 +35,7 @@ const char kChromeUIAboutURL[] = "chrome://about/";
 const char kChromeUIActivateSafetyCheckSettingsURL[] =
     "chrome://settings/safetyCheck?activateSafetyCheck";
 const char kChromeUIAccessibilityHost[] = "accessibility";
+const char kChromeUIAdblockInternalsHost[] = "adblock-internals";
 const char kChromeUIAllSitesPath[] = "/content/all";
 const char kChromeUIAppIconHost[] = "app-icon";
 const char kChromeUIAppIconURL[] = "chrome://app-icon/";
diff --git a/chrome/common/webui_url_constants.h b/chrome/common/webui_url_constants.h
--- a/chrome/common/webui_url_constants.h
+++ b/chrome/common/webui_url_constants.h
@@ -1,6 +1,10 @@
 // Copyright 2017 The Chromium Authors
 // Use of this source code is governed by a BSD-style license that can be
 // found in the LICENSE file.
+//
+// This source code is a part of eyeo Chromium SDK.
+// Use of this source code is governed by the GPLv3 that can be found in the
+// components/adblock/LICENSE file.
 
 // Contains constants for WebUI UI/Host/SubPage constants. Anything else go in
 // chrome/common/url_constants.h.
@@ -32,6 +36,7 @@ extern const char kChromeUIAboutHost[];
 extern const char kChromeUIAboutURL[];
 extern const char kChromeUIActivateSafetyCheckSettingsURL[];
 extern const char kChromeUIAccessibilityHost[];
+extern const char kChromeUIAdblockInternalsHost[];
 extern const char kChromeUIAllSitesPath[];
 extern const char kChromeUIAppIconHost[];
 extern const char kChromeUIAppIconURL[];
--
