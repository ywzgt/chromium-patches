From: uazo <uazo@users.noreply.github.com>
Date: Thu, 29 Sep 2022 11:27:35 +0000
Subject: Disable Eyeo user counting

Change the normal behaviour of Eyeo Chromium SDK
---
 ...hrome_browser_main_extra_parts_profiles.cc |   2 -
 components/adblock/content/browser/BUILD.gn   |  16 -
 components/adblock/core/BUILD.gn              |  41 ---
 .../activeping_telemetry_topic_provider.cc    | 294 -----------------
 .../activeping_telemetry_topic_provider.h     |  87 ------
 .../adblock/core/adblock_telemetry_service.cc | 295 ------------------
 .../adblock/core/adblock_telemetry_service.h  | 126 --------
 components/adblock/core/common/BUILD.gn       |   8 -
 8 files changed, 869 deletions(-)
 delete mode 100644 components/adblock/core/activeping_telemetry_topic_provider.cc
 delete mode 100644 components/adblock/core/activeping_telemetry_topic_provider.h
 delete mode 100644 components/adblock/core/adblock_telemetry_service.cc
 delete mode 100644 components/adblock/core/adblock_telemetry_service.h

diff --git a/chrome/browser/profiles/chrome_browser_main_extra_parts_profiles.cc b/chrome/browser/profiles/chrome_browser_main_extra_parts_profiles.cc
index 88a5991fb..080a283d7 100644
--- a/chrome/browser/profiles/chrome_browser_main_extra_parts_profiles.cc
+++ b/chrome/browser/profiles/chrome_browser_main_extra_parts_profiles.cc
@@ -221,7 +221,6 @@
 #include "chrome/browser/webid/federated_identity_permission_context_factory.h"
 #include "chrome/common/buildflags.h"
 #include "chrome/common/chrome_features.h"
-#include "components/adblock/content/browser/factories/adblock_telemetry_service_factory.h"
 #include "components/adblock/content/browser/factories/content_security_policy_injector_factory.h"
 #include "components/adblock/content/browser/factories/element_hider_factory.h"
 #include "components/adblock/content/browser/factories/resource_classification_runner_factory.h"
@@ -831,7 +830,6 @@ void ChromeBrowserMainExtraPartsProfiles::
   // Makes manual testing possible.
   FakeSmartCardDeviceServiceFactory::GetInstance();
 #endif
-  adblock::AdblockTelemetryServiceFactory::GetInstance();
   adblock::ContentSecurityPolicyInjectorFactory::GetInstance();
   adblock::ElementHiderFactory::GetInstance();
   adblock::ResourceClassificationRunnerFactory::GetInstance();
diff --git a/components/adblock/content/browser/BUILD.gn b/components/adblock/content/browser/BUILD.gn
index cfe435379..56f5762a6 100644
--- a/components/adblock/content/browser/BUILD.gn
+++ b/components/adblock/content/browser/BUILD.gn
@@ -14,15 +14,8 @@
 # You should have received a copy of the GNU General Public License
 # along with eyeo Chromium SDK.  If not, see <http://www.gnu.org/licenses/>.
 
-import("//components/adblock/features.gni")
-
 config("adblock_content_common_config") {
   defines = []
-
-  if (eyeo_intercept_debug_url) {
-    print("WARNING! Enabled intercepting eyeo debug domain \"test.data\"")
-    defines += [ "EYEO_INTERCEPT_DEBUG_URL=1" ]
-  }
 }
 
 source_set("browser_impl") {
@@ -52,8 +45,6 @@ source_set("browser_impl") {
     "element_hider_impl.h",
     "eyeo_document_info.cc",
     "eyeo_document_info.h",
-    "factories/adblock_telemetry_service_factory.cc",
-    "factories/adblock_telemetry_service_factory.h",
     "factories/content_security_policy_injector_factory.cc",
     "factories/content_security_policy_injector_factory.h",
     "factories/element_hider_factory.cc",
@@ -79,13 +70,6 @@ source_set("browser_impl") {
     "session_stats_impl.h",
   ]
 
-  if (eyeo_intercept_debug_url) {
-    sources += [
-      "adblock_url_loader_factory_for_test.cc",
-      "adblock_url_loader_factory_for_test.h",
-    ]
-  }
-
   deps = [
     "//base",
     "//components/adblock/content/browser/mojom:adblock_internals",
diff --git a/components/adblock/core/BUILD.gn b/components/adblock/core/BUILD.gn
index f38bf108c..75563bf36 100644
--- a/components/adblock/core/BUILD.gn
+++ b/components/adblock/core/BUILD.gn
@@ -14,7 +14,6 @@
 # You should have received a copy of the GNU General Public License
 # along with eyeo Chromium SDK.  If not, see <http://www.gnu.org/licenses/>.
 
-import("//components/adblock/features.gni")
 import("//third_party/flatbuffers/flatbuffer.gni")
 
 flatbuffer("schema") {
@@ -49,45 +48,11 @@ source_set("schema_hash") {
   deps = [ ":generate_schema_hash" ]
 }
 
-config("eyeo_telemetry_config") {
-  defines = []
-
-  if (eyeo_telemetry_server_url != "") {
-    # Explicitly setting Telemetry server URL, used for testing with a test
-    # server.
-    defines += [ "EYEO_TELEMETRY_SERVER_URL=\"$eyeo_telemetry_server_url\"" ]
-  } else {
-    # Implicitly setting production Telemetry server URL based on
-    # eyeo_telemetry_client_id (or a default client id as a fallback).
-    if (eyeo_telemetry_client_id != "") {
-      defines += [ "EYEO_TELEMETRY_CLIENT_ID=\"$eyeo_telemetry_client_id\"" ]
-    } else {
-      print("WARNING! gn arg eyeo_telemetry_client_id is not set. " +
-            "Users will not be counted correctly by eyeo.")
-      eyeo_telemetry_client_id = "eyeochromium"
-    }
-    eyeo_telemetry_server_url =
-        "https://${eyeo_telemetry_client_id}.telemetry.eyeo.com/"
-    defines += [ "EYEO_TELEMETRY_SERVER_URL=\"$eyeo_telemetry_server_url\"" ]
-  }
-
-  if (eyeo_telemetry_activeping_auth_token != "") {
-    defines += [ "EYEO_TELEMETRY_ACTIVEPING_AUTH_TOKEN=\"$eyeo_telemetry_activeping_auth_token\"" ]
-  } else {
-    print("WARNING! gn arg eyeo_telemetry_activeping_auth_token is not set. " +
-          "Users will not be counted correctly by eyeo.")
-  }
-}
-
 source_set("core") {
   output_name = "adblock_core"
   sources = [
-    "activeping_telemetry_topic_provider.cc",
-    "activeping_telemetry_topic_provider.h",
     "adblock_switches.cc",
     "adblock_switches.h",
-    "adblock_telemetry_service.cc",
-    "adblock_telemetry_service.h",
     "features.cc",
     "features.h",
     "sitekey_storage.h",
@@ -111,8 +76,6 @@ source_set("core") {
     "//components/prefs",
     "//components/version_info",
   ]
-
-  configs += [ ":eyeo_telemetry_config" ]
 }
 
 source_set("test_support") {
@@ -133,8 +96,6 @@ source_set("test_support") {
 source_set("unit_tests") {
   testonly = true
   sources = [
-    "test/activeping_telemetry_topic_provider_test.cc",
-    "test/adblock_telemetry_service_unittest.cc",
     "test/bundled_subscription_test.cc",
     "test/sitekey_storage_impl_test.cc",
   ]
@@ -152,7 +113,5 @@ source_set("unit_tests") {
     "//services/network:test_support",
     "//testing/gtest",
   ]
-
-  configs += [ ":eyeo_telemetry_config" ]
 }
 
diff --git a/components/adblock/core/activeping_telemetry_topic_provider.cc b/components/adblock/core/activeping_telemetry_topic_provider.cc
deleted file mode 100644
index 4240dc5ee..000000000
--- a/components/adblock/core/activeping_telemetry_topic_provider.cc
+++ /dev/null
@@ -1,294 +0,0 @@
-/* This file is part of eyeo Chromium SDK,
- * Copyright (C) 2006-present eyeo GmbH
- *
- * eyeo Chromium SDK is free software: you can redistribute it and/or modify
- * it under the terms of the GNU General Public License version 3 as
- * published by the Free Software Foundation.
- *
- * eyeo Chromium SDK is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with eyeo Chromium SDK.  If not, see <http://www.gnu.org/licenses/>.
- */
-
-#include "components/adblock/core/activeping_telemetry_topic_provider.h"
-
-#include <string_view>
-
-#include "base/i18n/time_formatting.h"
-#include "base/json/json_reader.h"
-#include "base/json/json_writer.h"
-#include "base/strings/utf_string_conversions.h"
-#include "base/system/sys_info.h"
-#include "base/time/time.h"
-#include "base/uuid.h"
-#include "components/adblock/core/common/adblock_constants.h"
-#include "components/adblock/core/common/adblock_prefs.h"
-#include "components/adblock/core/subscription/subscription_config.h"
-
-namespace adblock {
-namespace {
-int g_http_port_for_testing = 0;
-std::optional<base::TimeDelta> g_time_delta_for_testing;
-
-GURL GetUrl() {
-  GURL url(EYEO_TELEMETRY_SERVER_URL);
-  if (!g_http_port_for_testing) {
-    return url;
-  }
-  DCHECK_EQ(url::kHttpsScheme, url.scheme());
-  GURL::Replacements replacements;
-  replacements.SetSchemeStr(url::kHttpScheme);
-  const std::string port_str = base::NumberToString(g_http_port_for_testing);
-  replacements.SetPortStr(port_str);
-  return url.ReplaceComponents(replacements);
-}
-
-base::TimeDelta GetNormalPingInterval() {
-  static base::TimeDelta kNormalPingInterval =
-      g_time_delta_for_testing ? g_time_delta_for_testing.value()
-                               : base::Hours(12);
-  return kNormalPingInterval;
-}
-
-base::TimeDelta GetRetryPingInterval() {
-  static base::TimeDelta kRetryPingInterval =
-      g_time_delta_for_testing ? g_time_delta_for_testing.value()
-                               : base::Hours(1);
-  return kRetryPingInterval;
-}
-
-void AppendStringIfPresent(PrefService* pref_service,
-                           const std::string& pref_name,
-                           std::string_view payload_key,
-                           base::Value::Dict& payload) {
-  auto str = pref_service->GetString(pref_name);
-  if (!str.empty()) {
-    payload.Set(payload_key, std::move(str));
-  }
-}
-
-std::string FormatNextRequestTime(base::Time time) {
-  if (time.is_null()) {
-    return "[Unset]";
-  }
-  return base::UTF16ToUTF8(base::TimeFormatFriendlyDateAndTime(time));
-}
-}  // namespace
-
-ActivepingTelemetryTopicProvider::ActivepingTelemetryTopicProvider(
-    utils::AppInfo app_info,
-    PrefService* pref_service,
-    SubscriptionService* subscription_service,
-    const GURL& base_url,
-    const std::string& auth_token)
-    : app_info_(std::move(app_info)),
-      pref_service_(pref_service),
-      subscription_service_(subscription_service),
-      base_url_(base_url),
-      auth_token_(auth_token) {}
-
-ActivepingTelemetryTopicProvider::~ActivepingTelemetryTopicProvider() = default;
-
-// static
-GURL ActivepingTelemetryTopicProvider::DefaultBaseUrl() {
-#if !defined(EYEO_TELEMETRY_CLIENT_ID)
-  LOG(WARNING)
-      << "[eyeo] Using default Telemetry server since a Telemetry client ID "
-         "was "
-         "not provided. Users will not be counted correctly by eyeo. Please "
-         "set an ID via \"eyeo_telemetry_client_id\" gn argument.";
-#endif
-  return GetUrl();
-}
-
-// static
-std::string ActivepingTelemetryTopicProvider::DefaultAuthToken() {
-#if defined(EYEO_TELEMETRY_ACTIVEPING_AUTH_TOKEN)
-  DVLOG(1) << "[eyeo] Using " << EYEO_TELEMETRY_ACTIVEPING_AUTH_TOKEN
-           << " as Telemetry authentication token";
-  return EYEO_TELEMETRY_ACTIVEPING_AUTH_TOKEN;
-#else
-  LOG(WARNING)
-      << "[eyeo] No Telemetry authentication token defined. Users will "
-         "not be counted correctly by eyeo. Please set a token via "
-         "\"eyeo_telemetry_activeping_auth_token\" gn argument.";
-  return "";
-#endif
-}
-
-GURL ActivepingTelemetryTopicProvider::GetEndpointURL() const {
-  return base_url_.Resolve("/topic/eyeochromium_activeping/version/1");
-}
-
-std::string ActivepingTelemetryTopicProvider::GetAuthToken() const {
-  return auth_token_;
-}
-
-void ActivepingTelemetryTopicProvider::GetPayload(
-    PayloadCallback callback) const {
-  std::string serialized;
-  // The only way JSONWriter::Write() can return fail is then the Value
-  // contains lists or dicts that are too deep (200 levels). We just built the
-  // payload and root objects here, they should be really shallow.
-  CHECK(base::JSONWriter::Write(GetPayloadInternal(), &serialized));
-  std::move(callback).Run(std::move(serialized));
-}
-
-base::Time ActivepingTelemetryTopicProvider::GetTimeOfNextRequest() const {
-  const auto next_ping_time =
-      pref_service_->GetTime(common::prefs::kTelemetryNextPingTime);
-  // Next ping time may be unset if this is a first run. Next request should
-  // happen ASAP.
-  if (next_ping_time.is_null()) {
-    return base::Time::Now();
-  }
-
-  return next_ping_time;
-}
-
-void ActivepingTelemetryTopicProvider::ParseResponse(
-    std::unique_ptr<std::string> response_content) {
-  if (!response_content) {
-    VLOG(1) << "[eyeo] Telemetry ping failed, no response from server";
-    ScheduleNextPing(GetRetryPingInterval());
-    return;
-  }
-
-  VLOG(1) << "[eyeo] Response from Telemetry server: " << *response_content;
-  auto parsed = base::JSONReader::ReadDict(*response_content);
-  if (!parsed) {
-    VLOG(1)
-        << "[eyeo] Telemetry ping failed, response could not be parsed as JSON";
-    ScheduleNextPing(GetRetryPingInterval());
-    return;
-  }
-
-  auto* error_message = parsed->FindString("error");
-  if (error_message) {
-    VLOG(1) << "[eyeo] Telemetry ping failed, error message: "
-            << *error_message;
-    ScheduleNextPing(GetRetryPingInterval());
-    return;
-  }
-
-  // For legacy reasons, "ping_response_time" is sent to us as "token". This
-  // should be the server time of when the ping was handled, possibly truncated
-  // for anonymity. We don't parse it or interpret it, just send it back with
-  // next ping.
-  auto* ping_response_time = parsed->FindString("token");
-  if (!ping_response_time) {
-    VLOG(1) << "[eyeo] Telemetry ping failed, response did not contain a last "
-               "ping / token value";
-    ScheduleNextPing(GetRetryPingInterval());
-    return;
-  }
-
-  VLOG(1) << "[eyeo] Telemetry ping succeeded";
-  ScheduleNextPing(GetNormalPingInterval());
-  UpdatePrefs(*ping_response_time);
-}
-
-void ActivepingTelemetryTopicProvider::FetchDebugInfo(
-    DebugInfoCallback callback) const {
-  base::Value::Dict debug_info;
-  debug_info.Set("endpoint_url", GetEndpointURL().spec());
-  debug_info.Set("payload", GetPayloadInternal());
-  debug_info.Set("first_ping",
-                 pref_service_->GetString(
-                     adblock::common::prefs::kTelemetryFirstPingTime));
-  debug_info.Set("time_of_next_request",
-                 FormatNextRequestTime(GetTimeOfNextRequest()));
-  debug_info.Set(
-      "last_ping",
-      pref_service_->GetString(adblock::common::prefs::kTelemetryLastPingTime));
-  debug_info.Set("previous_last_ping",
-                 pref_service_->GetString(
-                     adblock::common::prefs::kTelemetryPreviousLastPingTime));
-
-  std::string serialized;
-  // The only way JSONWriter::Write() can return fail is then the Value
-  // contains lists or dicts that are too deep (200 levels). We just built the
-  // payload and root objects here, they should be really shallow.
-  CHECK(base::JSONWriter::WriteWithOptions(
-      debug_info, base::JsonOptions::OPTIONS_PRETTY_PRINT, &serialized));
-  std::move(callback).Run(std::move(serialized));
-}
-
-void ActivepingTelemetryTopicProvider::ScheduleNextPing(base::TimeDelta delay) {
-  pref_service_->SetTime(common::prefs::kTelemetryNextPingTime,
-                         base::Time::Now() + delay);
-}
-
-void ActivepingTelemetryTopicProvider::UpdatePrefs(
-    const std::string& ping_response_time) {
-  // First ping is only set once per client.
-  if (pref_service_->GetString(common::prefs::kTelemetryFirstPingTime)
-          .empty()) {
-    pref_service_->SetString(common::prefs::kTelemetryFirstPingTime,
-                             ping_response_time);
-  }
-  // Previous-to-last becomes last, last becomes current.
-  pref_service_->SetString(
-      common::prefs::kTelemetryPreviousLastPingTime,
-      pref_service_->GetString(common::prefs::kTelemetryLastPingTime));
-  pref_service_->SetString(common::prefs::kTelemetryLastPingTime,
-                           ping_response_time);
-  // Generate a new random tag that wil be sent along with ping times in the
-  // next request.
-  const auto tag = base::Uuid::GenerateRandomV4();
-  pref_service_->SetString(common::prefs::kTelemetryLastPingTag,
-                           tag.AsLowercaseString());
-}
-
-base::Value ActivepingTelemetryTopicProvider::GetPayloadInternal() const {
-  base::Value::Dict payload;
-  bool aa_enabled = false;
-  auto* adblock_configuration =
-      subscription_service_->GetFilteringConfiguration(
-          kAdblockFilteringConfigurationName);
-  if (adblock_configuration) {
-    aa_enabled = base::ranges::any_of(
-        adblock_configuration->GetFilterLists(),
-        [&](const auto& url) { return url == AcceptableAdsUrl(); });
-  }
-  payload.Set("addon_name", "eyeo-chromium-sdk");
-  payload.Set("addon_version", "2.0.0");
-  payload.Set("application", app_info_.name);
-  payload.Set("application_version", app_info_.version);
-  payload.Set("aa_active", aa_enabled);
-  payload.Set("platform", base::SysInfo::OperatingSystemName());
-  payload.Set("platform_version", base::SysInfo::OperatingSystemVersion());
-  // Server requires the following parameters to either have a correct,
-  // non-empty value, or not be present at all. We shall not send empty strings.
-  AppendStringIfPresent(pref_service_, common::prefs::kTelemetryLastPingTag,
-                        "last_ping_tag", payload);
-  AppendStringIfPresent(pref_service_, common::prefs::kTelemetryFirstPingTime,
-                        "first_ping", payload);
-  AppendStringIfPresent(pref_service_, common::prefs::kTelemetryLastPingTime,
-                        "last_ping", payload);
-  AppendStringIfPresent(pref_service_,
-                        common::prefs::kTelemetryPreviousLastPingTime,
-                        "previous_last_ping", payload);
-
-  base::Value::Dict root;
-  root.Set("payload", std::move(payload));
-  return base::Value(std::move(root));
-}
-
-// static
-void ActivepingTelemetryTopicProvider::SetHttpPortForTesting(
-    int http_port_for_testing) {
-  g_http_port_for_testing = http_port_for_testing;
-}
-
-// static
-void ActivepingTelemetryTopicProvider::SetIntervalsForTesting(
-    base::TimeDelta time_delta) {
-  g_time_delta_for_testing = time_delta;
-}
-
-}  // namespace adblock
diff --git a/components/adblock/core/activeping_telemetry_topic_provider.h b/components/adblock/core/activeping_telemetry_topic_provider.h
deleted file mode 100644
index e449a73a1..000000000
--- a/components/adblock/core/activeping_telemetry_topic_provider.h
+++ /dev/null
@@ -1,87 +0,0 @@
-/*
- * This file is part of eyeo Chromium SDK,
- * Copyright (C) 2006-present eyeo GmbH
- *
- * eyeo Chromium SDK is free software: you can redistribute it and/or modify
- * it under the terms of the GNU General Public License version 3 as
- * published by the Free Software Foundation.
- *
- * eyeo Chromium SDK is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with eyeo Chromium SDK.  If not, see <http://www.gnu.org/licenses/>.
- */
-
-#ifndef COMPONENTS_ADBLOCK_CORE_ACTIVEPING_TELEMETRY_TOPIC_PROVIDER_H_
-#define COMPONENTS_ADBLOCK_CORE_ACTIVEPING_TELEMETRY_TOPIC_PROVIDER_H_
-
-#include "base/memory/raw_ptr.h"
-#include "base/time/time.h"
-#include "components/adblock/core/adblock_telemetry_service.h"
-#include "components/adblock/core/common/adblock_utils.h"
-#include "components/adblock/core/subscription/subscription_service.h"
-#include "components/prefs/pref_service.h"
-
-namespace adblock {
-
-// Telemetry topic provider that uploads user-counting data for periodic pings.
-// Provides the following data in Payload:
-// - Last ping time, previous-to-last ping time, first ping time
-// - Unique, non-persistent tag for disambiguating pings made by clients in
-//   the same day
-// - Whether Acceptable Ads is enabled
-// - Application name & version, platform name & version
-// Note: Provides no user-identifiable information, no persistent tracking
-// data (ie. no traceable UUID) and no information about user actions.
-class ActivepingTelemetryTopicProvider final
-    : public AdblockTelemetryService::TopicProvider {
- public:
-  ActivepingTelemetryTopicProvider(utils::AppInfo app_info,
-                                   PrefService* pref_service,
-                                   SubscriptionService* subscription_service,
-                                   const GURL& base_url,
-                                   const std::string& auth_token);
-  ~ActivepingTelemetryTopicProvider() final;
-
-  static GURL DefaultBaseUrl();
-  static std::string DefaultAuthToken();
-
-  GURL GetEndpointURL() const final;
-  std::string GetAuthToken() const final;
-  void GetPayload(PayloadCallback callback) const final;
-
-  // Normally 12 hours since last ping, 1 hour in case of retries.
-  base::Time GetTimeOfNextRequest() const final;
-
-  // Attempts to parse "token" (an opaque server description of last ping time)
-  // from |response_content|.
-  void ParseResponse(std::unique_ptr<std::string> response_content) final;
-
-  void FetchDebugInfo(DebugInfoCallback callback) const final;
-
-  // Sets the port used by the embedded http server required for browser tests.
-  // Must be called before the first call to DefaultBaseUrl().
-  static void SetHttpPortForTesting(int http_port_for_testing);
-
-  // Sets the internal timing for sending pings required for browser tests.
-  // Must be called before AdblockTelemetryService::Start().
-  static void SetIntervalsForTesting(base::TimeDelta time_delta);
-
- private:
-  void ScheduleNextPing(base::TimeDelta delay);
-  void UpdatePrefs(const std::string& ping_response_time);
-  base::Value GetPayloadInternal() const;
-
-  const utils::AppInfo app_info_;
-  raw_ptr<PrefService> pref_service_;
-  raw_ptr<SubscriptionService> subscription_service_;
-  const GURL base_url_;
-  const std::string auth_token_;
-};
-
-}  // namespace adblock
-
-#endif  // COMPONENTS_ADBLOCK_CORE_ACTIVEPING_TELEMETRY_TOPIC_PROVIDER_H_
diff --git a/components/adblock/core/adblock_telemetry_service.cc b/components/adblock/core/adblock_telemetry_service.cc
deleted file mode 100644
index d759a71d3..000000000
--- a/components/adblock/core/adblock_telemetry_service.cc
+++ /dev/null
@@ -1,295 +0,0 @@
-/*
- * This file is part of eyeo Chromium SDK,
- * Copyright (C) 2006-present eyeo GmbH
- *
- * eyeo Chromium SDK is free software: you can redistribute it and/or modify
- * it under the terms of the GNU General Public License version 3 as
- * published by the Free Software Foundation.
- *
- * eyeo Chromium SDK is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with eyeo Chromium SDK.  If not, see <http://www.gnu.org/licenses/>.
- */
-
-#include "components/adblock/core/adblock_telemetry_service.h"
-
-#include <string>
-
-#include "base/barrier_callback.h"
-#include "base/functional/bind.h"
-#include "base/memory/weak_ptr.h"
-#include "base/strings/string_number_conversions.h"
-#include "base/strings/string_util.h"
-#include "base/strings/stringprintf.h"
-#include "base/strings/utf_string_conversions.h"
-#include "base/time/time.h"
-#include "base/timer/timer.h"
-#include "components/adblock/core/common/adblock_constants.h"
-#include "components/adblock/core/common/adblock_prefs.h"
-#include "components/prefs/pref_service.h"
-#include "net/base/load_flags.h"
-#include "services/network/public/cpp/resource_request.h"
-#include "services/network/public/cpp/simple_url_loader.h"
-#include "services/network/public/mojom/url_response_head.mojom.h"
-
-namespace adblock {
-
-namespace {
-
-const char kDataType[] = "application/json";
-net::NetworkTrafficAnnotationTag kTrafficAnnotation =
-    net::DefineNetworkTrafficAnnotation("adblock_telemetry_request", R"(
-      semantics {
-        sender: "AdblockTelemetryService"
-        description:
-          "Messages sent to telemetry.eyeo.com to report usage statistics."
-          "Contain no user-identifiable data."
-        trigger:
-          "Periodic, several times a day."
-        data:
-          "Subject to change: "
-          "Dates of first ping, last ping and previous-to-last ping. "
-          "A non-persistent, unique ID that disambiguates pings made in the "
-          "same day. "
-          "Application name and version (ex. Chromium 86.0.4240.183). "
-          "Platform name and version (ex. Windows 10). "
-          "Whether Acceptable Ads are in use (yes/no)."
-        destination: WEBSITE
-      }
-      policy {
-        cookies_allowed: NO
-        setting:
-          "Enabled or disabled via 'Ad blocking' setting."
-        policy_exception_justification:
-          "Parent setting may be controlled by policy"
-        }
-      })");
-
-}  // namespace
-
-// Represents an ongoing chain of requests relevant to a Topic.
-// A Topic is and endpoint on the Telemetry server that expects messages
-// about a domain of activity, ex. usage of Acceptable Ads or frequency of
-// filter "hits" per filter list. The browser may report on multiple topics.
-// Messages are sent periodically. The interval of communication and the
-// content of the messages is provided by a TopicProvider.
-class AdblockTelemetryService::Conversation {
- public:
-  Conversation(
-      std::unique_ptr<TopicProvider> topic_provider,
-      scoped_refptr<network::SharedURLLoaderFactory> url_loader_factory)
-      : topic_provider_(std::move(topic_provider)),
-        url_loader_factory_(url_loader_factory) {}
-
-  bool IsRequestDue() {
-    DCHECK_CALLED_ON_VALID_SEQUENCE(sequence_checker_);
-    const auto due_time = topic_provider_->GetTimeOfNextRequest();
-    if (due_time > base::Time::Now()) {
-      VLOG(1) << "[eyeo] Telemetry request for "
-              << topic_provider_->GetEndpointURL()
-              << " not due yet, should run at " << due_time;
-      return false;
-    }
-    if (IsRequestInFlight()) {
-      VLOG(1) << "[eyeo] Telemetry request for "
-              << topic_provider_->GetEndpointURL() << " already in-flight";
-      return false;
-    }
-    VLOG(1) << "[eyeo] Telemetry request for "
-            << topic_provider_->GetEndpointURL() << " is due";
-    return true;
-  }
-
-  void StartRequest() {
-    DCHECK_CALLED_ON_VALID_SEQUENCE(sequence_checker_);
-    VLOG(1) << "[eyeo] Telemetry request for "
-            << topic_provider_->GetEndpointURL() << " starting now";
-    topic_provider_->GetPayload(base::BindOnce(&Conversation::MakeRequest,
-                                               weak_ptr_factory_.GetWeakPtr()));
-  }
-
-  void Stop() {
-    DCHECK_CALLED_ON_VALID_SEQUENCE(sequence_checker_);
-    url_loader_.reset();
-  }
-
-  const std::unique_ptr<TopicProvider>& GetTopicProvider() const {
-    return topic_provider_;
-  }
-
- private:
-  bool IsRequestInFlight() {
-    return url_loader_ != nullptr || weak_ptr_factory_.HasWeakPtrs();
-  }
-
-  void MakeRequest(std::string payload) {
-    DCHECK_CALLED_ON_VALID_SEQUENCE(sequence_checker_);
-    auto request = std::make_unique<network::ResourceRequest>();
-    request->url = topic_provider_->GetEndpointURL();
-    VLOG(1) << "[eyeo] Sending request to: " << request->url;
-    request->method = net::HttpRequestHeaders::kPostMethod;
-    // The server expects authorization via a bearer token. The token may be
-    // empty in testing builds.
-    const auto auth_token = topic_provider_->GetAuthToken();
-    if (!auth_token.empty()) {
-      request->headers.SetHeader(net::HttpRequestHeaders::kAuthorization,
-                                 "Bearer " + auth_token);
-    }
-    // Notify the server we're expecting a JSON response.
-    request->headers.SetHeader(net::HttpRequestHeaders::kAccept, kDataType);
-    // Disallow using cache - identical requests should be physically sent to
-    // the server.
-    request->load_flags = net::LOAD_BYPASS_CACHE | net::LOAD_DISABLE_CACHE;
-    // Omitting credentials prevents cookies from being sent. The server does
-    // not expect or parse cookies, but we want to be on the safe side,
-    // privacy-wise.
-    request->credentials_mode = network::mojom::CredentialsMode::kOmit;
-
-    // If any url_loader_ existed previously, it will be overwritten and its
-    // request will be cancelled.
-    url_loader_ = network::SimpleURLLoader::Create(std::move(request),
-                                                   kTrafficAnnotation);
-
-    VLOG(2) << "[eyeo] Payload: " << payload;
-    url_loader_->AttachStringForUpload(payload, kDataType);
-    // The Telemetry server responds with a JSON that contains a description of
-    // any potential error. We want to parse this JSON if possible, we're not
-    // content with just an HTTP error code. Process the response content even
-    // if the code is not 200.
-    url_loader_->SetAllowHttpErrorResults(true);
-
-    url_loader_->DownloadToString(
-        url_loader_factory_.get(),
-        base::BindOnce(&Conversation::OnResponseArrived,
-                       base::Unretained(this)),
-        network::SimpleURLLoader::kMaxBoundedStringDownloadSize - 1);
-  }
-
-  void OnResponseArrived(std::unique_ptr<std::string> server_response) {
-    DCHECK_CALLED_ON_VALID_SEQUENCE(sequence_checker_);
-    topic_provider_->ParseResponse(std::move(server_response));
-    url_loader_.reset();
-  }
-
-  SEQUENCE_CHECKER(sequence_checker_);
-  std::unique_ptr<TopicProvider> topic_provider_;
-  scoped_refptr<network::SharedURLLoaderFactory> url_loader_factory_;
-  std::unique_ptr<network::SimpleURLLoader> url_loader_;
-  base::WeakPtrFactory<Conversation> weak_ptr_factory_{this};
-};
-
-AdblockTelemetryService::AdblockTelemetryService(
-    SubscriptionService* subscription_service,
-    scoped_refptr<network::SharedURLLoaderFactory> url_loader_factory,
-    base::TimeDelta initial_delay,
-    base::TimeDelta check_interval)
-    : subscription_service_(subscription_service),
-      url_loader_factory_(url_loader_factory),
-      initial_delay_(initial_delay),
-      check_interval_(check_interval) {
-  DCHECK(subscription_service_);
-  subscription_service_->AddObserver(this);
-}
-
-AdblockTelemetryService::~AdblockTelemetryService() {
-  DCHECK(subscription_service_);
-  subscription_service_->RemoveObserver(this);
-}
-
-void AdblockTelemetryService::AddTopicProvider(
-    std::unique_ptr<TopicProvider> topic_provider) {
-  ongoing_conversations_.push_back(std::make_unique<Conversation>(
-      std::move(topic_provider), url_loader_factory_));
-}
-
-void AdblockTelemetryService::Start() {
-  DCHECK_CALLED_ON_VALID_SEQUENCE(sequence_checker_);
-  auto* adblock_configuration =
-      subscription_service_->GetFilteringConfiguration(
-          kAdblockFilteringConfigurationName);
-  if (adblock_configuration) {
-    OnEnabledStateChanged(adblock_configuration);
-    adblock_configuration->AddObserver(this);
-  }
-}
-
-void AdblockTelemetryService::GetTopicProvidersDebugInfo(
-    TopicProvidersDebugInfoCallback service_callback) const {
-  const auto barrier_callback = base::BarrierCallback<std::string>(
-      ongoing_conversations_.size(), std::move(service_callback));
-  for (const auto& conversation : ongoing_conversations_) {
-    conversation->GetTopicProvider()->FetchDebugInfo(barrier_callback);
-  }
-}
-
-void AdblockTelemetryService::OnEnabledStateChanged(
-    FilteringConfiguration* config) {
-  DCHECK_CALLED_ON_VALID_SEQUENCE(sequence_checker_);
-  if (config->IsEnabled() && !timer_.IsRunning()) {
-    VLOG(1) << "[eyeo] Starting periodic Telemetry requests for enabled "
-               "configuration";
-    timer_.Start(FROM_HERE, initial_delay_,
-                 base::BindRepeating(&AdblockTelemetryService::RunPeriodicCheck,
-                                     base::Unretained(this)));
-  } else if (!config->IsEnabled() && timer_.IsRunning()) {
-    VLOG(1) << "[eyeo] Stopping periodic Telemetry requests for disabled "
-               "configuration";
-    Shutdown();
-  }
-}
-
-void AdblockTelemetryService::OnFilteringConfigurationInstalled(
-    FilteringConfiguration* config) {
-  if (config->GetName() != kAdblockFilteringConfigurationName) {
-    return;
-  }
-  if (config->IsEnabled() && !timer_.IsRunning()) {
-    VLOG(1) << "[eyeo] Starting periodic Telemetry requests for configuration";
-    timer_.Start(FROM_HERE, initial_delay_,
-                 base::BindRepeating(&AdblockTelemetryService::RunPeriodicCheck,
-                                     base::Unretained(this)));
-  }
-  // We cannot add twice the same observer, but calling RemoveObserver() for not
-  // added previously observer is fine. The situation of adding twice the same
-  // observer should not happen in production code without programmer error
-  // though it happens in our tests, but for extra safety instead of changing
-  // test code let's call RemoveObserver().
-  config->RemoveObserver(this);
-  config->AddObserver(this);
-}
-
-void AdblockTelemetryService::OnFilteringConfigurationUninstalled(
-    std::string_view config_name) {
-  if (config_name != kAdblockFilteringConfigurationName) {
-    return;
-  }
-  if (timer_.IsRunning()) {
-    VLOG(1) << "[eyeo] Stopping periodic Telemetry requests for removed "
-               "configuration";
-    Shutdown();
-  }
-}
-
-void AdblockTelemetryService::RunPeriodicCheck() {
-  for (auto& conversation : ongoing_conversations_) {
-    if (conversation->IsRequestDue()) {
-      conversation->StartRequest();
-    }
-  }
-  timer_.Start(FROM_HERE, check_interval_,
-               base::BindRepeating(&AdblockTelemetryService::RunPeriodicCheck,
-                                   base::Unretained(this)));
-}
-
-void AdblockTelemetryService::Shutdown() {
-  timer_.Stop();
-  for (auto& conversation : ongoing_conversations_) {
-    conversation->Stop();
-  }
-}
-
-}  // namespace adblock
diff --git a/components/adblock/core/adblock_telemetry_service.h b/components/adblock/core/adblock_telemetry_service.h
deleted file mode 100644
index 4a950e961..000000000
--- a/components/adblock/core/adblock_telemetry_service.h
+++ /dev/null
@@ -1,126 +0,0 @@
-/*
- * This file is part of eyeo Chromium SDK,
- * Copyright (C) 2006-present eyeo GmbH
- *
- * eyeo Chromium SDK is free software: you can redistribute it and/or modify
- * it under the terms of the GNU General Public License version 3 as
- * published by the Free Software Foundation.
- *
- * eyeo Chromium SDK is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with eyeo Chromium SDK.  If not, see <http://www.gnu.org/licenses/>.
- */
-
-#ifndef COMPONENTS_ADBLOCK_CORE_ADBLOCK_TELEMETRY_SERVICE_H_
-#define COMPONENTS_ADBLOCK_CORE_ADBLOCK_TELEMETRY_SERVICE_H_
-
-#include <memory>
-#include <string>
-#include <vector>
-
-#include "base/functional/callback_forward.h"
-#include "base/memory/raw_ptr.h"
-#include "base/sequence_checker.h"
-#include "base/time/time.h"
-#include "base/timer/timer.h"
-#include "components/adblock/core/configuration/filtering_configuration.h"
-#include "components/adblock/core/subscription/subscription_service.h"
-#include "components/keyed_service/core/keyed_service.h"
-#include "services/network/public/cpp/shared_url_loader_factory.h"
-#include "url/gurl.h"
-
-namespace network {
-class SimpleURLLoader;
-}  // namespace network
-
-namespace adblock {
-/**
- * @brief Sends periodic pings to eyeo in order to count active users. Executed
- * from Browser process UI main thread.
- */
-class AdblockTelemetryService
-    : public KeyedService,
-      public FilteringConfiguration::Observer,
-      public SubscriptionService::SubscriptionObserver {
- public:
-  // Provides data and behavior relevant for a Telemetry "topic". A topic could
-  // be "counting users" or "reporting filter list hits" for example.
-  class TopicProvider {
-   public:
-    using PayloadCallback = base::OnceCallback<void(std::string payload)>;
-    using DebugInfoCallback = base::OnceCallback<void(std::string payload)>;
-    virtual ~TopicProvider() = default;
-    // Endpoint URL on the Telemetry server onto which requests should be sent.
-    virtual GURL GetEndpointURL() const = 0;
-    // Authorization bearer token for the endpoint defined by GetEndpointURL().
-    virtual std::string GetAuthToken() const = 0;
-    // Data uploaded with the request, should be valid for the schema
-    // present on the server. Async to allow querying asynchronous data sources.
-    virtual void GetPayload(PayloadCallback callback) const = 0;
-    // Returns the desired time when AdblockTelemetryService should make the
-    // next network request.
-    virtual base::Time GetTimeOfNextRequest() const = 0;
-    // Parses the response returned by the Telemetry server. |response_content|
-    // may be null. Implementation is free to implement a "retry" in case of
-    // response errors via GetTimeToNextRequest().
-    virtual void ParseResponse(
-        std::unique_ptr<std::string> response_content) = 0;
-    // Gets debugging info to be logged on chrome://adblock-internals. Do not
-    // put any secrets here (tokens, api keys). Asynchronous to allow reusing
-    // the async logic of GetPayload, if needed.
-    virtual void FetchDebugInfo(DebugInfoCallback callback) const = 0;
-  };
-  AdblockTelemetryService(
-      SubscriptionService* subscription_service_,
-      scoped_refptr<network::SharedURLLoaderFactory> url_loader_factory,
-      base::TimeDelta initial_delay,
-      base::TimeDelta check_interval);
-  ~AdblockTelemetryService() override;
-  using TopicProvidersDebugInfoCallback =
-      base::OnceCallback<void(std::vector<std::string>)>;
-
-  // Add all required topic providers before calling Start().
-  void AddTopicProvider(std::unique_ptr<TopicProvider> topic_provider);
-
-  // Starts periodic Telemetry requests, provided ad-blocking is enabled.
-  // If ad blocking is disabled, the schedule will instead start when
-  // ad blocking becomes enabled.
-  void Start();
-
-  // KeyedService:
-  void Shutdown() override;
-
-  // FilteringConfiguration::Observer
-  void OnEnabledStateChanged(FilteringConfiguration* config) override;
-
-  // Collects debug information from all topic providers. Runs |callback| once
-  // all topic providers have provided their info.
-  void GetTopicProvidersDebugInfo(
-      TopicProvidersDebugInfoCallback callback) const;
-  // SubscriptionService::SubscriptionObserver
-  void OnFilteringConfigurationInstalled(
-      FilteringConfiguration* config) override;
-  void OnFilteringConfigurationUninstalled(
-      std::string_view config_name) override;
-
- private:
-  void RunPeriodicCheck();
-
-  SEQUENCE_CHECKER(sequence_checker_);
-  raw_ptr<SubscriptionService> subscription_service_;
-  scoped_refptr<network::SharedURLLoaderFactory> url_loader_factory_;
-  base::TimeDelta initial_delay_;
-  base::TimeDelta check_interval_;
-
-  class Conversation;
-  std::vector<std::unique_ptr<Conversation>> ongoing_conversations_;
-  base::OneShotTimer timer_;
-};
-
-}  // namespace adblock
-
-#endif  // COMPONENTS_ADBLOCK_CORE_ADBLOCK_TELEMETRY_SERVICE_H_
diff --git a/components/adblock/core/common/BUILD.gn b/components/adblock/core/common/BUILD.gn
index 53bdc1764..04787b2e1 100644
--- a/components/adblock/core/common/BUILD.gn
+++ b/components/adblock/core/common/BUILD.gn
@@ -67,14 +67,6 @@ source_set("common") {
 
 config("eyeo_application_config") {
   defines = []
-
-  if (eyeo_application_name != "") {
-    defines += [ "EYEO_APPLICATION_NAME=\"$eyeo_application_name\"" ]
-  }
-
-  if (eyeo_application_version != "") {
-    defines += [ "EYEO_APPLICATION_VERSION=\"$eyeo_application_version\"" ]
-  }
 }
 
 source_set("utils") {
-- 
2.49.0

